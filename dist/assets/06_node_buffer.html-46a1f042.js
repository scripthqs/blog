import{_ as n,o as s,c as a,f as t}from"./app-06f72143.js";const p={},o=t(`<h1 id="buffer-和二进制" tabindex="-1"><a class="header-anchor" href="#buffer-和二进制" aria-hidden="true">#</a> Buffer 和二进制</h1><p>计算机中，文字、数字、图片、音频、视频最终都是使用二进制来表示的</p><ul><li>前端很少处理二进制的数据</li><li>只需要告诉浏览器图片 url 地址、视频链接、音频链接，浏览器会自己渲染出来</li></ul><p>对于服务器来说，是需要处理二进制数据的</p><ul><li>考虑文件的编码格式 utf-8 或者 GBK，转换时需要拿到二进制内容</li><li>对图片进行裁剪、转换等操作时，需要读取图片的 buffer 处理(node Sharp 库)</li><li>Node 通过 TCP 建立长连接，需要将数据转成字节</li></ul><p>服务器很多功能必须操作二进制数据，但是二进制是由 01 组成，又不太方便直接一位一位的操作。node 提供了全局 Buffer 类，方便操作二进制数据</p><ul><li>Buffer 存储的是二进制数据(bit)</li><li>Buffer 看做一个数组，数组的每项可以保存 8 位二进制</li><li>8 位合成一个单元，称为字节(byte)</li><li>1 byte = 8bit , 1 kb = 1024 byte , 1 M = 1024 kb</li><li>很多编程语言中 int 类型 4 个字节，long 类型 8 个字节</li><li>二进制 11111111 , 十进制 255 , 十六进制 FF</li><li>TCP 传输的是字节流，读写时需要说明字节个数</li><li>RGB 值都是 255，本质在计算机一个字节存储</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.创建Buffer</span>
<span class="token keyword">const</span> buf2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.创建Buffer(字符串中包含中文)</span>
<span class="token keyword">const</span> buf3 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;你好啊hhhhh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf3<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3.手动指定的Buffer创建过程的编码</span>
<span class="token comment">// 编码操作</span>
<span class="token keyword">const</span> buf4 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;哈哈哈&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf16le&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 解码操作</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf4<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&quot;utf16le&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建8个字节大小的buffer内存空间</span>
<span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  可以对每项进行操作</span>
buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x66</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 读取文件是，不传编码，默认就是buffer</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./aaa.txt&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&quot;buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6d</span><span class="token punctuation">;</span> <span class="token comment">//m</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//默认传入utf-8</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 读取一个图片的二进制(node中有一个库sharp，可以处理图片buffer)</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./test.png&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&quot;buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 Buffer 时，并不会频繁的向操作系统申请内存，它会默认先申请一个 <code>8 * 1024</code> 个字节大小的内存，也就是 8kb</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Buffer<span class="token punctuation">.</span>poolSize <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10),c=[o];function e(u,l){return s(),a("div",null,c)}const k=n(p,[["render",e],["__file","06_node_buffer.html.vue"]]);export{k as default};
