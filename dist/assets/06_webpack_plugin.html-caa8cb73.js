import{_ as n,o as s,c as a,f as e}from"./app-06f72143.js";const p={},l=e(`<h1 id="plugin-插件" tabindex="-1"><a class="header-anchor" href="#plugin-插件" aria-hidden="true">#</a> Plugin 插件</h1><h2 id="plugin-简介" tabindex="-1"><a class="header-anchor" href="#plugin-简介" aria-hidden="true">#</a> plugin 简介</h2><p>plugin 是插件的意思，通过安装和配置第三方的插件，<strong>可以拓展 webpack 的能力</strong>，从而让 webpack 用起来更方便。比如打包优化，文件压缩，环境变量注入等。</p><p><strong>loader 是用于转换某些类型的模块，是一个转换器，plugin 是 webpack 本身的拓展，是一个拓展器。</strong></p><p>常用的 webpack 插件有：</p><p><code>webpack-dev-server</code></p><ul><li>类似于 node.js 阶段用到的 nodemon 工具</li><li>每当修改了源代码，webpack 会自动进行项目的打包和构建</li></ul><p><code>html-webpack-plugin</code></p><ul><li>webpack 中的 HTML 插件（类似于一个模板引擎插件）</li><li>可以通过此插件自定制 index.html 页面的内容</li><li>对 index.html 进行打包处理,自动在 dist 文件夹中，生成了一个 index.html 的文件</li></ul><p><code>CleanWebpackPlugin</code></p><ul><li>每次修改了一些配置，重新打包时，帮助我们删除 dist 文件夹</li></ul><p><code>DefinePlugin</code></p><ul><li>允许在编译时创建配置的全局常量，是一个 webpack 内置的插件（不需要单独安装）</li><li>比如 p<wbr>rocess.env.NODE_ENV <strong>判断当前环境是开发还是生产</strong></li></ul><h2 id="webpack-dev-server" tabindex="-1"><a class="header-anchor" href="#webpack-dev-server" aria-hidden="true">#</a> webpack-dev-server</h2><p><code>webpack-dev-server</code> 可以让 webpack <strong>监听项目源代码的变化</strong>，从而进行<strong>自动打包构建</strong></p><ol><li><p>安装插件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack-dev-server//安装最新版本
<span class="token function">npm</span> <span class="token function">install</span> webpack-dev-server@3.11.2 <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改 <strong>package.json -&gt; scripts</strong> 中的 dev 命令如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack serve&quot;</span><span class="token comment">//通过npm run 执行</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>再次运行 npm run dev 命令，重新进行项目的打包</p></li><li><p>在浏览器中使用 80 端口，查看自动打包效果</p></li><li><p>ctrl+c 按两次就可以停掉</p></li></ol><p><strong>打包生成的文件哪儿去了</strong>：</p><p>不配置 webpack-dev-server 的情况下，webpack 打包生成的文件，会存放到实际的物理磁盘上</p><ul><li><p>严格遵守开发者在 webpack.config.js 中指定配置</p></li><li><p>根据 output 节点指定路径进行存放</p></li></ul><p>配置了 webpack-dev-server 之后，打包生成的文件存放到了内存中</p><ul><li><p>不再根据 output 节点指定的路径，存放到实际的物理磁盘上</p></li><li><p>提高了实时打包输出的性能，因为内存比物理磁盘速度快很多</p></li></ul><p><strong>生成到内存中的文件该如何访问？</strong></p><p>webpack-dev-server 生成到内存中的文件，默认放到了项目的根目录中，而且是虚拟的、不可见的。</p><ul><li>可以直接用 <code>/</code> 表示项目根目录，后面跟上要访问的文件名称，即可访问内存中的文件</li><li>例如 <code>/bundle.js</code> 就表示要访问 <code>webpack-dev-server</code> 生成到内存中的 <code>bundle.js</code> 文件</li></ul><h2 id="html-webpack-plugin" tabindex="-1"><a class="header-anchor" href="#html-webpack-plugin" aria-hidden="true">#</a> html-webpack-plugin</h2><p><code>html-webpack-plugin</code> 是 webpack 中的 HTML 插件，可以通过此插件自定制 index.html 页面的内容。</p><p>通过 html-webpack-plugin 插件，将 src 目录下的 index.html 首页，<strong>复制到项目根目录中一份</strong></p><ol><li><p>安装 html-webpack-plugin</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev html-webpack-plugin
<span class="token function">npm</span> <span class="token function">install</span> html-webpack-plugin@5.3.2 <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 webpack.config.js 中配置 html-webpack-plugin</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>const HtmlWebpackPlugin = require(<span class="token string">&quot;html-webpack-plugin&quot;</span>);
const path = require(<span class="token string">&quot;path&quot;</span>);

const htmlPlugin = new HtmlWebpackPlugin(<span class="token punctuation">{</span>
  template<span class="token operator">:</span> <span class="token string">&quot;./src/index.html&quot;</span><span class="token punctuation">,</span>
  filename<span class="token operator">:</span> <span class="token string">&quot;./index.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>);
module.exports = <span class="token punctuation">{</span>
  entry<span class="token operator">:</span> path.join(__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./src/index.js&quot;</span>)<span class="token punctuation">,</span>
  output<span class="token operator">:</span> <span class="token punctuation">{</span>
    path<span class="token operator">:</span> path.join(__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span>)<span class="token punctuation">,</span>
    filename<span class="token operator">:</span> <span class="token string">&quot;bundle.js&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>htmlPlugin<span class="token punctuation">]</span><span class="token punctuation">,</span>
  mode<span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>注意：</p><ul><li>通过 HTML 插件复制到项目根目录中的 index.html 页面，也被放到了内存中</li><li>HTML 插件在生成的 index.html 页面，<strong>自动注入了打包的 bundle.js 文件</strong></li></ul><h2 id="devserver-节点" tabindex="-1"><a class="header-anchor" href="#devserver-节点" aria-hidden="true">#</a> devServer 节点</h2><p>在 webpack.config.js 配置文件中，可以通过 devServer 节点对 webpack-dev-server 插件进行更多的配置，</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>devServer<span class="token operator">:</span> <span class="token punctuation">{</span>
  open<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//自动打开浏览器</span>
  host<span class="token operator">:</span> &#39;<span class="token number">127.0</span>.<span class="token number">0.1</span>&#39;<span class="token punctuation">,</span>
  port<span class="token operator">:</span> <span class="token number">9999</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li><p>凡是修改了 <code>webpack.config.js</code> 配置文件，或修改了 package.json 配置文件，必须重启实时打包的服务器，否则最新的配置文件无法生效。</p></li><li><p>80 端口在 http 协议中，可以省略。</p></li></ul>`,35),i=[l];function t(o,c){return s(),a("div",null,i)}const d=n(p,[["render",t],["__file","06_webpack_plugin.html.vue"]]);export{d as default};
