import{_ as t,o as e,c as l,f as i}from"./app-c6441670.js";const d={},n=i('<h1 id="dom-简介" tabindex="-1"><a class="header-anchor" href="#dom-简介" aria-hidden="true">#</a> DOM 简介</h1><p>Javascript 基础分为 3 个部分：</p><ul><li>ECMAScript:JavaScript 的语法标准，包括变量、表达式、运算符、函数、if 语句、for 语句。</li><li>DOM：文档对象模型(Document Object Model)，操作网页上的元素的 API。比如让盒子移动、变色、轮播图等。</li><li>BOM：浏览器对象模型(Browser Object Model)，操作浏览器部分功能的 API。比如让浏览器自动滚动。</li></ul><p>JS 通过 DOM 来对 HTML 文档进行操作，只要理解 DOM 就可以操作 WEB 页面。</p><ul><li><p>Document 文档：文档表示整个 HTML 网页文档。</p></li><li><p>Object 对象：将网页中每一个部分都转换成了对象，网页中的标签、文本、注释都是对象。</p></li><li><p>Model 模型：使用模型来表示对象之间的关系，这样方便我们获取对象。</p></li></ul><h2 id="解析过程" tabindex="-1"><a class="header-anchor" href="#解析过程" aria-hidden="true">#</a> 解析过程</h2><p>HTML 加载完毕，渲染引擎会在内存中把 HTML 文档生成一个 DOM 树，getElementById 是获取内中 BOM 上的元素节点。然后操作的时候修改该元素的属性。DOM 的作用：</p><ul><li>找对象（元素节点）</li><li>设置元素的属性值</li><li>设置元素的样式</li><li>动态创建和删除元素</li><li>事件的触发响应：事件源、事件、事件的驱动程序</li></ul><h2 id="节点" tabindex="-1"><a class="header-anchor" href="#节点" aria-hidden="true">#</a> 节点</h2><p>节点(node)：构成元素 HTML 网页的最基本单元。网页中的每一个部分都可以称为一个节点，比如：HTML 标签、属性、文本、注释、整个文档都是一个节点。</p><p>节点的分类：</p><ul><li>文档节点（文档）：整个 HTML 文档。</li><li>元素节点（标签）：HTML 标签。</li><li>属性节点（属性）：元素的属性。</li><li>文本节点（文本）：HTML 标签中的文本内容（包括标签之间的空格、换行）。</li></ul><p>节点的类型不同，属性和方法也不同，所有的节点都是 Object。</p><p>节点的属性：</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">nodeName</th><th style="text-align:center;">nodeType</th><th style="text-align:center;">nodeValue</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>文档节点</strong></td><td style="text-align:center;">#document</td><td style="text-align:center;">9</td><td style="text-align:center;">null</td></tr><tr><td style="text-align:center;"><strong>元素节点</strong></td><td style="text-align:center;">标签名</td><td style="text-align:center;">1</td><td style="text-align:center;">null</td></tr><tr><td style="text-align:center;"><strong>属性节点</strong></td><td style="text-align:center;">属性名</td><td style="text-align:center;">2</td><td style="text-align:center;">属性值</td></tr><tr><td style="text-align:center;"><strong>文本节点</strong></td><td style="text-align:center;">#text</td><td style="text-align:center;">3</td><td style="text-align:center;">文本内容</td></tr></tbody></table><p>DOM 由节点组成，在 HTML 中，一切都是节点。</p><h2 id="元素节点的获取" tabindex="-1"><a class="header-anchor" href="#元素节点的获取" aria-hidden="true">#</a> 元素节点的获取</h2><p>浏览器为我们提供文档节点对象，这个对象是 window 的属性。可以在页面中直接使用，文档节点代表的是整个网页。</p><ul><li><code>console.log(document)</code> 文档对象</li><li>通过 document 对象找到元素节点</li><li><code>var div1 = document.getElementById(&quot;box1&quot;);</code>通过 id 获取 一个 元素节点（为什么是一个呢？因为 id 是唯一的）</li><li><code>var div2 = document.getElementsByTagName(&quot;div&quot;)</code>通过 标签名 获取 元素节点数组，所以有 s <ul><li>这个方法会给我返回一个类数组对象，所有查询的元素都会封装到对象中。</li></ul></li><li><code>var div3 = document.getElementsByClassName(&quot;haha&quot;)</code> //方式三：通过 类名 获取 元素节点数组，所以有 s，ie8 及以下不支持</li><li>都是通过 document 调用的</li></ul><h2 id="浏览器加载顺序" tabindex="-1"><a class="header-anchor" href="#浏览器加载顺序" aria-hidden="true">#</a> 浏览器加载顺序</h2><p>浏览器加载页面是按照从上到下的顺序加载的，如果将 script 标签写在页面上边，代码执行时，页面还没加载。</p><ul><li>可以为 window 绑定一个 onload 事件，该事件对应的响应函数将会在页面加载完毕后执行</li><li><code>window.onload = function(){}</code></li></ul>',22),a=[n];function r(o,c){return e(),l("div",null,a)}const h=t(d,[["render",r],["__file","16_js_DOM.html.vue"]]);export{h as default};
