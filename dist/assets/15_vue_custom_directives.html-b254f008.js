import{_ as n,o as s,c as a,f as e}from"./app-007a9be1.js";const t={},p=e(`<h1 id="自定义指令" tabindex="-1"><a class="header-anchor" href="#自定义指令" aria-hidden="true">#</a> 自定义指令</h1><h2 id="自定义指令简介" tabindex="-1"><a class="header-anchor" href="#自定义指令简介" aria-hidden="true">#</a> 自定义指令简介</h2><p>vue 官方提供了 v-text、v-for、v-model、v-if 等常用的指令。除此之外 vue 还允许开发者自定义指令</p><h2 id="自定义指令的分类" tabindex="-1"><a class="header-anchor" href="#自定义指令的分类" aria-hidden="true">#</a> 自定义指令的分类</h2><p>vue 中的自定义指令分为两类，分别是：</p><ul><li><strong>私有</strong>自定义指令</li><li><strong>全局</strong>自定义指令</li></ul><h2 id="私有自定义指令" tabindex="-1"><a class="header-anchor" href="#私有自定义指令" aria-hidden="true">#</a> 私有自定义指令</h2><h3 id="directives" tabindex="-1"><a class="header-anchor" href="#directives" aria-hidden="true">#</a> directives</h3><p>在每个 vue 组件中，可以在 <strong>directives</strong> 节点下声明私有自定义指令。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">bind</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">//el是绑定了此指令的原生的DOM对象</span>
        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>bind()函数的的参数 el 是绑定了此指令的原生的 DOM 对象。</li><li>bind()函数只会在第一次绑定元素时触发。</li></ul><h3 id="v-前缀" tabindex="-1"><a class="header-anchor" href="#v-前缀" aria-hidden="true">#</a> <code>v-</code> 前缀</h3><p>在使用自定义指令时，需要加上 <strong>v-</strong> 前缀</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-color</span><span class="token punctuation">&gt;</span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="binding" tabindex="-1"><a class="header-anchor" href="#binding" aria-hidden="true">#</a> <code>binding</code></h3><p>为自定义指令<strong>动态绑定参数值</strong>:</p><p>在 template 结构中<strong>使用自定义指令</strong>时，可以通过等号<code>=</code>的方式，为当前指令<strong>动态绑定参数值</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>h1 v<span class="token operator">-</span>color<span class="token operator">=</span><span class="token string">&#39;color&#39;</span><span class="token operator">&gt;</span>标题<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h1 v<span class="token operator">-</span>color<span class="token operator">=</span><span class="token string">&quot;&#39;red&#39;&quot;</span><span class="token operator">&gt;</span>标题<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>

<span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">bind</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>binding<span class="token punctuation">)</span>
        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> binding<span class="token punctuation">.</span>value
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="update-函数" tabindex="-1"><a class="header-anchor" href="#update-函数" aria-hidden="true">#</a> update 函数</h3><p>bind 函数<strong>只调用 1 次</strong>：当指令第一次绑定到元素时调用，当 <strong>DOM 更新时 bind 函数不会被触发</strong>。 update 函数会在每次 DOM 更新时被调用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">bind</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>binding<span class="token punctuation">)</span>
        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> binding<span class="token punctuation">.</span>value
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">updated</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> binding<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数简写" tabindex="-1"><a class="header-anchor" href="#函数简写" aria-hidden="true">#</a> 函数简写</h3><p>如果 <strong>bind</strong> 和<strong>update</strong> 函数中的<strong>逻辑完全相同</strong>，则<strong>对象格式</strong>的自定义指令可以简写成<strong>函数格式</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">color</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> binding<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="全局自定义指令" tabindex="-1"><a class="header-anchor" href="#全局自定义指令" aria-hidden="true">#</a> 全局自定义指令</h2><p>全局共享的自定义指令需要通过**Vue.directive()**进行声明</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">color</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),o=[p];function i(c,l){return s(),a("div",null,o)}const u=n(t,[["render",i],["__file","15_vue_custom_directives.html.vue"]]);export{u as default};
