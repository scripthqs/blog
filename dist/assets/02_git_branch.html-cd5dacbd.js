import{_ as e,o as i,c as a,f as n}from"./app-007a9be1.js";const c={},d=n(`<h1 id="git-分支" tabindex="-1"><a class="header-anchor" href="#git-分支" aria-hidden="true">#</a> Git 分支</h1><p>分支相当于当前工作目录的副本，使用分支，可以让我们从主线中分离出来，不同的分支可以做不同的事情，有的分支修复 bug，有的分支开发新功能，避免影响开发主线。</p><h2 id="分支的分类" tabindex="-1"><a class="header-anchor" href="#分支的分类" aria-hidden="true">#</a> 分支的分类</h2><ul><li>主分支(master)：第一次向 git 仓库中提交更新记录时自动产生的分支。</li><li>开发分支(develop)：作为开发的分支，基于 master 分支创建，在实际开发中，一定要保持主分支的稳定性，开发完成后，再合并到主分支，每个分支相互独立，互不影响。</li><li>功能分支(feature)：作为开发具体功能的分支，基于开发分支创建。功能分支开发完成后，再合并到开发分支，开分分支功能累计后再合并到主分支。</li></ul><p>分支可以存储各个项目版本</p><h2 id="分支命令" tabindex="-1"><a class="header-anchor" href="#分支命令" aria-hidden="true">#</a> 分支命令</h2><ul><li><code>git branch</code> 查看分支</li><li><code>git branch 分支名称</code> 创建分支</li><li><code>git checkout -b 分支名称</code> 创建并切换分支</li><li><strong>在切换分支之前，当前分支上的工作一定要提交到 git 仓库中，要保证当前分支上的工作区是完全干净的状态。</strong></li><li><code>git checkout 分支名称</code> 切换到指定分支</li><li><code>git push -u origin 分支名称</code></li><li><code>git merge 需要合并的分支</code> 合并分支，合并分支前要先切换到主分支</li><li><code>git branch -d 分支名称</code>删除分支，删除分支前要切换到其他分支下，分支被合并后才运行删除，<code>-D</code>可以强制删除</li><li>经过实验证明，主分支也能够被删除，小心。</li><li><code>git push origin --delete 分支名称</code> 删除远程分支</li></ul><h2 id="暂时保持更改" tabindex="-1"><a class="header-anchor" href="#暂时保持更改" aria-hidden="true">#</a> 暂时保持更改</h2><p>在 git 中，分支要先提交到仓库再切换，但有时不想提交又要切换分支，可以暂时提取分支上的所有改动并存储，让开发人员得到一个干净的工作副本，临时转向其他工作。</p><ul><li><code>git stash</code> 存储临时改动，提取所有的改动并保存至剪切板内</li><li><code>git restore --staged 文件</code> 这条命令还可以将临时存储的文件撤销</li><li><code>git stash pop</code>恢复分支</li></ul><p>git 提供的存储功能是独立于分支的，其他分支也可以使用这个命令，注意不要弄错分支</p><h2 id="git-分支操作" tabindex="-1"><a class="header-anchor" href="#git-分支操作" aria-hidden="true">#</a> git 分支操作</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># git fetch 将远程主机的最新内容拉到本地</span>
<span class="token comment"># git branch -a 查看所有分支</span>
<span class="token comment"># 保证当前分支最新再切换分支</span>
<span class="token comment"># git add .</span>
<span class="token comment"># git commit -m 描述</span>
<span class="token comment"># git checkout dev-1.1.0 切换分支</span>
<span class="token comment"># git merge dev-1.0.0 合并分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-vscode-命令行工具" tabindex="-1"><a class="header-anchor" href="#使用-vscode-命令行工具" aria-hidden="true">#</a> 使用 vscode 命令行工具</h2>`,14),s=[d];function t(l,o){return i(),a("div",null,s)}const h=e(c,[["render",t],["__file","02_git_branch.html.vue"]]);export{h as default};
