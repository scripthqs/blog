import{_ as l,r as p,o,c,b as n,e as a,d as e,f as i}from"./app-f4e03468.js";const t={},d=i('<h1 id="npm-使用介绍" tabindex="-1"><a class="header-anchor" href="#npm-使用介绍" aria-hidden="true">#</a> NPM 使用介绍</h1><h2 id="npm-简介" tabindex="-1"><a class="header-anchor" href="#npm-简介" aria-hidden="true">#</a> NPM 简介</h2><p>NPM（Node Package Manager）是随同 Node.js 一起安装的包管理工具，能解决 NodeJS 代码部署上的很多问题，常见的使用场景有以下几种；</p><ul><li><p>允许用户从 NPM 服务器下载别人编写的第三方包到本地使用。</p></li><li><p>允许用户从 NPM 服务器下载并安装别人编写的命令行程序到本地使用。</p></li><li><p>允许用户将自己编写的包或命令行程序上传到 NPM 服务器供别人使用。</p></li><li><p><code>npm -v</code> 查看 npm 的版本，npm 相当于手机的 app 应用商店。</p></li></ul><p>由于 npm 默认的下载地址在国外（npmjs.com），有时候会被墙，导致无法下载或者下载很慢。因此，我们可以尝试切换成，从其他的镜像源下载 npm 包。</p>',5),r={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},u=i(`<p>除了 npm 以外还有 yarn，功能和 npm 一样，也可以作为包管理工具，windows 系统一般使用 npm 就可以了，另外还有 npx（了解）。</p><h2 id="npm-源切换" tabindex="-1"><a class="header-anchor" href="#npm-源切换" aria-hidden="true">#</a> NPM 源切换</h2><p>源：源站，镜像源，镜像。通过 NRM 切换镜像源（推荐），让下载更快。</p><p><strong>方法 1：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> cnpm <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npm.taobao.org
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>执行完毕上述命名后，在系统中提供了一个 cnpm 包管理工具，功能和 npm 一样，所不同的是 cnpm 镜像源地址为阿里提供的源地址。</p></blockquote><p><strong>方法 2：</strong></p><p>nrm 是一个 npm 源管理器，允许你快速地在 npm 源间切换。npm 默认情况下是使用 npm 官方源(npm config list 来查看)，如果直接修改 npm 源，如果后续需要连接到官方源才能工作，这样来回切换源就变得麻烦了，nrm 通过简单的命令就可以解决此问题。</p><ul><li>NRM：Node Registry Manager。作用是：切换和管理 npm 包的镜像源。</li><li><code>npm i -g nrm</code>安装 NRM</li><li><code>nrm ls</code>显示全部的镜像</li><li><code>nrm use taobao</code> 使用淘宝的镜像</li></ul><blockquote><p>注：-g 表示<code>global</code>全局，让 nrm 不限于到某一个项目中，而是在所有的项目中都可使用</p></blockquote><p><code>nrm ls</code>显示全部的镜像报错<code>code: ERR_INVALID_ARG_TYPE</code></p><p>解决方法:</p><ul><li><p>打开<code>cli.js</code>第 17 行修改成</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//const NRMRC = path.join(p<wbr>rocess.env.HOME, &#39;.nrmrc&#39;); (删除)</span>
<span class="token keyword">const</span> <span class="token constant">NRMRC</span> <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">[</span>process<span class="token punctuation">.</span>platform <span class="token operator">==</span> <span class="token string">&quot;win32&quot;</span> <span class="token operator">?</span> <span class="token string">&quot;USERPROFILE&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;HOME&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;.nrmrc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>重启 CMD 生效。</p><h2 id="npm-相关命令" tabindex="-1"><a class="header-anchor" href="#npm-相关命令" aria-hidden="true">#</a> NPM 相关命令</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 搜索模块包 切换淘宝源后就不可以使用search</span>
<span class="token function">npm</span> search
<span class="token comment"># 初始化生成package.json文件（创建项目的）</span>
<span class="token function">npm</span> init
<span class="token function">npm</span> init -y<span class="token punctuation">[</span>不询问<span class="token punctuation">]</span>
<span class="token comment"># 查看本项目已安装模块</span>
<span class="token function">npm</span> list
<span class="token comment"># 安装模块</span>
<span class="token function">npm</span> install<span class="token punctuation">(</span>简写i<span class="token punctuation">)</span> xxx
<span class="token comment"># 自动下载依赖所需的包</span>
<span class="token function">npm</span> install<span class="token punctuation">(</span>简写i<span class="token punctuation">)</span>
<span class="token comment"># 卸载已安装模块</span>
<span class="token function">npm</span> uninstall 模块名
<span class="token comment"># 查看全局node_modules的地址</span>
<span class="token function">npm</span> root <span class="token parameter variable">-g</span>
<span class="token comment"># 删除</span>
<span class="token function">npm</span> remove<span class="token punctuation">(</span>简写r<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装参数：</p><ul><li>--save -S 记录生产环境所需模块 默认</li><li>--save-dev -D 记录开发环境所需模块</li><li>-g 安装到全局</li></ul><p>生产环境：代码已经上线了的运行环境</p><p>开发环境：开发人员在开发的时候环境</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装包并添加到依赖中</span>
<span class="token function">npm</span> <span class="token function">install</span> 包名 <span class="token parameter variable">--save</span>
<span class="token comment"># 全局安装包，一般都是一些工具</span>
<span class="token function">npm</span> <span class="token function">install</span> 包名 <span class="token parameter variable">-g</span>
<span class="token comment"># 查看全局node安装路径</span>
<span class="token function">npm</span> root <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 npm 安装的包都放在 node_modules 文件夹中，直接通过包名引入即可</p><h2 id="语义化版本" tabindex="-1"><a class="header-anchor" href="#语义化版本" aria-hidden="true">#</a> 语义化版本</h2><p>版本格式：主版本号，次版本号，修订号，先行版本号</p><ul><li>主版本号：当做了不兼容的 api 修改时</li><li>次版本号：当作了向下兼容的功能性新增</li><li>修订号：日常 bug 修改</li><li>先行版本号：作为延伸</li></ul><ol><li><code>~</code>：表示版本号只能改变最末尾那一段</li><li><code>^</code>：表示除了大版本号以外，小版本号和补丁版本号都可以改变</li></ol><p>0 开头的版本号有特殊情况。</p><p>软件版本发行的四个阶段：</p><ol><li>alpha：内测版本</li><li>beta：公测版本</li><li>release candidate：RC，候选版本，功能已经确定，主要时排 bug</li><li>release：正式发行版本</li></ol><p>下载软件不要只看版本号，还要看阶段。</p><h2 id="package-包" tabindex="-1"><a class="header-anchor" href="#package-包" aria-hidden="true">#</a> package 包</h2><p>CommonJS 的包规范将一组相关的模块组合在一起，形成一组完整的工具，CommonJS 的包规范又包结构和包描述文件两部分组成。</p><ul><li>包结构：用于组织包中的各种文件</li><li>包描述文件：描述包的相关信息，以供外部读取分析</li></ul><p>包实际就是一个压缩文件，解压以后还原为目录。符合规范的目录，应该包含以下文件：</p><ul><li>package.json：描述文件（必须的）</li><li>bin：存放可执行二进制文件的目录</li><li>lib：存放 js 代码的目录</li><li>doc：存放文档的目录</li><li>test：单元测试</li></ul><p>.json 文件不能写注释，package.json 文件可以自定义脚本</p><p>使用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以创建 package.json 文件</p><h2 id="自定义-npm-命令" tabindex="-1"><a class="header-anchor" href="#自定义-npm-命令" aria-hidden="true">#</a> 自定义 npm 命令</h2><p>目的：npm 允许我们执行 npm 调用三方模块，由于通过 npm 调用三方模块的指令写起来不方便，但是有需要频繁使用，因此我们可以自定义命令进行简化（别名）。在 package.json 文件中的 script 下，使用<code>npm run 自定义命令</code>，在 webpack 和 vue 中会经常使用。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo hello&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后就可以在命令行中运行（npm run <code>自定义指令名称</code>）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="自动重启应用" tabindex="-1"><a class="header-anchor" href="#自动重启应用" aria-hidden="true">#</a> 自动重启应用</h2><p>每次修改服务端得代码时，都需要重新运行 node xx.js 才能运行，安装 supervisor 或者 nodemon 自动重启工具可以自动运行服务端代码。</p><h3 id="supervisor" tabindex="-1"><a class="header-anchor" href="#supervisor" aria-hidden="true">#</a> supervisor</h3><ol><li><p>首先安装 supervisor</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> supervisor <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用 supervisor 代替 node 命令启动应用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>supervisor app.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="nodemon-推荐" tabindex="-1"><a class="header-anchor" href="#nodemon-推荐" aria-hidden="true">#</a> nodemon（推荐）</h3><p>更便于记忆</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 全局安装nodemon</span>
<span class="token function">npm</span> i <span class="token parameter variable">-g</span> nodemon

<span class="token comment"># 执行node脚本</span>
nodemon app.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用非常广泛，框架也是这样的应用。</p><h2 id="ni-包管理工具" tabindex="-1"><a class="header-anchor" href="#ni-包管理工具" aria-hidden="true">#</a> ni 包管理工具</h2><p>除了 npm 包管理工具，还有 yarn，cnpm，pnpm 等，不同的项目经常会用不用包管理工具。Vue3 的源码刚开始使用 yarn，后来又改用 pnpm，还推荐了一个工具<code>ni</code>。</p><blockquote><p>We also recommend installing ni to help switching between repos using different package managers. ni also provides the handy nr command which running npm scripts easier.</p><p>我们还建议安装 ni 以帮助使用不同的包管理器在 repos 之间切换。 ni 还提供了方便的 nr 命令，可以更轻松地运行 npm 脚本。</p></blockquote><p>安装 ni</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-g</span> @antfu/ni
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ni 会检测项目中的 yarn.lock / pnpm-lock.yaml / package-lock.json 以了解当前的包管理器，并运行相应的命令。</p><ul><li>使用 <code>ni</code> 在项目中安装依赖时： <ul><li>假设你的项目中有锁文件 <code>yarn.lock</code>，那么它最终会执行 <code>yarn install</code> 命令。</li><li>假设你的项目中有锁文件 <code>pnpm-lock.yaml</code>，那么它最终会执行 <code>pnpm i</code> 命令。</li><li>假设你的项目中有锁文件 <code>package-lock.json</code>，那么它最终会执行 <code>npm i</code> 命令。</li></ul></li><li>使用 <code>ni -g vue-cli</code> 安装全局依赖时,默认使用 <code>npm i -g vue-cli</code></li><li><code>nr</code>：run</li><li><code>nx</code>：execute</li><li><code>nu</code>：upgrade</li><li><code>nci</code>：clean install</li><li><code>nrm</code>：remove</li></ul><p>ni 相关的命令，都可以在末尾追加<code>\\?</code>，表示只打印，不是真正执行。</p><p>假设项目目录下没有锁文件，默认就会让用户从 npm、yarn、pnpm 选择，然后执行相应的命令。</p><p>但如果在<code>~/.nirc</code>文件中，设置了全局默认的配置，则使用默认配置执行对应命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">;</span> ~/.nirc

<span class="token punctuation">;</span> fallback when no lock found
<span class="token assign-left variable">defaultAgent</span><span class="token operator">=</span>npm <span class="token comment"># default &quot;prompt&quot;</span>

<span class="token punctuation">;</span> <span class="token keyword">for</span> global installs
<span class="token assign-left variable">globalAgent</span><span class="token operator">=</span>npm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,63),m={href:"https://segmentfault.com/a/1190000040937835",target:"_blank",rel:"noopener noreferrer"};function v(b,h){const s=p("ExternalLinkIcon");return o(),c("div",null,[d,n("p",null,[a("npm 仓库地址："),n("a",r,[a("https://www.npmjs.com/"),e(s)])]),u,n("p",null,[n("a",m,[a("ni 教程"),e(s)])])])}const g=l(t,[["render",v],["__file","02_npm.html.vue"]]);export{g as default};
