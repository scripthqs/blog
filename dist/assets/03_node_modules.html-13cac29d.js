import{_ as n,o as e,c as s,f as a}from"./app-c6441670.js";const o={},t=a(`<h1 id="node-模块化" tabindex="-1"><a class="header-anchor" href="#node-模块化" aria-hidden="true">#</a> Node 模块化</h1><h2 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化" aria-hidden="true">#</a> 模块化</h2><p>NodeJs 基于 Commonjs 模块化开发的规范，<strong>它定义一个 JS 文件就称之为一个模块</strong></p><p>node 的模块类型：</p><ul><li>核心（内置）模块 - 安装 nodejs 自带的模块</li><li>第三方模块 - 需要手动通过(npm/yarn)来进行安装</li><li>自定义模块 - 开发者自己编写开发</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导出</span>
module<span class="token punctuation">.</span>exports <span class="token operator">/</span> exports<span class="token punctuation">;</span>
<span class="token comment">// 导入</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;module_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ES6</strong>标准发布后，<strong>module 成为标准</strong>，标准使用是以<strong>export 指令导出</strong>接口，以<strong>import 引入</strong>模块。</p><p><strong>但是在我们一贯的 node 模块</strong>中，我们依然采用的是<strong>CommonJS 规范</strong>，使用<strong>module.exports 导出</strong>接口，使用<strong>require 引入</strong>模块，</p><h2 id="模块化的好处" tabindex="-1"><a class="header-anchor" href="#模块化的好处" aria-hidden="true">#</a> 模块化的好处</h2><ol><li>防止命名冲突</li><li>高复用性</li><li>高维护性</li></ol><h2 id="如何使用-node-模块" tabindex="-1"><a class="header-anchor" href="#如何使用-node-模块" aria-hidden="true">#</a> 如何使用 node 模块</h2><ul><li>通过 require()函数引入外部的模块，传递一个文件的路径作为参数，node 将会自动根据该路径来引入外部模块</li><li>如果使用相对路径，必须以.或..开头</li><li>使用 require()引入模块后，该函数会返回一个对象，这个对象代表的是引入的模块</li><li>在 node 中，每一个文件中的 js 代码独立运行在一个函数中，一个模块中给的变量，其他模块不能直接访问</li><li>需要通过 exports 或者 module.exports 向外部暴露变量和方法，需要将暴露的变量和方法设置为 exports 的属性</li></ul><h2 id="exports-和-module-exports-的区别" tabindex="-1"><a class="header-anchor" href="#exports-和-module-exports-的区别" aria-hidden="true">#</a> exports 和 module.exports 的区别</h2><p><strong>require 方能看到的只有 module.exports 这个对象，它是看不到 exports 对象的，而我们在编写模块时用到的 exports 对象实际上只是对 module.exports 的引用。</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports <span class="token operator">===</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>通过 exports 只能使用.的方式来向外暴露内部变量</li><li>module.exports 既可以使用.的形式，也可以直接赋值</li></ul><h2 id="node-模块的分类" tabindex="-1"><a class="header-anchor" href="#node-模块的分类" aria-hidden="true">#</a> node 模块的分类</h2><p>模块分为三大类：</p><ul><li><strong>核心模块</strong>：由 node 引擎提供，核心模块的标识就是模块的名字</li><li><strong>文件模块</strong>：由用户自己创建的模块，文件模块的标识就是文件的路径，相对路径必须以.或..开头</li><li>自定义模块：开发者自己编写</li></ul>`,19),r=[t];function i(l,d){return e(),s("div",null,r)}const c=n(o,[["render",i],["__file","03_node_modules.html.vue"]]);export{c as default};
