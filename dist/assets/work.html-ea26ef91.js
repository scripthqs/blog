import{_ as e,o as t,c as p,a as s,b as n,e as o,f as a}from"./app-10c4e004.js";const i={},c=n("h1",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),o(" 总结")],-1),l=n("p",null,"CDN 边缘网络节点",-1),r=n("p",null,"css3 实现毛玻璃背景效果怎么实现? 3、Promise 的 then 方法为什么能链式调用? 4、async/ await 是怎么做到串行执行异步操作的? 5、https 比 http 安全在哪呢? 6、快速排序和冒泡排序的时间复杂度是多少? 7、vue 中 v-model 是语法糖，不用 v-mode 用什么可以替代? 8、vue 组件销毁时，所有自定义事件和原生事件都会跟着解绑吗？ 9、vue3 是怎么解决 vue2 的响应式缺陷的? 10、nexttick 是什么任务?为什么优先是微任务? 11、JavaScript 不同数据类型是怎么一个存储方式? 12、一个超长字符串能存在栈内存里面吗? 13、赋值、浅拷贝、深拷贝的区别? 14、webworker 开一个子线程，那怎么监听子线程挂了 15、webpack 的 style-loader 和 css-loader 的区别? 16、webpack 如何配置 typescript 的打包? 17、webpack 的三种 hash 值配置的区别? 18、如何计算白屏时间呢? 19、本地服务代理为什么能解决跨域问题?跨域问题的其他解决方法了解过吗? 20、vue 中二次封装时数据往下一层一层传递很麻烦，怎么才能一次性传下去? 21、vuex 是怎么做到将数据注入到每一个组件里的? 22、vite 很快，那他为什么快呢?有了解过吗? 23、axios 拦截器如何拦截请求错误或者响应错误 24、axios 这个库是如何区分浏览器环境和 node 环境的? 25、项目中哪些模块是你主导的?简单聊聊吧 26、你觉得搭建一个组件库需要注意哪些事? 27、有没有在项目中做过换肤的业务? 28、有没有在项目中做过国际化语言切换? 29、DOMContentLoaded 和 load 的区别? 30、强缓存和协商缓存的区别?",-1),d=a('<h2 id="_1-doctype-的作用" tabindex="-1"><a class="header-anchor" href="#_1-doctype-的作用" aria-hidden="true">#</a> 1.Doctype 的作用</h2><p>Doctype 是一种文档声明，目的是说明当前代码用的 HTML 的哪一种规范。<code>&lt;!DOCTYPE&gt;</code>声明必须是 HTML 文档的第一行，位于 html 标签之前。HTML5 只需要写 <code>&lt;!DOCTYPE HTML&gt;</code></p><h2 id="_2-行内元素和块级元素" tabindex="-1"><a class="header-anchor" href="#_2-行内元素和块级元素" aria-hidden="true">#</a> 2.行内元素和块级元素</h2><p>行内元素不独占一行，块级元素独占一行</p><p>行内元素：<code>span</code>、<code>a</code>、<code>input</code>、<code>img</code></p><p>块级元素：<code>div</code> 、<code>ul</code>、 <code>ol</code> 、<code>li</code>、 <code>h1~h6</code> 、<code>p</code> 、<code>table</code> 等</p><h2 id="_3-html-语义化的理解" tabindex="-1"><a class="header-anchor" href="#_3-html-语义化的理解" aria-hidden="true">#</a> 3.HTML 语义化的理解</h2><p><strong>HTML 的职责是描述一块内容是什么（或其意义），而不是它长什么样子；它的外观应该由 CSS 来决定。</strong></p><ul><li>能够便于开发者阅读和写出更优雅的代码。</li><li>同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容。</li><li>更好地搜索引擎优化（SEO）。</li></ul><h2 id="_4-浏览器内核" tabindex="-1"><a class="header-anchor" href="#_4-浏览器内核" aria-hidden="true">#</a> 4.浏览器内核</h2><p>浏览器分成两部分：<strong>渲染引擎（内核）和 JS 引擎</strong>。</p><p>渲染引擎主要负责取得网页的内容、整理讯息、计算网页的显示方式等，JS 引擎则是解析 <code>Javascript</code> 语言，执行 <code>javascript</code> 语言来实现网页的动态效果。</p><h2 id="_5-html5-有哪些新特性" tabindex="-1"><a class="header-anchor" href="#_5-html5-有哪些新特性" aria-hidden="true">#</a> 5.html5 有哪些新特性</h2><ul><li>语义化标签: <code>header``footer``nav``section``article``aside</code> 等</li><li>增强型表单：<code>date</code>(从一个日期选择器选择一个日期) <code>email</code>(包含 e-mail 地址的输入域) <code>number</code>(数值的输入域) <code>range</code>(一定范围内数字值的输入域) <code>search</code>(用于搜索域) <code>tel</code>(定义输入电话号码字段) 等</li><li>视频和音频：<code>audio``video</code></li><li><code>Canvas</code>绘图 <code>SVG</code>绘图</li><li>地理定位：<code>Geolocation</code></li><li>拖放 API：<code>drag</code></li><li><code>web worker</code>：是运行在后台的 <code>JavaScript</code>，独立于其他脚本，不会影响页面的性能</li><li><code>web storage</code>: <code>localStorage``sessionStorage</code></li><li><code>WebSocket</code>: <code>HTML5</code> 开始提供的一种在单个 <code>TCP</code> 连接上进行全双工通讯的协议</li></ul><h2 id="_6-web-存储" tabindex="-1"><a class="header-anchor" href="#_6-web-存储" aria-hidden="true">#</a> 6.Web 存储</h2><p>在网页中，会经常性在本地存储大量的数据，传统方式我们以<code>document.cookie</code>来进行存储，但是存储大小只有 4kb 左右，解析也非常复杂。</p><ol><li><p>Cookie 是浏览器访问服务器后，服务器传给浏览器的一段数据（通常是一段<strong>加密的字符串</strong>），并且默认情况下，只会在同源的 HTTP 请求中携带。（同源：同域名、同端口、同协议）</p></li><li><p>浏览器需要保存这段数据，不得轻易删除。</p></li><li><p>此后每次浏览器访问该服务器，都必须带上这段数据。</p></li></ol><p>Cookie 一般有两个作用:</p><ol><li><strong>识别用户身份</strong></li><li><strong>记录历史</strong></li></ol><p><strong>H5 有两种存储方式：</strong></p><ol><li><p><code>window.sessionStorage</code>：会话存储</p><ul><li>浏览器<strong>本地存储</strong>的一种方式，以<strong>键值对</strong>的形式的进行存储</li><li>保存在内存中</li><li>生命周期为关闭浏览器窗口，<strong>窗口关闭时浏览器销毁</strong></li><li>在同一个窗口下数据可以共享</li></ul></li><li><p><code>window.localStorage</code>：本地存储</p><ul><li>浏览器<strong>本地存储</strong>的一种方式，以<strong>键值对</strong>的形式的进行存储</li><li>有可能保存在浏览器内存里，也可能在硬盘中</li><li><strong>永久生效除非手动删除</strong></li><li>可以多串口共享</li></ul></li></ol><p>Web 存储的特性：</p><ol><li>设置、读取方便</li><li>容量较大，<code>sessionStorage</code>约 5M，<code>localStorage</code>约 20M</li><li>只能存储字符串，可以将对象 JSON.stringfy() 编码后存储</li></ol><p>cookie、sessionStorage、localStorage 的区别:</p><p>cookie 是浏览器访问服务器后，服务器返回的一段数据，通常是一段加密的字符串，并且只会在同源 HTTP 请求中携带，作用是识别用户的身份和记录历史，sessionStorage 是浏览器本地存储的一种方式，以键值对的形式进行存储，存储的数据会在浏览器窗口关闭后销毁，localStorage 也是浏览器本地存储的一种方式，以键值对的形式进行存储，不过它的数据一般都会一直存在，除非手动删除。</p><h2 id="_7-浏览器内多个标签页之间的通信" tabindex="-1"><a class="header-anchor" href="#_7-浏览器内多个标签页之间的通信" aria-hidden="true">#</a> 7.浏览器内多个标签页之间的通信</h2><ul><li>使用 <code>localStorage</code>: <code>localStorage.setItem(key,value)</code>、<code>localStorage.getItem(key)</code>，一个窗口更新 localStorage，另一个窗口监听 window 对象的&#39;storage&#39;事件，来实现通信</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 本窗口的设值代码</span>\nlocalStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 其他窗口监听storage事件</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;storage&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：两个页面要同源（URL 的协议、域名和端口相同）</p><ul><li><code>websocket</code>协议</li><li><code>webworker</code></li></ul><h2 id="_8-src-与-href-的区别" tabindex="-1"><a class="header-anchor" href="#_8-src-与-href-的区别" aria-hidden="true">#</a> 8.src 与 href 的区别</h2><p><code>src</code> 用于替代这个元素，而 <code>href</code> 用于建立这个标签与外部资源之间的关系</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>link href<span class="token operator">=</span><span class="token string">&quot;style.css&quot;</span> rel<span class="token operator">=</span><span class="token string">&quot;stylesheet&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器加载到这里的时候，<code>html</code> 的渲染和解析不会暂停，<code>css</code> 文件的加载是同时进行的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;script.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">&quot;&quot;</span> alt<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当浏览器解析到这句代码时，页面的加载和解析都会暂停直到浏览器拿到并执行完这个 js 文件</p><h2 id="_9-表单提交中-get-和-post-方式的区别" tabindex="-1"><a class="header-anchor" href="#_9-表单提交中-get-和-post-方式的区别" aria-hidden="true">#</a> 9.表单提交中 Get 和 Post 方式的区别</h2><ul><li><code>Get</code> 一般用于从服务器上获取数据，<code>Post</code> 向服务器传送数据</li><li><code>Get</code> 传输的数据是拼接在 Url 之后的，对用户是可见的；<code>Post</code> 的传输数据对用户是不可见的</li><li><code>Get</code> 传送的数据量较小，不能大于 <code>2KB</code>。<code>Post</code> 传送的数据量较大，一般被默认为不受限制</li><li><code>Get</code> 安全性非常低，<code>Post</code> 安全性较高</li><li>在 <code>FORM</code> 提交的时候，如果不指定 <code>Method</code>，则默认为 <code>Get</code> 请求</li></ul><h2 id="_10-script-标签中-defer-和-async-的区别" tabindex="-1"><a class="header-anchor" href="#_10-script-标签中-defer-和-async-的区别" aria-hidden="true">#</a> 10.script 标签中 defer 和 async 的区别</h2><p><strong>defer</strong> 延时、<strong>async</strong>异步</p><p>defer 和 async 属性都是去<strong>异步加载外部的 JS</strong>脚本文件，它们都不会阻塞页面的解析，区别：</p><ul><li>多个带 async 属性的标签，不能保证加载的顺序；</li><li>多个带 defer 属性的标签，按照加载顺序执行；</li></ul><h2 id="供应商和采购商" tabindex="-1"><a class="header-anchor" href="#供应商和采购商" aria-hidden="true">#</a> 供应商和采购商</h2><p>三种角色，采购商、供应商、二者都是。供应商可以买东西，采购商只能买东西。然后作为供应商时，可以去买东西，但是在管理系统中，发现该供应商没有采购商 id，导致接口报错。</p><h2 id="jenkins-的-ci-cd" tabindex="-1"><a class="header-anchor" href="#jenkins-的-ci-cd" aria-hidden="true">#</a> Jenkins 的 CI/CD</h2><h2 id="i18n-国际化" tabindex="-1"><a class="header-anchor" href="#i18n-国际化" aria-hidden="true">#</a> I18N 国际化</h2>',46),u=a(`<h2 id="display-none-和-visibility-hidden-的区别" tabindex="-1"><a class="header-anchor" href="#display-none-和-visibility-hidden-的区别" aria-hidden="true">#</a> display:none 和 visibility:hidden 的区别</h2><p>共同点：都可以使元素不可见</p><p>不同点：display:none 会让元素完全从渲染树中消失，不占据任何空间，visibility:hidden 不会让元素从渲染树中消失，占据空间，只是内容不可见。display:none 是非继承属性，visibility:hidden 是继承属性，子孙节点继承了 hidden 属性，可以设置 visibility:visible 让子孙节点显性。</p><h2 id="为什么要初始化-css-样式" tabindex="-1"><a class="header-anchor" href="#为什么要初始化-css-样式" aria-hidden="true">#</a> 为什么要初始化 CSS 样式</h2><p>主要原因是浏览器的兼容问题，不同浏览器对有些元素的默认样式是不同的，并且默认样式会影响项目的最终布局，如果没有对 CSS 进行初始化，那么有可能出现浏览器之间的页面显示差距。</p><h2 id="什么是-postcss" tabindex="-1"><a class="header-anchor" href="#什么是-postcss" aria-hidden="true">#</a> 什么是 PostCSS</h2><p>PostCSS 是一个平台，基于这个平台，可以使用一些插件来优化 css 代码，比如 autoprefixer 插件，它基于 postcss 使用，可以帮助我们为 css 增加不同的浏览器前缀</p><h2 id="css-选择器优先级" tabindex="-1"><a class="header-anchor" href="#css-选择器优先级" aria-hidden="true">#</a> css 选择器优先级</h2><p>元素选择器、类选择器、id 选择器、通用选择器、后代选择器</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token important">!important</span>&gt;行内样式&gt;id选择器&gt;类选择器&gt;标签选择器&gt;通配符&gt;继承
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选择器的优先级越高，就显示什么样式，行内样式 1000，id 选择器 0100，类选择器 0010，元素选择器 0001，通配选择器 0000。</p><h2 id="盒模型的理解" tabindex="-1"><a class="header-anchor" href="#盒模型的理解" aria-hidden="true">#</a> 盒模型的理解</h2><p>css3 有 2 种盒模型，标准盒模型和 IE 盒模型，盒模型都是由 margin、padding、border、content 组成。区别在于设置 width 和 height 时，所对应的范围不同，标准盒模型的 width 和 height 属性范围只包含 content，IE 盒模型的 width 和 height 包含了 content、padding、border。可以通过修改元素的 box-sizing 属性来元素的盒模型。</p><ul><li>box-sizing: content-box; 表示标准盒模型</li><li>box-sizing: border-box; 表示 IE 盒模型</li></ul><h2 id="精灵图-雪碧图" tabindex="-1"><a class="header-anchor" href="#精灵图-雪碧图" aria-hidden="true">#</a> 精灵图（雪碧图）</h2><p>精灵图将一个页面涉及的小图都包含到一张大图中，然后利用 css 的 background-image,background-repeat,background-position 属性进行背景定位。</p><ul><li>利用精灵图能够减少网页的 http 请求，从而提高页面的性能，能够减少图片的大小</li></ul><h2 id="水平垂直居中的实现" tabindex="-1"><a class="header-anchor" href="#水平垂直居中的实现" aria-hidden="true">#</a> 水平垂直居中的实现</h2><p>行内元素：文字和图片</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token property">line-height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>块级元素：元素的宽高确定</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.father</span> <span class="token punctuation">{</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> <span class="token comment">/*开启BFC，解决外边距重叠问题*/</span>
<span class="token punctuation">}</span>
<span class="token selector">.son</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>father.h-son.h<span class="token punctuation">)</span>/2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>块级元素：元素的宽高确定，使用定位，子绝父相</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.father</span><span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.son</span><span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -son.w/2<span class="token punctuation">,</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> -son.h/2
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>块级元素：宽高不定时</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.father</span><span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.son</span><span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 50%
  <span class="token property">top</span><span class="token punctuation">:</span> 50%
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span>-50%<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 flex 布局</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.father</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bfc" tabindex="-1"><a class="header-anchor" href="#bfc" aria-hidden="true">#</a> BFC</h2><p>BFC 是块级格式化环境，当元素开启 BFC 后，该区域会变成一个独立的布局区域。</p><ul><li>开启 BFC 的元素，不会被浮动元素覆盖</li><li>开启 BFC 的元素，子元素和父元素的外边距不会重叠</li><li>开启 BFC 的元素，可以包含浮动的子元素</li></ul><h3 id="如何开启-bfc" tabindex="-1"><a class="header-anchor" href="#如何开启-bfc" aria-hidden="true">#</a> 如何开启 BFC</h3><ul><li>设置浮动，会脱离文档流，不推荐</li><li>设置为行内块元素</li><li>将 overflow 设置为一个非 visible 的值</li></ul><h2 id="定位" tabindex="-1"><a class="header-anchor" href="#定位" aria-hidden="true">#</a> 定位</h2><p>相对定位不会脱离文档流，以自身为参照物，灵魂出窍。绝对定位会脱离文档流，参照物是包含块。</p><h3 id="包含块是离它最近那个开启定位的祖先元素-没有就是-html-根元素" tabindex="-1"><a class="header-anchor" href="#包含块是离它最近那个开启定位的祖先元素-没有就是-html-根元素" aria-hidden="true">#</a> 包含块是离它最近那个开启定位的祖先元素，没有就是 HTML 根元素</h3><p>固定定位是特殊的绝对定位，参照物是浏览器视口。粘滞定位是特殊的相对定位，参照物是浏览器视口。开启定位的元素可以是 z-index 来设置层级。</p><h2 id="css-画三角形" tabindex="-1"><a class="header-anchor" href="#css-画三角形" aria-hidden="true">#</a> css 画三角形</h2><p>主要是利用盒模型的 border 属性来设置的</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 50px solid red<span class="token punctuation">;</span>
  <span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
  <span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="vue-重点" tabindex="-1"><a class="header-anchor" href="#vue-重点" aria-hidden="true">#</a> Vue 重点</h1><h2 id="vue-的组件通信方法" tabindex="-1"><a class="header-anchor" href="#vue-的组件通信方法" aria-hidden="true">#</a> Vue 的组件通信方法</h2><h3 id="_1-props-emit" tabindex="-1"><a class="header-anchor" href="#_1-props-emit" aria-hidden="true">#</a> 1.props/$emit</h3><p><code>props/$emit</code>属性可以实现父子组件之间的通信，父组件可以通过<strong>自定义属性 props</strong>向子组件传递数据，子组件可以通过<strong>自定义事件$emit</strong>向父组件传递数据。</p><h3 id="_2-emit-on" tabindex="-1"><a class="header-anchor" href="#_2-emit-on" aria-hidden="true">#</a> 2.$emit/$on</h3><p>eventBus 事件总线<code>$emit/$on</code>适用于<strong>各种组件</strong>之间传递数据。步骤：</p><ol><li>新建 event-bus.js 模块文件，向外共享一个 Vue 实例对象</li><li>在数据的发送方，使用自定义事件，调用<strong>bus.$emit(&#39;事件名称&#39;,发送的数据)</strong></li><li>在数据的接收方，组测自定义事件，<strong>bus.$on(&#39;自定义事件名称&#39;,事件处理函数)</strong></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//eventBus.js</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//Left.vue,发送方</span>
<span class="token keyword">import</span> bus <span class="token keyword">from</span> <span class="token string">&#39;eventBus.js&#39;</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">send</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;share&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token comment">//Right.vue，接受方</span>
<span class="token keyword">import</span> bus <span class="token keyword">from</span> <span class="token string">&#39;eventBus.js&#39;</span>
<span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;share&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> val
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者将事件总线添加到 Vue 的原型。</p><p>1.在 Vue 的原型上添加一个$bus 的属性让其等于一个新的 Vue 实例</p><p>2.发射全局监听事件，和常规$emit 一样也可以传递参数</p><p>3.监听全局事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//在vue中的main.js文件中</span>
<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//或者</span>
<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

<span class="token comment">//数据发送方</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&quot;itemImageLoad&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//数据接收方</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&quot;itemImageLoad&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-ref-refs" tabindex="-1"><a class="header-anchor" href="#_3-ref-refs" aria-hidden="true">#</a> 3.ref/$refs</h3><p><code>ref/$refs</code>可以实现<strong>父子组件</strong>之间的通信。</p><p>ref 属性使用到组件上，就指向组件引用的实例，可以通过实例方法组件的属性和方法。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 子组件 data(){ return { message: &#39;hello&#39; } }, methods:{ fun(){ console.log(&#39;world&#39;) } } // 父组件
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Son</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Son</span><span class="token punctuation">&gt;</span></span>
mounted(){ console.log(this.$refs.child.message)//hello this.$refs.child.fun()//world }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-parent-children" tabindex="-1"><a class="header-anchor" href="#_4-parent-children" aria-hidden="true">#</a> 4.$parent/$children</h3><p>使用<code>$parent</code>可以让组件访问父组件的实例，使用<code>$children</code>可以让组件访问子组件的实例。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>//在子组件中，$parent是一个对象 this.$parent.msg //在父组件中,$children是一个数组 this.$children[0].msg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-attrs-listeners" tabindex="-1"><a class="header-anchor" href="#_5-attrs-listeners" aria-hidden="true">#</a> 5.$attrs/$listeners</h3><p><code>$attrs和$listeners</code>使用于<strong>父子、隔代组件之间的通信</strong>。<code>$attrs</code>属性继承了父组件的所有属性（除了 props 传递的属性,class,style），<code>$listeners</code>是一个对象，包含了父组件的各种事件方法。可以使用<code>v-bind=&#39;$attr&#39;</code>继续向子组件中传递属性。</p><h3 id="_6-provide-inject" tabindex="-1"><a class="header-anchor" href="#_6-provide-inject" aria-hidden="true">#</a> 6.provide/inject</h3><p>依赖注入<code>provide/inject</code>可以用于<strong>父子、隔代组件的通信</strong>。provide 和 inject 是 Vue 的钩子函数，provide 用来发送数据，inject 使用接收数据。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>//在父组件中，provide书写方式和data一样 provide(){ return { msg: &#39;hello&#39; } } //在子组件中 inject:[&#39;msg&#39;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：provide 提供的属性有点像一个全局的变量，有可能造成变量的污染，而且依赖注入提供的属性是<strong>非响应式</strong>的。</p><h3 id="_7-vuex" tabindex="-1"><a class="header-anchor" href="#_7-vuex" aria-hidden="true">#</a> 7.vuex</h3><p>当数据比较复杂时，可以使用 vuex，将一些公共的数据抽离出来，作为全局变量进行管理，其他组件可以对这个公共数据进行读写操作。</p><h3 id="_8-离线存储" tabindex="-1"><a class="header-anchor" href="#_8-离线存储" aria-hidden="true">#</a> 8.离线存储</h3><p>可以使用浏览器的离线存储机制</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>//组件a created(){ localStorage.setItem(&#39;data&#39;,&#39;a数据&#39;) } //组件b created(){ console.log(localStorage.getItem(&#39;data&#39;)) }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="vue-的生命周期" tabindex="-1"><a class="header-anchor" href="#vue-的生命周期" aria-hidden="true">#</a> Vue 的生命周期</h2><h3 id="vue-的生命周期函数" tabindex="-1"><a class="header-anchor" href="#vue-的生命周期函数" aria-hidden="true">#</a> Vue 的生命周期函数</h3><p>Vue 实例有一个完整的生命周期，主要分为 3 个阶段，创建、运行和销毁。</p><p>1.创建阶段</p><ul><li><p>beforeCreate 创建前，<strong>data/methods</strong>属性都处于<strong>不可用</strong>状态</p></li><li><p>created 创建后，data/methods 属性可用，但是组件的模板并未生产，不能访问<code>$el</code>属性，<strong>不能操作 DOM</strong>，可以发送 ajax 请求</p></li><li><p>beforeMount 挂载前，将要把编译好的模板渲染到浏览器中，此时浏览器器中还没有 DOM 结构，<strong>不能操作 DOM</strong></p></li><li><p>mounted 挂载后，浏览器有当前组件的 DOM 结构，<strong>可以操作 DOM</strong></p><p>2.运行阶段</p></li><li><p>beforeUpdate 更新前，将要根据最新的属性重新渲染模板，<strong>data 数据最新的，DOM 结构是旧的</strong></p></li><li><p>updated 更新后，已经根据最新的数据重新渲染了模板，<strong>data 数据是最新的，DOM 结构也是最新的</strong></p><p>3.销毁阶段</p></li><li><p>beforeDestroy 销毁前，将要销毁组件，<strong>组件还处于正常工作状态</strong></p></li><li><p>destroyed 销毁后，<strong>DOM 结构已经完全移除</strong></p></li></ul><h3 id="哪个生命周期请求异步数据" tabindex="-1"><a class="header-anchor" href="#哪个生命周期请求异步数据" aria-hidden="true">#</a> 哪个生命周期请求异步数据</h3><p>可以在 created,beforeMount,mounted 钩子函数中请求 ajax 等异步数据，一般都在 created 中请求数据。</p><h3 id="keep-alive-的生命周期" tabindex="-1"><a class="header-anchor" href="#keep-alive-的生命周期" aria-hidden="true">#</a> keep-alive 的生命周期</h3><p>keep-alive 可以将组件进行缓存，而不是销毁组件，此时组件会多两个生命周期，activated 和 deactivated</p><ul><li>当组件被缓存时，会触发 deactivated 生命周期函数</li><li>当组件被激活时，会触发 activated 生命周期函数</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>deactivated(){ console.log(&#39;组件被缓存&#39;) } activated(){ console.log(&#39;组件被激活&#39;) }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="vue-其他问题" tabindex="-1"><a class="header-anchor" href="#vue-其他问题" aria-hidden="true">#</a> Vue 其他问题</h2><h3 id="v-if-和-v-show" tabindex="-1"><a class="header-anchor" href="#v-if-和-v-show" aria-hidden="true">#</a> v-if 和 v-show</h3><p>v-if 和 v-show 都可以控制元素的显示和隐藏。</p><ul><li>v-if 是真正的条件渲染，在显示隐藏过程中有 DOM 的添加和删除</li><li>v-show 只是切换 css，相当于设置 display 属性</li></ul><p>如何需要非常频繁的切换，可以考虑使用 v-show</p><h3 id="nexttick-的作用" tabindex="-1"><a class="header-anchor" href="#nexttick-的作用" aria-hidden="true">#</a> $nextTick 的作用</h3><p><code>$nextTick</code>将回调函数推迟到下一次 DOM 更新后执行，在 created 生命周期函数中，需要进行 DOM 操作，就一定要放在 nextTick 函数中。</p><h3 id="computed-和-watch" tabindex="-1"><a class="header-anchor" href="#computed-和-watch" aria-hidden="true">#</a> computed 和 watch</h3><ul><li>computed 是计算属性，依赖于其他属性计算而来的，有缓存机制</li><li>watch 是监听其他属性的变化，支持异步，不支持缓存</li></ul><h1 id="vue-router-重点" tabindex="-1"><a class="header-anchor" href="#vue-router-重点" aria-hidden="true">#</a> Vue-router 重点</h1><h2 id="vue-router-的懒加载" tabindex="-1"><a class="header-anchor" href="#vue-router-的懒加载" aria-hidden="true">#</a> Vue-router 的懒加载</h2><p>当路由被加载时才访问对应的组件</p><ul><li>使用箭头函数+import 的方式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> list <span class="token keyword">from</span> <span class="token string">&quot;@/components/list.vue&quot;</span><span class="token punctuation">;</span> <span class="token comment">//非懒加载</span>
<span class="token keyword">const</span> <span class="token function-variable function">list</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@/components/list.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//懒加载</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> list <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路由的-hash-模式和-history-模式" tabindex="-1"><a class="header-anchor" href="#路由的-hash-模式和-history-模式" aria-hidden="true">#</a> 路由的 hash 模式和 history 模式</h2><ul><li>默认是 hash 模式，浏览器地址栏的 URL 会带一个<code>#</code>，兼容性更好</li><li>history 模式需要后台支持，没有支持就会访问 404</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;history&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="获取页面的-hash-模式" tabindex="-1"><a class="header-anchor" href="#获取页面的-hash-模式" aria-hidden="true">#</a> 获取页面的 hash 模式</h2><ul><li>监听$route 参数对象的变化</li><li>window.location.hash 读取#值</li></ul><h2 id="route和-router" tabindex="-1"><a class="header-anchor" href="#route和-router" aria-hidden="true">#</a> $route和$router</h2><ul><li>$route 是参数对象，包含了 path,params,hash,query 等路由参数信息</li><li>$router 是路由实例对象，包含了路由跳转的方法，push,go,back,beforeEach 导航守卫</li></ul><h2 id="动态路由" tabindex="-1"><a class="header-anchor" href="#动态路由" aria-hidden="true">#</a> 动态路由</h2><p>路径/后面是路径参数 params，?后面是查询参数 query</p><p>使用英文:的方法实现动态路由</p><h2 id="路由导航" tabindex="-1"><a class="header-anchor" href="#路由导航" aria-hidden="true">#</a> 路由导航</h2><p>全局前置守卫，beforeEach 参数是回调函数，可以根据 token 判断是否登录跳转</p><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><ul><li>多环境 public 文件夹 window 变量</li><li>后端数字类型 id</li><li>ai 自动翻译</li><li>菜单级联勾选，</li></ul><h3 id="组件库改造" tabindex="-1"><a class="header-anchor" href="#组件库改造" aria-hidden="true">#</a> 组件库改造</h3><p>虚拟滚动：scrollTop+clientHeight &gt;=scrollHeight paddingTop paddingBottom</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
span<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;class&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;numContainer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.mySelect&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// 这里的两个2可以自定义，如果需要实现超过三个选项省略则改为3，以此类推</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      span<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;flex&#39;</span><span class="token punctuation">;</span>
      span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">+</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      span<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>

<span class="token punctuation">.</span>mySelect <span class="token punctuation">{</span>
    <span class="token operator">:</span><span class="token operator">:</span>v<span class="token operator">-</span>deep <span class="token punctuation">.</span>el<span class="token operator">-</span>tag <span class="token punctuation">{</span>
        <span class="token comment">// 这里的n + 3中的3，是你需要显示的数量+1，比如我需要实现超过两个选项隐藏，这里就是2 + 1</span>
        <span class="token operator">&amp;</span><span class="token operator">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token parameter">n <span class="token operator">+</span> <span class="token number">3</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">display</span><span class="token operator">:</span> none<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token operator">:</span><span class="token operator">:</span>v<span class="token operator">-</span>deep <span class="token punctuation">.</span>el<span class="token operator">-</span>select__tags <span class="token punctuation">{</span>
        white<span class="token operator">-</span>space<span class="token operator">:</span> nowrap<span class="token punctuation">;</span>
        <span class="token literal-property property">overflow</span><span class="token operator">:</span> hidden<span class="token punctuation">;</span>
        flex<span class="token operator">-</span>flow<span class="token operator">:</span> nowrap<span class="token punctuation">;</span>
        <span class="token literal-property property">display</span><span class="token operator">:</span> flex<span class="token punctuation">;</span>
        flex<span class="token operator">-</span>wrap<span class="token operator">:</span> nowrap<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">:</span><span class="token operator">:</span>v<span class="token operator">-</span>deep <span class="token punctuation">.</span>el<span class="token operator">-</span>select__tags<span class="token operator">-</span>text <span class="token punctuation">{</span>
        <span class="token literal-property property">display</span><span class="token operator">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span>
        max<span class="token operator">-</span>width<span class="token operator">:</span> 44px<span class="token punctuation">;</span> <span class="token comment">// 根据select下拉框宽度设定，我这里宽度下拉框是 180左右 超出两个隐藏就设为44px了</span>
        white<span class="token operator">-</span>space<span class="token operator">:</span> nowrap<span class="token punctuation">;</span>
        <span class="token literal-property property">overflow</span><span class="token operator">:</span> hidden<span class="token punctuation">;</span>
        flex<span class="token operator">-</span>flow<span class="token operator">:</span> nowrap<span class="token punctuation">;</span>
        vertical<span class="token operator">-</span>align<span class="token operator">:</span> bottom<span class="token punctuation">;</span>
        text<span class="token operator">-</span>overflow<span class="token operator">:</span> ellipsis<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">:</span><span class="token operator">:</span>v<span class="token operator">-</span>deep<span class="token punctuation">.</span>numContainer <span class="token punctuation">{</span>
        <span class="token literal-property property">position</span><span class="token operator">:</span> absolute<span class="token punctuation">;</span>
        <span class="token literal-property property">top</span><span class="token operator">:</span> 4px<span class="token punctuation">;</span>
        <span class="token literal-property property">right</span><span class="token operator">:</span> 35px<span class="token punctuation">;</span>
        text<span class="token operator">-</span>rendering<span class="token operator">:</span> optimizeLegibility<span class="token punctuation">;</span>
        font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>
        border<span class="token operator">-</span>width<span class="token operator">:</span> 1px<span class="token punctuation">;</span>
        border<span class="token operator">-</span>style<span class="token operator">:</span> solid<span class="token punctuation">;</span>
        border<span class="token operator">-</span>radius<span class="token operator">:</span> 4px<span class="token punctuation">;</span>
        white<span class="token operator">-</span>space<span class="token operator">:</span> nowrap<span class="token punctuation">;</span>
        <span class="token literal-property property">height</span><span class="token operator">:</span> 20px<span class="token punctuation">;</span>
        <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">0</span> 5px<span class="token punctuation">;</span>
        line<span class="token operator">-</span>height<span class="token operator">:</span> 19px<span class="token punctuation">;</span>
        box<span class="token operator">-</span>sizing<span class="token operator">:</span> border<span class="token operator">-</span>box<span class="token punctuation">;</span>
        <span class="token literal-property property">margin</span><span class="token operator">:</span> 2px <span class="token number">0</span> 2px 6px<span class="token punctuation">;</span>
        <span class="token literal-property property">display</span><span class="token operator">:</span> none<span class="token punctuation">;</span>
        align<span class="token operator">-</span>items<span class="token operator">:</span> center<span class="token punctuation">;</span>
        background<span class="token operator">-</span>color<span class="token operator">:</span> #f4f4f5<span class="token punctuation">;</span>
        border<span class="token operator">-</span>color<span class="token operator">:</span> #e9e9eb<span class="token punctuation">;</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">909399</span><span class="token punctuation">;</span>
        z<span class="token operator">-</span>index<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,113);function k(v,h){return t(),p("div",null,[c,l,r,s(" # HTML 总结 "),d,s(" # CSS 总结 "),u])}const b=e(i,[["render",k],["__file","work.html.vue"]]);export{b as default};
