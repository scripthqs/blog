import{_ as a,o as n,c as s,f as e}from"./app-10c4e004.js";const t={},p=e(`<h1 id="数据类型转换" tabindex="-1"><a class="header-anchor" href="#数据类型转换" aria-hidden="true">#</a> 数据类型转换</h1><p>使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。</p><p><strong>通常会实现 3 种方式的转换</strong>：</p><ul><li>转换成字符串类型 String</li><li>转换成数字型 Number</li><li>转换成布尔型 Boolean</li></ul><p><strong>转换的方式有 2 种</strong>：</p><ul><li>强制的类型转换</li><li>隐式类型转换</li></ul><p>在谷歌浏览器控制台中，不同的数据类型颜色不一样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数字型是蓝色</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;18&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//字符串黑色</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//布尔是深蓝</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//字符串黑色</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 浅灰</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//浅灰</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="string-类型转换" tabindex="-1"><a class="header-anchor" href="#string-类型转换" aria-hidden="true">#</a> String 类型转换</h2><h3 id="tostring-方法" tabindex="-1"><a class="header-anchor" href="#tostring-方法" aria-hidden="true">#</a> toString()方法</h3><p>调用被转换数据类型的 toString()方法。</p><ul><li>该方法不会影响原变量，它会将转换的结果返回</li><li>调用 xxx 的 yyy 方法，就是 xxx.yyy</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：null 和 undefined 两者值没有 toString()方法。</p><h3 id="string-函数" tabindex="-1"><a class="header-anchor" href="#string-函数" aria-hidden="true">#</a> String()函数</h3><p>调用 String()函数，并将转换的数据作为参数传递给函数。</p><ul><li>调用 xxx 函数，就是 xxx();</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 String()函数做强制转换时，对于 Number 和 Boolean 实际上就是调用的 toString()方法，对于 Null 和 Undefined 则是直接转换成&quot;Null&quot;和&quot;Undefined&quot;</p><h3 id="隐式转换之-拼接" tabindex="-1"><a class="header-anchor" href="#隐式转换之-拼接" aria-hidden="true">#</a> 隐式转换之’+‘拼接</h3><p>任意数据类型和 String<code>+</code>时，结果会变成字符串拼接。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>加上一个空字符串<code>&#39;&#39;</code>，即可将 a 转换成字符串，这个方法等价于<code>var a = String(a);</code></p><h2 id="number-类型转换" tabindex="-1"><a class="header-anchor" href="#number-类型转换" aria-hidden="true">#</a> Number 类型转换</h2><h3 id="number-函数" tabindex="-1"><a class="header-anchor" href="#number-函数" aria-hidden="true">#</a> Number()函数</h3><p>调用 Number()函数，并将转换的数据作为参数传递给函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>纯数字字符串转换成数字</li><li>含有非数字内容转换成 NaN</li><li>空串和全空格转换成 0</li><li>布尔值 true 转换成 1，false 转换成 0</li><li>null 转换成 0，undefined 转换成 NaN</li></ul><h3 id="parseint-函数" tabindex="-1"><a class="header-anchor" href="#parseint-函数" aria-hidden="true">#</a> parseInt()函数</h3><p>parseInt()将一个字符串转换成整数，专门处理字符串。</p><ul><li>可以将一个字符串的有效整数取出来</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>120px<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parsefloat-函数" tabindex="-1"><a class="header-anchor" href="#parsefloat-函数" aria-hidden="true">#</a> parseFloat()函数</h3><p>parseFloat()将一个字符串中转换成小数</p><ul><li>可以将一个字符串的有效小数取出来，专门处理字符串</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token number">1.234</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1.234</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;1.234px&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1.234</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>parseInt()和 parseFloat()会将非字符串会先转换字符串再操作</li></ul><h3 id="隐式转换之" tabindex="-1"><a class="header-anchor" href="#隐式转换之" aria-hidden="true">#</a> 隐式转换之‘- * /’</h3><p>任意数据类型和 Number<code>-</code> 、<code>*</code>、<code>/</code>都会转换成 Number。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> b <span class="token operator">=</span> b <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> b <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> b <span class="token operator">/</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更简单的写法，将其他类型转成 Number 类型，主要是将字符串数字转成数字。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token operator">+</span>b<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="boolean-类型转换" tabindex="-1"><a class="header-anchor" href="#boolean-类型转换" aria-hidden="true">#</a> Boolean 类型转换</h2><h3 id="boolean-函数" tabindex="-1"><a class="header-anchor" href="#boolean-函数" aria-hidden="true">#</a> Boolean()函数</h3><p>使用 Boolean()函数，并将转换的数据类型作为参数传递给函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Number 类型中，除了 0 和 NaN，其余的都是 true</li><li>String 中，除了空串<code>&#39;&#39;</code>，其余的都是 true</li><li>null 和 undefined 都会转换成 false</li><li>对象也会转换成 true</li></ul><h3 id="隐式转换之-运算" tabindex="-1"><a class="header-anchor" href="#隐式转换之-运算" aria-hidden="true">#</a> 隐式转换之&#39;!&#39;运算</h3><p>任意数据类型做两次非运算即可转换成 Boolean</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>c<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下几个值转换成布尔值时为 false，其他都是 true</p><ul><li>undefined</li><li>null</li><li>false</li><li>0</li><li>NaN</li><li>&quot;&quot;或&#39;&#39; 空字符串</li></ul><p>注意：空数组（[]）和空对象（{}）对应的布尔值，都是 true。</p>`,53),o=[p];function l(i,c){return n(),s("div",null,o)}const u=a(t,[["render",l],["__file","05_js_to.html.vue"]]);export{u as default};
