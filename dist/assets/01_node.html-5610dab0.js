import{_ as o,r as i,o as t,c as p,b as n,e,d as a,f as l}from"./app-f4e03468.js";const r={},d=n("h1",{id:"nodejs-简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nodejs-简介","aria-hidden":"true"},"#"),e(" NodeJS 简介")],-1),c=n("p",null,"相关网址：",-1),u={href:"https://nodejs.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"},v={href:"http://nodejs.cn/",target:"_blank",rel:"noopener noreferrer"},h=l('<p>Node.js 是一个开源与跨平台的<code>JavaScript</code>运行时环境。它是在浏览器外运行，它是一个事件驱动异步 I/O 单进程的<strong>服务端</strong>JS 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript 的速度非常快，性能非常好。它使用新的 ECMAScript 标准，不必等待所有用户更新其浏览器，可以通过更改其版本来决定要使用新的标准特性。</p><p>js 运行环境</p><ul><li>浏览器：最常见的环境</li><li>服务器环境: Node 项目就是服务器环境</li></ul><p>注意：</p><ul><li>浏览器是 JS 的前端运行环境。</li><li>Node.js 是 JS 的后端运行环境，在后端中运行无法调用 <strong>DOM 和 BOM 等浏览器内置 API。</strong></li><li>nodejs 调用服务查看服务器相关基础 node 环境</li><li>在 Node.js 中可以进行一些额外的操作，比如文件系统读/写、网络 IO、加密、压缩解压文件等操作</li></ul><p>浏览器环境提供的额外 API 可以分成三大类：</p><ul><li>浏览器控制类：操作浏览器</li><li>DOM 类 API：操作网页的各种元素</li><li>Web 类：实现互联网的各种功能</li></ul><p>服务器环境主要提供操作系统的 API，包括</p><ul><li>文件操作 API</li><li>网络通信 API</li></ul><h2 id="node-js-运行环境的核心" tabindex="-1"><a class="header-anchor" href="#node-js-运行环境的核心" aria-hidden="true">#</a> Node.js 运行环境的核心</h2><p>Node.js 运行环境的核心是 V8 引擎和 libuv 库。</p><ul><li>V8 引擎：编译和执行 JS 代码、管理内存、垃圾回收。V8 给 JS 提供了运行环境，可以说是 JS 的虚拟机。</li><li>libuv：是一个专注于异步 I/O 的跨平台类库，目前主要在 Node.js 上使用。提供事件循环、文件系统读写、网络 IO、线程池等等内容</li></ul><p>V8 的内存限制：在一般的后端开发语言中，在基本的内存使用上没有什么限制，然而在 Node 中通过 JavaScript 使用内存时就会发现只能使用部分内存（64 位系统下约为 1.4GB，32 位系统下约为 0.7GB）。在这样的限制下，将会导致 Node 无法直接操作大内存对象。</p><h2 id="nodejs-应用场景" tabindex="-1"><a class="header-anchor" href="#nodejs-应用场景" aria-hidden="true">#</a> NodeJS 应用场景</h2><ol><li>目前前端开发的库都是以 node 包的形式进行管理</li><li>npm、yarn、pnpm 工具成为前端开发使用最多的工具</li><li>使用 Node.js 作为 web 服务器开发、中间件、代理服务</li><li>借助 Node.js 完成前后端渲染的同构应用</li><li>为项目编写脚本工具，用 js 编写脚本</li><li>在使用 Electron 来开发桌面应用程序</li></ol><p>具体的讲：</p><p>BFF 中间层</p><ul><li>服务于前端的后端（Backend For Frontend）</li><li>让前端有能力自由组装后台数据</li><li>前端开发者能够自主决定与后台的通讯方式</li><li>安全性更高（不会把主服务器暴露在外面）、降低主服务器的复杂度</li></ul><p>服务端渲染</p><ul><li>SSR / Server Side Render</li><li>服务器返回的不是接口数据，而是一整个页面（或整个楼层）的 HTML 字符串，浏览器直接显示即可</li><li>在服务器端直接就渲染好了，然后一次性打包返回给前端。</li><li>优点是有利于 SEO、首屏渲染很快</li></ul><p>做小型服务、小型网站的后端（基于 Express、Koa 框架）</p><ul><li>有些公司的后台管理系统，是用 Node.js 来开发接口</li><li>后台管理系统对性能和并发的要求不是太高</li></ul><p>做项目构建工具</p><ul><li>前端正在广泛使用的构建工具 gulp、Webpack，就是基于 Node.js 来实现的</li></ul><p>做 PC 端的软件（基于 Electron 框架）</p><ul><li>Electron 是 Node.js 在 PC 客户端的技术。</li><li>代码编辑器 VSCode 软件，就是用 JS 语言实现的。</li></ul><p>简单概括：</p><ul><li>创建应用服务</li><li>web 开发（后端）</li><li>接口开发（小程序）</li><li>客户端应用工具 gulp、webpack、vue 脚手架、react 脚手架、小程序</li></ul><h2 id="nodejs-安装" tabindex="-1"><a class="header-anchor" href="#nodejs-安装" aria-hidden="true">#</a> NodeJS 安装</h2><p>nodejs 环境安装非常便捷，直接可通过官网地址，下载对应的安装软件包即可安装使用。</p>',30),m=n("code",null,"尽量下载长期支持版本(LTS，有些软件是Release)",-1),k={href:"https://github.com/coreybutler/nvm-windows/releases",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"nvm 可以让你的电脑中有 N 多个 node 版本。",-1),j=n("p",null,"node8 A 项目 B 项目 node9 C 项目 node10",-1),g=l(`<h3 id="通过-node-js-安装包-不推荐" tabindex="-1"><a class="header-anchor" href="#通过-node-js-安装包-不推荐" aria-hidden="true">#</a> 通过 Node.js 安装包（不推荐）</h3><ul><li>注意一定要选择偶数版本，因为奇数版不稳定。</li><li>如果需要选择其他的版本，重新下载新的安装包，覆盖安装。</li><li>覆盖旧版本后，以前版本安装的全局工具包，要重新安装。</li><li>无法在多个版本之间切换</li></ul><h3 id="通过-nvm-安装-推荐" tabindex="-1"><a class="header-anchor" href="#通过-nvm-安装-推荐" aria-hidden="true">#</a> 通过 NVM 安装（推荐）</h3><p>github 地址：<code>https://github.com/coreybutler/nvm-windows/releases</code></p><ul><li>NVM：node.js version manager，用来管理 node 的版本。</li><li>先在 github 上安装 NVM，然后通过 NVM 安装 Node.js。 <ul><li>nvm-noinstall.zip：绿色免安装版，但使用时需进行配置。</li><li>nvm-setup.zip：安装版，推荐使用</li></ul></li><li>安装时，选择 NVM 和 Node.js 快捷方式的安装路径</li><li>打开 CMD 命令行，输入<code>nvm</code>可以看到里面列出了各种命令</li><li><code>nvm -v</code>，查看已安装的 nvm 版本。</li><li><code>nvm ls</code>查看本地安装的 node 所有版本</li><li><code>node -v</code>，查看正在使用的 node 版本。</li></ul><p>安装 Node.js</p><ul><li><code>nvm install 14.16.1</code>安装，命令中的版本号可自定义</li><li><code>nvm use 14.16.1</code>使用特定版本</li><li><code>nvm uninstall 14.16.1</code>卸载指定版本</li><li><code>nvm install latest</code> 安装最新的 node 版本</li></ul><p>如果 Node 安装失败，可以在安装路径中找到的 settings.txt 文件中，新增如下两行，修改镜像源：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">node_mirror</span><span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span>mirrors<span class="token operator">/</span>node<span class="token operator">/</span>
<span class="token literal-property property">npm_mirror</span><span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span>mirrors<span class="token operator">/</span>npm<span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nvm version
nvm <span class="token parameter variable">-v</span>
nvm list
nvm <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="执行-node-程序" tabindex="-1"><a class="header-anchor" href="#执行-node-程序" aria-hidden="true">#</a> 执行 node 程序</h2><p>正常情况下执行一个 node 程序，直接跟上我们对应的文件即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 简单执行index.js</span>
node index<span class="token punctuation">.</span>js
<span class="token comment">// 执行 index.js 并传递参数</span>
node index<span class="token punctuation">.</span>js env<span class="token operator">=</span>development abcd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传递的 node 的参数在 process 的内置对象中，其中的 argv 属性，是一个数组，里面包含了我们需要的参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// node ./webpack.config.js env=development abcd</span>
<span class="token keyword">const</span> arg1 <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arg2 <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function _(N,f){const s=i("ExternalLinkIcon");return t(),p("div",null,[d,c,n("ul",null,[n("li",null,[n("a",u,[e("https://nodejs.org/zh-cn/"),a(s)])]),n("li",null,[n("a",v,[e("http://nodejs.cn/"),a(s)])])]),h,n("blockquote",null,[n("p",null,[e("注："),m,e("，如果在工作中有多个 node 环境的切换，可以安装 node 环境管理工具 NVM："),n("a",k,[e("https://github.com/coreybutler/nvm-windows/releases"),a(s)])]),b,j]),g])}const S=o(r,[["render",_],["__file","01_node.html.vue"]]);export{S as default};
