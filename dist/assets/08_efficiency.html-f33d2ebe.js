import{_ as n,o as a,c as s,f as e}from"./app-f4e03468.js";const p={},t=e(`<h1 id="时间复杂度和空间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度和空间复杂度" aria-hidden="true">#</a> 时间复杂度和空间复杂度</h1><p>算法是用来操作数据结构的方法，可能不同的算法得到的结果是一样的，但是消耗的资源和时间可能会有很大的差别。主要体现在两个方面：</p><ol><li>时间纬度：执行当前算法所消耗的时间，用时间复杂度描述</li><li>空间纬度：执行当前算法需要占用多少内存，用空间复杂度来描述</li></ol><p>一个算法的效率主要就是通过时间复杂度和空间复杂度来评判。</p><h2 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度</h2><p>由于机器的性能不同，数据的规模不同，所以相同的程序运行时间可能并不一样，所有需要一种通用的方法来表示，这就是大 O 符号表示法。</p><p>在大 O 符号表示法中，时间复杂度的公式是： <code>T(n) = O(f(n))</code>，其中 f(n) 表示每行代码执行次数之和，而 O 表示正比例关系，这个公式的全称是：算法的渐进时间复杂度。常见的时间复杂度：</p><ul><li>常数阶 O(1)</li><li>对数阶 O(logN)</li><li>线性阶 O(n)</li><li>线性对数阶 O(nlogN)</li><li>平方阶 O(n²)</li><li>立方阶 O(n³)</li><li>k 次方阶 O(n^k)</li><li>指数阶 O(2^n)</li></ul><p>从上至下依次的时间复杂度越大，执行的效率越低。</p><h3 id="常数阶-o-1" tabindex="-1"><a class="header-anchor" href="#常数阶-o-1" aria-hidden="true">#</a> 常数阶 O(1)</h3><p>只要没有循环等复杂结构，那么无论代码执行了多少行，那么这个代码的时间复杂度就是 O(1)。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token operator">++</span>j<span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token comment">//有一万个i++和++j</span>
<span class="token keyword">let</span> k <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>
<span class="token comment">//上述代码执行时，消耗的时间并不随i或者j的增大而变长，所以时间复杂度为O(1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线性阶-o-n" tabindex="-1"><a class="header-anchor" href="#线性阶-o-n" aria-hidden="true">#</a> 线性阶 O(n)</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> i<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>
  j<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码循环执行 n 次，消耗的时间随着 n 的线性增加而线性增长，因此用 O(n) 表示它的时间复杂度。</p><h3 id="对数阶-o-logn" tabindex="-1"><a class="header-anchor" href="#对数阶-o-logn" aria-hidden="true">#</a> 对数阶 O(logN)</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  i <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 while 循环中，每次都将 i 乘以 2，i 会距离 n 越来越近。假设循环 x 次后，循环就退出，就是 2^x = n，x = log2^n，此时，时间复杂度就为：O(logN)</p><h3 id="线性对数阶-o-nlogn" tabindex="-1"><a class="header-anchor" href="#线性对数阶-o-nlogn" aria-hidden="true">#</a> 线性对数阶 O(nlogN)</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    i <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>线性对数就是将时间复杂度为 O(logN)的代码执行 n 次，即 <code>n * O(logN) = O(nlogN)</code>，</p><h3 id="平方阶-o-n2" tabindex="-1"><a class="header-anchor" href="#平方阶-o-n2" aria-hidden="true">#</a> 平方阶 O(n²)</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    k<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>平方阶 O(n²)就是将线性阶 O(n)再嵌套一次</p><h2 id="空间复杂度" tabindex="-1"><a class="header-anchor" href="#空间复杂度" aria-hidden="true">#</a> 空间复杂度</h2><p>时间复杂度不是用来计算程序的具体耗时，空间复杂度也不是用来计算实际占用空间的。常见的空间复杂度有：O(1),O(n),O(n²)。</p><h3 id="空间复杂度-o-1" tabindex="-1"><a class="header-anchor" href="#空间复杂度-o-1" aria-hidden="true">#</a> 空间复杂度 O(1)</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
i<span class="token operator">++</span><span class="token punctuation">;</span>
j<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> k <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>算法执行的空间不随着变量 n 的大小变化，所有空间复杂度 S(n) = O(1)</p><h3 id="空间复杂度-o-n" tabindex="-1"><a class="header-anchor" href="#空间复杂度-o-n" aria-hidden="true">#</a> 空间复杂度 O(n)</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建了一个 n 长度的数组，此时代码的空间复杂度就为 O(n)。</p><h3 id="空间复杂度-o-n2" tabindex="-1"><a class="header-anchor" href="#空间复杂度-o-n2" aria-hidden="true">#</a> 空间复杂度 O(n²)</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),o=[t];function i(l,c){return a(),s("div",null,o)}const u=n(p,[["render",i],["__file","08_efficiency.html.vue"]]);export{u as default};
