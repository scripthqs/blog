import{_ as e,o as n,c as a,f as s}from"./app-f4e03468.js";const i={},c=s(`<h1 id="数据类型检测" tabindex="-1"><a class="header-anchor" href="#数据类型检测" aria-hidden="true">#</a> 数据类型检测</h1><p>JavaScript 有很多方法可以确定值到底是什么类型。</p><ul><li>typeof 运算符</li><li>instanceof 运算符</li><li>Object.prototype.toString 方法</li></ul><h2 id="typeof-运算符" tabindex="-1"><a class="header-anchor" href="#typeof-运算符" aria-hidden="true">#</a> typeof 运算符</h2><p><code>typeof</code>运算符可以返回一个值的数据类型。它会将该值的类型以字符串的形式返回。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> 变量<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>数值返回 <code>&#39;number&#39;</code></li><li>字符串返回 <code>&#39;string&#39;</code></li><li>布尔值返回 <code>&#39;boolean&#39;</code></li><li>函数返回 <code>&#39;function&#39;</code></li><li>undefined 返回 <code>&#39;undefined&#39;</code></li><li>null 返回 <code>&#39;object&#39;</code> 特殊，因为在 js 设计时，没有考虑 null，把 null 当作 object 的特殊值。</li></ul><p><code>typeof</code>可以用来检查一个没有声明的变量，而不报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>v<span class="token punctuation">;</span>
<span class="token comment">// ReferenceError: v is not defined</span>
<span class="token keyword">typeof</span> v<span class="token punctuation">;</span>
<span class="token comment">// &quot;undefined&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量 v 没有用 var 命令声明，直接使用就会报错。但是，放在 typeof 后面，就不报错了，而是返回 undefined。</p><p><strong>总结：</strong></p><ul><li>可以判断数值、字符串、undefined、布尔值、function</li><li>不能判断 null 和 object</li><li>不能判断 object 和 array</li><li>使用 typeof 检查<code>array</code>会返回<code>object</code>而不是<code>array</code></li><li>检查数组必须使用<code>instanceof</code></li></ul><h2 id="instanceof-运算符" tabindex="-1"><a class="header-anchor" href="#instanceof-运算符" aria-hidden="true">#</a> instanceof 运算符</h2><p><code>instanceof</code>判断对象的具体类型，<code>instance</code>的含义是实例。</p><ul><li>A instanceof B</li><li>如果 B 函数的显式原型对象在 A 对象的原型链上，返回 true，否则返回 false。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> ===</h2><p><code>===</code> 可以判断 undefined、null</p><p>数量类型判断不要使用<code>==</code>，因为它有可能会做数据类型转换。</p>`,19),o=[c];function d(t,l){return n(),a("div",null,o)}const p=e(i,[["render",d],["__file","04_js_instance.html.vue"]]);export{p as default};
