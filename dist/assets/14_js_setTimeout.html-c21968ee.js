import{_ as n,o as a,c as s,f as e}from"./app-10c4e004.js";const t={},p=e(`<h1 id="定时器" tabindex="-1"><a class="header-anchor" href="#定时器" aria-hidden="true">#</a> 定时器</h1><ul><li><code>setInterval()</code>循环调用。将一段代码，每隔一段时间执行一次。（循环执行）</li><li><code>setTimeout()</code>延时调用。将一段代码，等待一段时间之后再执行。（只执行一次）。</li><li>在实际开发中，两者可以根据需要，相互替代。</li></ul><h2 id="setinterval" tabindex="-1"><a class="header-anchor" href="#setinterval" aria-hidden="true">#</a> setInterval()</h2><p><code>setInterval()</code>循环调用。每隔一段时间执行一次，需要两个参数：</p><ul><li>参数 1：回调函数，该函数会每隔一段时间被调用一次。</li><li>参数 2：每次调用间隔的时间，单位是毫秒。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回值：返回一个 Number 类型的数据。这个数字用来作为定时器的唯一标识，方便用来清除定时器。</p><h2 id="clearinterval" tabindex="-1"><a class="header-anchor" href="#clearinterval" aria-hidden="true">#</a> clearInterval()</h2><p><code>clearInterval(返回值)</code>可以关闭定时器。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>返回值可以是任何的参数，如果参数不是一个有效值，则什么都不做。</li></ul><h2 id="settimeout" tabindex="-1"><a class="header-anchor" href="#settimeout" aria-hidden="true">#</a> setTimeout()</h2><p><code>setTimeout()</code>延时调用，等待一段时间之后再执行。（只执行一次），需要两个参数：</p><ul><li>参数 1：回调函数，等待的间隔时间结束后开始调用。</li><li>参数 2：调用等待的间隔时间，单位是毫秒。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了前两个参数，<code>setTimeout</code>还允许更多的参数。它们将依次传入推迟执行的函数（回调函数）。</p><p>举个栗子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token number">1000</span><span class="token punctuation">,</span>
  <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token number">1</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cleartimeout" tabindex="-1"><a class="header-anchor" href="#cleartimeout" aria-hidden="true">#</a> clearTimeout()</h2><p>clearTimeout()可以关闭定时器。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="定时器问题" tabindex="-1"><a class="header-anchor" href="#定时器问题" aria-hidden="true">#</a> 定时器问题</h2><p>定时器切换图片练习：通过按钮绑定的定时器，我们每点击一次，就会开启一个定时器，点击多次就会开启多个定时器，就是让定时器速度叠加，并且我们只能关闭最后一次开启的定时器。</p><ul><li>解决方法：在开启定时器之前，在上一个定时器关闭。</li><li>延时调用和和定时调用可以相互切换。</li></ul>`,24),c=[p];function i(o,l){return a(),s("div",null,c)}const r=n(t,[["render",i],["__file","14_js_setTimeout.html.vue"]]);export{r as default};
