import{_ as t,r as e,o as p,c as o,b as n,e as c,d as i,f as s}from"./app-10c4e004.js";const l={},u=s(`<h1 id="vue3-typescript-后台管理系统" tabindex="-1"><a class="header-anchor" href="#vue3-typescript-后台管理系统" aria-hidden="true">#</a> Vue3 + TypeScript 后台管理系统</h1><h2 id="技术栈" tabindex="-1"><a class="header-anchor" href="#技术栈" aria-hidden="true">#</a> 技术栈</h2><ul><li>Vue3</li><li>TypeScript</li><li>Vite</li><li>Vue Router</li><li>Pinia</li><li>Element plus</li><li>Echarts</li></ul><h2 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> 创建项目</h2><p>两种方式：</p><ol><li>使用 Vue CLI，基于 Webpack，命令<code>vue create</code></li><li>create Vue，基于 vite 工具，命令<code>npm init vue@latest</code></li></ol><p>注意：第二种方式需要 node 版本 16 及以上</p><p><img src="https://raw.githubusercontent.com/scripthqs/assets/master/vue_create.png" alt="vue"></p><h2 id="默认文件" tabindex="-1"><a class="header-anchor" href="#默认文件" aria-hidden="true">#</a> 默认文件</h2><ul><li><p>.vscode 文件夹：<code>extensions.json</code> 推荐的 vscode 插件，如果没有，vscode 会读取这个文件并且自动安装。</p><ul><li><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;recommendations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Vue.volar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Vue.vscode-typescript-vue-plugin&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>node_modules：node 相关依赖</p></li><li><p>public：在这文件夹中的资源打包时会原封不动的打包到 dist 文件夹</p><ul><li><code>favicon.ico</code>站点图标</li></ul></li><li><p>src：源代码文件夹</p></li><li><p>.eslintrc.cjs：代码规范</p></li><li><p>.gitignore：git 忽略文件</p></li><li><p>.prettierrc.json：代码格式化</p></li><li><p>env.d.ts：类型声明文件</p></li><li><p>package-lock.json：锁定依赖的版本</p></li><li><p>package.json：记录相关的依赖</p></li><li><p>readme.md：记录文档</p></li><li><p>tsconfig.json：ts 配置文件，这个文件生成后不建议修改（不一定）</p></li><li><p>tsconfig.config.json：tsconfig.json 引入的 ts 配置文件，其它单独的配置建议在这里面修改</p></li><li><p>vite.config.ts：配置 vite 的文件，等同于 cli 的 vue.config.ts，tsconfig.config.json 中引入了这个文件</p></li><li><p>index.html：入口文件</p></li></ul><h2 id="项目配置" tabindex="-1"><a class="header-anchor" href="#项目配置" aria-hidden="true">#</a> 项目配置</h2><ul><li>配置项目的 icon</li><li>配置标题</li><li>配置别名(vite 默认配置)</li><li>配置 tsconfig.json</li></ul><h2 id="代码规范" tabindex="-1"><a class="header-anchor" href="#代码规范" aria-hidden="true">#</a> 代码规范</h2><h3 id="editorconfig" tabindex="-1"><a class="header-anchor" href="#editorconfig" aria-hidden="true">#</a> .editorconfig</h3><p>EditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。</p><ul><li>这个文件默认配置是没有的，可以手动新建<code>.editorconfig</code>文件</li><li>VSCode 需要安装一个插件：EditorConfig for VS Code</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code># http<span class="token operator">:</span><span class="token comment">//editorconfig.org</span>

root = <span class="token boolean">true</span>

<span class="token punctuation">[</span>*<span class="token punctuation">]</span> # 表示所有文件适用
charset = utf<span class="token number">-8</span> # 设置文件字符集为 utf<span class="token number">-8</span>
indent_style = space # 缩进风格（tab | space）
indent_size = <span class="token number">2</span> # 缩进大小
end_of_line = lf # 控制换行类型(lf | cr | crlf)
trim_trailing_whitespace = <span class="token boolean">true</span> # 去除行尾的任意空白字符
insert_final_newline = <span class="token boolean">true</span> # 始终在文件末尾插入一个新行

<span class="token punctuation">[</span>*.md<span class="token punctuation">]</span> # 表示仅 md 文件适用以下规则
max_line_length = off
trim_trailing_whitespace = <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="prettier" tabindex="-1"><a class="header-anchor" href="#prettier" aria-hidden="true">#</a> prettier</h3><p>Prettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。</p><ul><li>使用命令行新建项目的时候，默认可以选择 prettier</li></ul><p>如果没有选择，可以手动安装</p><ol><li><p>安装 prettier</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> prettier <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>配置.prettierrc 文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;useTabs&quot;</span><span class="token builtin class-name">:</span> false,
  <span class="token string">&quot;tabWidth&quot;</span><span class="token builtin class-name">:</span> <span class="token number">2</span>,
  <span class="token string">&quot;printWidth&quot;</span><span class="token builtin class-name">:</span> <span class="token number">80</span>,
  <span class="token string">&quot;singleQuote&quot;</span><span class="token builtin class-name">:</span> true,
  <span class="token string">&quot;trailingComma&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;none&quot;</span>,
  <span class="token string">&quot;semi&quot;</span><span class="token builtin class-name">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>json 文件不能添加注释，下面是说明</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;useTabs&quot;</span><span class="token builtin class-name">:</span> false,//使用tab缩进还是空格缩进，选择false；
  <span class="token string">&quot;tabWidth&quot;</span><span class="token builtin class-name">:</span> <span class="token number">2</span>,//tab是空格的情况下，是几个空格，选择2个；
  <span class="token string">&quot;printWidth&quot;</span><span class="token builtin class-name">:</span> <span class="token number">80</span>,//当行字符的长度，推荐80，也有人喜欢100或者120；
  <span class="token string">&quot;singleQuote&quot;</span><span class="token builtin class-name">:</span> true,//使用单引号还是双引号，选择true，使用单引号；
  <span class="token string">&quot;trailingComma&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;none&quot;</span>,//在多行输入的尾逗号是否添加，设置为 <span class="token variable"><span class="token variable">\`</span>none<span class="token variable">\`</span></span>，比如对象类型的最后一个属性后面是否加一个，
  <span class="token string">&quot;semi&quot;</span><span class="token builtin class-name">:</span> false//：语句末尾是否要加分号，默认值true，选择false表示不加；
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建<code>.prettierignore</code>忽略文件(也可以不用)</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>/dist<span class="token comment">/*
.local
.output.js
/node_modules/**

**/</span>*.svg
**<span class="token comment">/*.sh

/public/*
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>测试是否生效</p><ul><li>测试一：安装 prettier 插件，在代码中保存代码；</li><li>测试二：配置一次性修改的命令；</li></ul><p>在 package.json 中配置一个 scripts：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code> <span class="token property">&quot;prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prettier --write .&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>vscode 中需要配置</p><ul><li>format on save</li><li>editor default format</li></ul></li></ol><h3 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint" aria-hidden="true">#</a> ESLint</h3><p>ESLint 可以检测不规范的代码</p><ul><li>创建项目的时候，选择了 ESLint，所以 Vue 会默认帮助我们配置需要的 ESLint 环境。</li></ul><p>如果没有选择 ESLint，可以手动安装</p><ol><li><p>项目中安装插件：（vue 在创建项目时，如果选择 prettier，那么这两个插件会自动安装）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> eslint-plugin-prettier eslint-config-prettier <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>配置<code>.eslintrc.cjs</code>文件</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">/* eslint-env node */</span>
require(&#39;@rushstack/eslint-patch/modern-module-resolution&#39;)

module.exports = <span class="token punctuation">{</span>
  root<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  extends<span class="token operator">:</span> <span class="token punctuation">[</span>
    &#39;plugin<span class="token operator">:</span>vue/vue3-essential&#39;<span class="token punctuation">,</span>
    &#39;eslint<span class="token operator">:</span>recommended&#39;<span class="token punctuation">,</span>
    &#39;@vue/eslint-config-typescript&#39;<span class="token punctuation">,</span>
    &#39;@vue/eslint-config-prettier&#39;
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  parserOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
    ecmaVersion<span class="token operator">:</span> &#39;latest&#39;
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>解决 eslint 和 prettier 冲突，在<code>.eslintrc.cjs</code>文件<code>extends</code>下添加<code>&#39;plugin:prettier/recommended&#39;</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">/* eslint-env node */</span>
require(&#39;@rushstack/eslint-patch/modern-module-resolution&#39;)

module.exports = <span class="token punctuation">{</span>
  root<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  extends<span class="token operator">:</span> <span class="token punctuation">[</span>
    &#39;plugin<span class="token operator">:</span>vue/vue3-essential&#39;<span class="token punctuation">,</span>
    &#39;eslint<span class="token operator">:</span>recommended&#39;<span class="token punctuation">,</span>
    &#39;@vue/eslint-config-typescript&#39;<span class="token punctuation">,</span>
    &#39;@vue/eslint-config-prettier&#39;<span class="token punctuation">,</span>
     &#39;plugin<span class="token operator">:</span>prettier/recommended&#39;
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  parserOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
    ecmaVersion<span class="token operator">:</span> &#39;latest&#39;
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>vscode 配置完需要重启，修改了配置也需要重启（vscode 快捷键 ctrl + p 再输入<code>&gt;</code>)</p></li><li><p>配置 eslint 的规则， 在<code>.eslintrc.cjs</code>文件中新增<code>rules</code></p><p>复制（vscode 按住 alt）不想要的 eslint 不想要的提示，加入<code>rules</code>中<code>off</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">/* eslint-env node */</span>
require(<span class="token string">&quot;@rushstack/eslint-patch/modern-module-resolution&quot;</span>);

module.exports = <span class="token punctuation">{</span>
  root<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  extends<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;plugin:vue/vue3-essential&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;@vue/eslint-config-typescript&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;@vue/eslint-config-prettier&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;plugin:prettier/recommended&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  parserOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
    ecmaVersion<span class="token operator">:</span> <span class="token string">&quot;latest&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  rules<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;@typescript-eslint/no-unused-vars&quot;</span><span class="token operator">:</span> <span class="token string">&quot;off&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="重置-css" tabindex="-1"><a class="header-anchor" href="#重置-css" aria-hidden="true">#</a> 重置 css</h3><ol><li><p>安装 normalize.css 库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i normalize.css
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在 main.ts 中引入</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&quot;normalize.css&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="prettier-配置" tabindex="-1"><a class="header-anchor" href="#prettier-配置" aria-hidden="true">#</a> prettier 配置</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>  <span class="token comment">// &quot;prettier.printWidth&quot;: 180, // 超过最大值换行</span>
  <span class="token comment">// &quot;prettier.tabWidth&quot;: 2, // 缩进字节数</span>
  <span class="token comment">// &quot;prettier.useTabs&quot;: false, // 缩进不使用tab，使用空格</span>
  <span class="token comment">// &quot;prettier.semi&quot;: true, // 句尾添加分号</span>
  <span class="token comment">// &quot;prettier.singleQuote&quot;: true, // 使用单引号代替双引号</span>
  <span class="token comment">// &quot;prettier.trailingComma&quot;: &quot;none&quot;, // 在对象或数组最后一个元素后面是否加逗号，不加</span>
  <span class="token comment">// &quot;prettier.arrowParens&quot;: &quot;avoid&quot;, // prettier- (x) =&gt; {} 箭头函数参数只有一个时是否要有小括号。avoid：省略括号</span>
  <span class="token comment">// &quot;prettier.bracketSpacing&quot;: true,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构" aria-hidden="true">#</a> 目录结构</h2><h3 id="assets" tabindex="-1"><a class="header-anchor" href="#assets" aria-hidden="true">#</a> assets</h3><p>静态资源文件夹，存放 css 和 img 等</p><ul><li><p>在 css 文件夹下新建 index.less 文件</p></li><li><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token variable">@import</span> <span class="token string">&quot;./reset.less&quot;</span><span class="token punctuation">;</span>
<span class="token variable">@import</span> <span class="token string">&quot;./common.less&quot;</span><span class="token punctuation">;</span> <span class="token comment">//在index.less中引入其他css</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&quot;./assets/css/index.less&quot;</span><span class="token punctuation">;</span> <span class="token comment">//在main.ts中引入index.less</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token function">less</span> <span class="token parameter variable">-D</span> //需要安装，不然报错，开发时依赖
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="router" tabindex="-1"><a class="header-anchor" href="#router" aria-hidden="true">#</a> router</h3><ul><li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i vue-router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>新建 router 文件夹，配置路由</p></li></ul><h3 id="store" tabindex="-1"><a class="header-anchor" href="#store" aria-hidden="true">#</a> store</h3><p>使用 pinia 进行状态管理</p><ul><li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i pinia
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>新建 store 文件夹</p></li></ul><h3 id="service" tabindex="-1"><a class="header-anchor" href="#service" aria-hidden="true">#</a> service</h3><ul><li><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>npm i axios
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>新建 service 文件夹</p></li></ul><h3 id="结构图" tabindex="-1"><a class="header-anchor" href="#结构图" aria-hidden="true">#</a> 结构图</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue3_erp
├─ public                 <span class="token comment"># 静态资源文件（忽略打包）</span>
├─ src
│  ├─ assets              <span class="token comment"># 静态资源文件</span>
│  ├─ components          <span class="token comment"># 全局组件</span>
│  ├─ config              <span class="token comment"># 全局配置项</span>
│  ├─ hooks               <span class="token comment"># 常用 Hooks</span>
│  ├─ language            <span class="token comment"># 语言国际化</span>
│  ├─ layout              <span class="token comment"># 框架布局</span>
│  ├─ routers             <span class="token comment"># 路由管理</span>
│  ├─ <span class="token function">service</span>             <span class="token comment"># 网络请求接口管理</span>
│  ├─ store               <span class="token comment"># pinia store</span>
│  ├─ styles              <span class="token comment"># 全局样式</span>
│  ├─ utils               <span class="token comment"># 工具库</span>
│  ├─ views               <span class="token comment"># 项目所有页面</span>
│  ├─ App.vue             <span class="token comment"># 入口页面</span>
│  └─ main.ts             <span class="token comment"># 入口文件</span>
├─ .editorconfig          <span class="token comment"># 不同编辑器代码格式化文件</span>
├─ .env                   <span class="token comment"># vite 常用配置</span>
├─ .env.development       <span class="token comment"># 开发环境配置</span>
├─ .env.production        <span class="token comment"># 生产环境配置</span>
├─ .env.test              <span class="token comment"># 测试环境配置</span>
├─ .eslintignore          <span class="token comment"># 忽略 Eslint 校验</span>
├─ .eslintrc.cjs          <span class="token comment"># Eslint 校验配置</span>
├─ .gitignore             <span class="token comment"># git 提交忽略</span>
├─ .prettierignore        <span class="token comment"># 忽略 prettier 格式化</span>
├─ .prettierrc.config.js  <span class="token comment"># prettier 配置</span>
├─ index.html             <span class="token comment"># 入口 html</span>
├─ yarn.lock              <span class="token comment"># 依赖包包版本锁</span>
├─ package.json           <span class="token comment"># 依赖包管理</span>
├─ README.md              <span class="token comment"># README 介绍</span>
├─ tsconfig.json          <span class="token comment"># typescript 全局配置</span>
└─ vite.config.ts         <span class="token comment"># vite 配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h2><p>在开发中需要，在设置后端接口是通常需要区分开发环境（ development）和生产环境（production ），需要学习 vite 的环境变量</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 1.手动注释，过分依赖人为修改</span>
<span class="token comment">// export const BASE_URL = &#39;http://aaa.dev:8000&#39;</span>
<span class="token comment">// export const BASE_URL = &#39;http://aaa.prod:8000&#39;</span>

<span class="token comment">// 2.代码逻辑判断, 判断当前环境</span>
<span class="token comment">// vite 默认提供的环境变量</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MODE</span><span class="token punctuation">)</span><span class="token comment">//development</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DEV</span><span class="token punctuation">,</span> <span class="token string">&quot;是否开发环境&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PROD</span><span class="token punctuation">,</span> <span class="token string">&quot;是否生产环境&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SSR</span><span class="token punctuation">,</span> <span class="token string">&quot;是否是服务器端渲染(server side render)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//3. 创建.env文件</span>
<span class="token comment">//.env文件，开发环境和生成都使用</span>
<span class="token comment">//创建.env.development 开发环境</span>
<span class="token comment">//创建.env.production 生成环境</span>
只有以 <span class="token constant">VITE_</span> 为前缀的变量才会暴露给经过 vite 处理的代码。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件库" tabindex="-1"><a class="header-anchor" href="#组件库" aria-hidden="true">#</a> 组件库</h2><p>安装 element plus</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install element<span class="token operator">-</span>plus <span class="token operator">--</span>save
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="全局引入-简洁方便" tabindex="-1"><a class="header-anchor" href="#全局引入-简洁方便" aria-hidden="true">#</a> 全局引入（简洁方便）</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">&quot;element-plus&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;element-plus/dist/index.css&quot;</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span><span class="token punctuation">;</span>

在tsconfig<span class="token punctuation">.</span>json中配置<span class="token punctuation">;</span>
<span class="token comment">// &quot;types&quot;: [&quot;element-plus/global&quot;]//全局导入引入</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="按需引入-优化" tabindex="-1"><a class="header-anchor" href="#按需引入-优化" aria-hidden="true">#</a> 按需引入（优化）</h3><blockquote><p>首先你需要安装<code>unplugin-vue-components</code>和 <code>unplugin-auto-import</code>这两款插件</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>npm install <span class="token operator">-</span><span class="token constant">D</span> unplugin<span class="token operator">-</span>vue<span class="token operator">-</span>components unplugin<span class="token operator">-</span>auto<span class="token operator">-</span><span class="token keyword">import</span>
<span class="token comment">//unplugin-auto-import //自动导入</span>
<span class="token comment">//unplugin-vue-components //识别用哪些组件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装后，项目目录会多两个文件（自动声明，不需要手动修改）</p><ul><li>auto-imports.d.ts</li><li>components.d.ts</li></ul><p>安装后在 vite.config.ts 文件中配置</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">import</span> AutoImport <span class="token keyword">from</span> <span class="token string">&quot;unplugin-auto-import/vite&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Components <span class="token keyword">from</span> <span class="token string">&quot;unplugin-vue-components/vite&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ElementPlusResolver <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;unplugin-vue-components/resolvers&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 tsconfig.json 中配置(<strong>ts 需要配置这一步</strong>)，此时就有了类型提示</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token comment">//告诉ts哪些文件需要编译</span>
  <span class="token string-property property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;env.d.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;src/**/*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;src/**/*.vue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;auto-import.d.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;components.d.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，vue 中写的 templeate 写的 el 组件，会在 components.d.ts 自动导入。</p><p>但是类似 ElMessage 这种写在 script 中的组件不会自动导入。（好像是导入了没有样式）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//需要在vite.config.ts中配置</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createStyleImportPlugin<span class="token punctuation">,</span> ElementPlusResolve <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite-plugin-style-import&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//这个插件支持很多组件库</span>
<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token function">createStyleImportPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">resolves</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">ElementPlusResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">libs</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">libraryName</span><span class="token operator">:</span> <span class="token string">&quot;element-plus&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">esModule</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token function-variable function">resolveStyle</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">element-plus/theme-chalk/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.css</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,64),r={href:"https://github.com/vbenjs/vite-plugin-style-import/blob/main/README.md",target:"_blank",rel:"noopener noreferrer"},d=s(`<h2 id="cache-封装" tabindex="-1"><a class="header-anchor" href="#cache-封装" aria-hidden="true">#</a> cache 封装</h2><p>封装一个方法，存 localStorage 或者 sessionStorage</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>
  storage<span class="token operator">:</span> Storage<span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>type<span class="token operator">:</span> CacheType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> type <span class="token operator">===</span> CacheType<span class="token punctuation">.</span>Local <span class="token operator">?</span> localStorage <span class="token operator">:</span> sessionStorage<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">setCache</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">getCache</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">removeCache</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> localCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cache</span><span class="token punctuation">(</span>CacheType<span class="token punctuation">.</span>Local<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sessionCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cache</span><span class="token punctuation">(</span>CacheType<span class="token punctuation">.</span>Session<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> localCache<span class="token punctuation">,</span> sessionCache <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="登录流程" tabindex="-1"><a class="header-anchor" href="#登录流程" aria-hidden="true">#</a> 登录流程</h2><h3 id="判断-token" tabindex="-1"><a class="header-anchor" href="#判断-token" aria-hidden="true">#</a> 判断 token</h3><p>在路由配置中，<code>/</code>重定向到<code>main</code>主页面，但是可以判断有无 token，让路由到 login 页面</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  history<span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      path<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
      redirect<span class="token operator">:</span> <span class="token string">&quot;/main&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      path<span class="token operator">:</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@/views/login/Login.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      path<span class="token operator">:</span> <span class="token string">&quot;/main&quot;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@/views/main/Main.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      path<span class="token operator">:</span> <span class="token string">&quot;/:pathMatch(.*)&quot;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@/views/notFound/NotFound.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//导航守卫</span>
router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> token <span class="token operator">=</span> localCache<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token constant">LOGIN_TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">&quot;/main&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="记住密码" tabindex="-1"><a class="header-anchor" href="#记住密码" aria-hidden="true">#</a> 记住密码</h3><p>登录的时候判断是否勾选记住密码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">loginAction</span> <span class="token operator">=</span> <span class="token punctuation">(</span>isKeep<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  formRef<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 1.获取用户输入的帐号和密码</span>
      <span class="token keyword">const</span> name <span class="token operator">=</span> account<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
      <span class="token keyword">const</span> password <span class="token operator">=</span> account<span class="token punctuation">.</span>password<span class="token punctuation">;</span>

      <span class="token comment">// 2.向服务器发送网络请求(携带账号和密码)</span>
      loginStore<span class="token punctuation">.</span><span class="token function">loginAction</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> password <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//3.判段是否需要记住密码</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isKeep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          localCache<span class="token punctuation">.</span><span class="token function">setCache</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
          localCache<span class="token punctuation">.</span><span class="token function">setCache</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Oops, 请您输入正确的格式后再操作~~.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>账号和密码是记住了，但是记住密码的勾选状态还是默认 false，使用 watch 将记住密码保存在 localStorage</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> isKeep <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>localCache<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">&quot;isKeep&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">watch</span><span class="token punctuation">(</span>isSave<span class="token punctuation">,</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  localCache<span class="token punctuation">.</span><span class="token function">setCache</span><span class="token punctuation">(</span><span class="token string">&quot;isKeep&quot;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过我测试，发现上述方法有 bug，经排查是封装的 cache 方法有问题</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">setCache</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">getCache</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//就是因为这个if(value)，判断有问题，如果外面传一个布尔值类型false,就无法执行setItem方法</span>
<span class="token function">setCache</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以将 if(value)判断去掉，</p><ul><li>布尔值的 false，经过 JSON.stringify 将转成字符串的 false，</li><li>同样，字符串的 false 经过 JSON.parse 可以转成布尔值的 false</li></ul><h3 id="携带-token" tabindex="-1"><a class="header-anchor" href="#携带-token" aria-hidden="true">#</a> 携带 token</h3><p>通常来说，登录接口会返回一个 token，此外的大多数接口，基本都需要携带这个 token，不然会报 401。需要给其他接口添加一个 headers。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>apiRequest<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  headers<span class="token operator">:</span> <span class="token punctuation">{</span>
    Authorization<span class="token operator">:</span> <span class="token string">&quot;Bearer &quot;</span> <span class="token operator">+</span> localCache<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token constant">LOGIN_TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开发中肯定不可能每个接口都写一次 header，而是在请求拦截时，将 header 放在里面</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>interceptors<span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">requestSuccessFn</span><span class="token operator">:</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token string">&quot;config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> token <span class="token operator">=</span> localCache<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token constant">LOGIN_TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>headers <span class="token operator">&amp;&amp;</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      config<span class="token punctuation">.</span>headers<span class="token operator">!</span><span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遇到另外一个问题：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>config<span class="token punctuation">.</span>headers<span class="token operator">!</span><span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token comment">//这样写，ts会报警告，之前加!非空断言就可以，最新axios的版本不行了，需要换一种写法</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>headers <span class="token operator">&amp;&amp;</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// config.headers!.Authorization = \`Bearer \${token}\`;</span>
  <span class="token keyword">typeof</span> config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>set <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="角色权限" tabindex="-1"><a class="header-anchor" href="#角色权限" aria-hidden="true">#</a> 角色权限</h2><p>权限管理：根据登录用户的不同，呈现不同的后台管理系统的内容，具有不同的操作权限。</p><p>设计依据：基于后端数据库设计，RBAC(role based access control)基于角色的访问控制。</p><p>给用户分配不同的角色：</p><ul><li>超级管理员</li><li>管理员</li><li>普通成员</li><li>......</li></ul><h2 id="动态组件" tabindex="-1"><a class="header-anchor" href="#动态组件" aria-hidden="true">#</a> 动态组件</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span>el<span class="token operator">-</span>icon<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>component <span class="token operator">:</span><span class="token keyword">is</span><span class="token operator">=</span><span class="token string">&quot;item.icon.split(&#39;-icon-&#39;)[1]&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>icon<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="列表和树转换" tabindex="-1"><a class="header-anchor" href="#列表和树转换" aria-hidden="true">#</a> 列表和树转换</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 方式1：列表转换成树形结构;</span>
<span class="token keyword">const</span> <span class="token function-variable function">setTree</span> <span class="token operator">=</span> <span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> cloneData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对源数据深度克隆</span>
  <span class="token keyword">return</span> cloneData<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>father<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 循环所有项，并添加children属性</span>
    <span class="token keyword">let</span> branchArr <span class="token operator">=</span> cloneData<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> father<span class="token punctuation">.</span>departmentId <span class="token operator">==</span> child<span class="token punctuation">.</span>parentId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回每一项的子级数组</span>
    branchArr<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>father<span class="token punctuation">.</span>children <span class="token operator">=</span> branchArr<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">//给父级添加一个children属性，并赋值</span>
    <span class="token keyword">return</span> father<span class="token punctuation">.</span>parentId <span class="token operator">==</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span> <span class="token comment">//返回第一层</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 方式2：列表转换成树形结构;</span>
<span class="token keyword">const</span> <span class="token function-variable function">toTree</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//没有父节点的数据</span>
  <span class="token keyword">let</span> parents <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> val<span class="token punctuation">.</span>parentId <span class="token operator">==</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//有父节点的数据</span>
  <span class="token keyword">let</span> children <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> val<span class="token punctuation">.</span>parentId <span class="token operator">&gt;</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//定义方法</span>
  <span class="token keyword">const</span> <span class="token function-variable function">translator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>parents<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//遍历父节点数据</span>
    parents<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">//遍历子节点数据</span>
      children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>current<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//此时找到父节点下的子节点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>parentId <span class="token operator">==</span> item<span class="token punctuation">.</span>departmentId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">let</span> temp<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//让当前子节点从temp中移除，temp作为新的子节点数据，这里是为了让递归时，子节点的遍历次数更少，如果父子关系的层级越多，越有利</span>
          temp<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//让当前子节点作为唯一的父节点，去递归查找其对应的子节点</span>
          <span class="token function">translator</span><span class="token punctuation">(</span><span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把找到子节点放入父节点的children属性中</span>
          <span class="token keyword">typeof</span> item<span class="token punctuation">.</span>children <span class="token operator">!==</span> <span class="token string">&quot;undefined&quot;</span> <span class="token operator">?</span> item<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">translator</span><span class="token punctuation">(</span>parents<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> parents<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动态路由" tabindex="-1"><a class="header-anchor" href="#动态路由" aria-hidden="true">#</a> 动态路由</h2><p>对于权限管理，最简单的方式就是一次性将所有路由注册，左侧菜单树根据接口渲染，这种方式也算常用。但是这种方式的缺点就是可以在浏览器地址栏手动输入路由进入没有权限的页面，如果要解决这个问题就可以选择采用动态路由的方式来解决。</p><p>动态路由：根据不用用户（菜单）动态的注册应该有的路由，而不是一次性将所有的路由注册到 router 中。</p><ol><li><p>基于角色(role)动态路由管理</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> roles <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">superAdmin</span><span class="token operator">:</span> <span class="token punctuation">(</span>所有路由<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> router<span class="token punctuation">.</span>main<span class="token punctuation">,</span>
  children<span class="token punctuation">,</span>
  <span class="token function-variable function">admin</span><span class="token operator">:</span> <span class="token punctuation">(</span>一部分路由<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> router<span class="token punctuation">.</span>main<span class="token punctuation">.</span>childern<span class="token punctuation">,</span>
  service<span class="token operator">:</span> 少部分路由<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每增加一个角色，都要多一个 key/value，前端该代码或者后端返回 json</p></li><li><p>基于菜单(menu)的动态路由管理，将菜单路由映射成路由对象</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token number">1.</span>获取菜单
<span class="token number">2.</span>动态获取所有的路由对象，放在数组
<span class="token number">3.</span>根据菜单去匹配正确的路由
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>动态添加路由</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//添加路由</span>
router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> About <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  path<span class="token operator">:</span> <span class="token string">&quot;/main&quot;</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@/layout/layout.vue&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">//给main添加一个嵌套路由</span>
router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>path<span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token function-variable function">components</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现多级面包屑" tabindex="-1"><a class="header-anchor" href="#实现多级面包屑" aria-hidden="true">#</a> 实现多级面包屑</h2><ul><li>多级面包屑结构 <code>[{一级},{二级},{三级},...]</code></li><li>菜单树结构<code>[{url:&#39;&#39;,name:&#39;&#39;,children:[{}]}]</code></li><li>当前路由 &quot;/main/son/gon&quot;，当前路由其实就是树的一个子节点</li><li>只有从树的 root，一直往下找，这一段就是需要的数据</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//定义面包屑接口</span>
<span class="token keyword">interface</span> <span class="token class-name">IBreadcrumbs</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//path 当前路由</span>
<span class="token comment">//userMenus 菜单树</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mapPathToBreadcrumbs</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> userMenus<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1.定义面包屑数组</span>
  <span class="token keyword">const</span> breadcrumbs<span class="token operator">:</span> IBreadcrumbs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 拆分当前路由</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;当前路由：&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> pathSplit <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token operator">!</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  pathSplit<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      pathSplit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pathSplit<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      pathSplit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> pathSplit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;将当前路由拆分：&quot;</span><span class="token punctuation">,</span> pathSplit<span class="token punctuation">)</span><span class="token punctuation">;</span>
  pathSplit<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> findItem <span class="token operator">=</span> userMenus<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> menu<span class="token punctuation">.</span>url <span class="token operator">===</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>findItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      breadcrumbs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>findItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
      userMenus <span class="token operator">=</span> findItem<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> breadcrumbs<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vue-组件的-ref-类型" tabindex="-1"><a class="header-anchor" href="#vue-组件的-ref-类型" aria-hidden="true">#</a> vue 组件的 ref 类型</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// &lt;el-form ref=&quot;formRef&quot;&gt;&lt;/el-form&gt;;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ElForm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;element-plus&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> formRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> ElForm<span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43);function k(v,m){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[c("https://github.com/vbenjs/vite-plugin-style-import/blob/main/README.md"),i(a)])])]),d])}const g=t(l,[["render",k],["__file","vue3_ts_erp.html.vue"]]);export{g as default};
