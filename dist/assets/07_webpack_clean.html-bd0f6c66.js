import{_ as a,o as s,c as n,f as e}from"./app-10c4e004.js";const p={},t=e(`<h1 id="打包发布" tabindex="-1"><a class="header-anchor" href="#打包发布" aria-hidden="true">#</a> 打包发布</h1><h2 id="为什么要打包发布" tabindex="-1"><a class="header-anchor" href="#为什么要打包发布" aria-hidden="true">#</a> 为什么要打包发布</h2><p><strong>项目开发完成之后</strong>，需要使用 webpack <strong>对项目进行打包发布</strong>，主要原因有以下两点：</p><ol><li>开发环境下，打包生成的文件存放于内存中，无法获取到最终打包生成的文件</li><li>开发环境下，打包生成的文件不会进行代码压缩和性能优化</li></ol><p>为了让项目能够在生产环境中高性能的运行，因此需要对项目进行打包发布。</p><h2 id="配置-webpack-的打包发布" tabindex="-1"><a class="header-anchor" href="#配置-webpack-的打包发布" aria-hidden="true">#</a> 配置 webpack 的打包发布</h2><p>在 package.json 文件的 scripts 节点下，新增 build 命令如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack serve&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span><span class="token string">&quot;webpack --mode production&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>--model</strong> 是一个参数项，用来指定 webpack 的<strong>运行模式</strong>。production 代表生产环境，会对打包生成的文件 进行代码压缩和性能优化。</p><p>注意：通过 --model 指定的参数项，会覆盖 webpack.config.js 中的 model 选项</p><h2 id="把-js-文件统一生成到-js-目录中" tabindex="-1"><a class="header-anchor" href="#把-js-文件统一生成到-js-目录中" aria-hidden="true">#</a> 把 js 文件统一生成到 js 目录中</h2><p>在 webpack.config.js 配置文件的 output 节点中，进行如下的配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;js/bundle.js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="把图片文件统一生成到-image-目录中" tabindex="-1"><a class="header-anchor" href="#把图片文件统一生成到-image-目录中" aria-hidden="true">#</a> 把图片文件统一生成到 image 目录中</h2><p>修改 webpack.config.js 中的 url-loader 配置项，新增 outputPath 选项即可指定图片文件的输出路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpg|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&quot;url-loader?limit=8192&amp;outputPath=img&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：url-loader 中，多个参数可以用&amp;拼接。</strong></p><h2 id="自动清理-dist-目录下的旧文件" tabindex="-1"><a class="header-anchor" href="#自动清理-dist-目录下的旧文件" aria-hidden="true">#</a> 自动清理 dist 目录下的旧文件</h2><p>为了在每次打包发布时自动清理掉 dist 目录中的旧文件，可以安装并配置 clean-webpack-plugin 插件</p><ol><li><p>安装 clean-webpack-plugin 插件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev clean-webpack-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>配置 webpack.config.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,20),o=[t];function i(r,l){return s(),n("div",null,o)}const u=a(p,[["render",i],["__file","07_webpack_clean.html.vue"]]);export{u as default};
