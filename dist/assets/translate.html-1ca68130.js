import{_ as p,r as t,o as e,c as o,b as n,e as s,d as c,f as l}from"./app-f4e03468.js";const i={},u=n("h1",{id:"vue翻译方案",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vue翻译方案","aria-hidden":"true"},"#"),s(" Vue翻译方案")],-1),r=n("h2",{id:"原始方案",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#原始方案","aria-hidden":"true"},"#"),s(" 原始方案")],-1),k={href:"https://kazupon.github.io/vue-i18n/",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"$t",-1),v=l(`<p>但是我们在使用的过程中，发现了一些问题：</p><ol><li><p>国际化命名没有统一的命名规范，可能会导致一条相同的翻译，被写了多次</p></li><li><p>Key 经常会重复，导致添加翻译的时候，需要去查找是否已经存在了</p></li><li><p>页面里翻译使用的是 Key 值，不利于开发人员理解，查找问题时无法直接定位到页面</p></li><li><p>添加翻译时，需要在代码中添加，如果翻译文件较多，需要多次添加，效率低下 本方案基于：https://blog.csdn.net/qq_40259641/article/details/124382298，并在此基础上做了一些改进。</p></li><li><p>使用 i18next-scanner 来扫描项目中的翻译，生成翻译文件</p></li><li><p>魔改 vue-i18n，使用中文作为 Key 值，方便开发人员理解</p></li></ol><p>实际翻译时，是通过中文生成的 Key 值来获取翻译的，可以解决后端存储时的编码问题</p><ol start="3"><li><p>当 Key 为中文时，直接使用中文作为翻译，不需要再去翻译</p></li><li><p>兼容默认的 key 模式，如果使用默认的 key 模式，不会影响到翻译的使用</p></li></ol><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><ol><li>Vue-i18n 修改代码：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> crc32 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;crc&#39;</span>
<span class="token keyword">import</span> VueI18n <span class="token keyword">from</span> <span class="token string">&#39;vue-i18n&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">I18n</span> <span class="token keyword">extends</span> <span class="token class-name">VueI18n</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token punctuation">)</span>

    <span class="token keyword">const</span> oldParsePath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_path<span class="token punctuation">.</span><span class="token function">parsePath</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_path<span class="token punctuation">)</span>

    <span class="token comment">// custom the path key parser</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_path<span class="token punctuation">.</span><span class="token function-variable function">parsePath</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> key <span class="token operator">=</span> path

      <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">&amp;&amp;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\u4E00-\\u9FFF]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        key <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getKeyForPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">return</span> <span class="token function">oldParsePath</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">getKeyForPath</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">K</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">crc32</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>i18next-scanner 配置：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> crc32 <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;crc&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;src/**/*.{htm,html,js,jsx,vue}&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;!src/components/business/TrUser/**&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;!src/components/feature/TrEditTree/**&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;!src/i18n/**&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;!**/node_modules/**&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">debug</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">removeUnusedKeys</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">attr</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">func</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">trans</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lngs</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;en&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;zh&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ns</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;base&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">defaultLng</span><span class="token operator">:</span> <span class="token string">&#39;zh&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">defaultNs</span><span class="token operator">:</span> <span class="token string">&#39;app&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">defaultValue</span><span class="token operator">:</span> <span class="token string">&#39;__NOT_TRANSLATED__&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">resource</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">loadPath</span><span class="token operator">:</span> <span class="token string">&#39;src/i18n/lang/{{lng}}/{{ns}}.json&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">savePath</span><span class="token operator">:</span> <span class="token string">&#39;src/i18n/lang/{{lng}}/{{ns}}.json&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">jsonIndent</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token literal-property property">lineEnding</span><span class="token operator">:</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">nsSeparator</span><span class="token operator">:</span> <span class="token string">&#39;:&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">keySeparator</span><span class="token operator">:</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">interpolation</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">&#39;{{&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">suffix</span><span class="token operator">:</span> <span class="token string">&#39;}}&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">transform</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">customTransform</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> enc<span class="token punctuation">,</span> done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parser

    <span class="token keyword">const</span> extname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>path<span class="token punctuation">)</span>
    <span class="token keyword">const</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>path<span class="token punctuation">,</span> enc<span class="token punctuation">)</span>

    <span class="token keyword">const</span> <span class="token function-variable function">parseKey</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&amp;&amp;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\u4E00-\\u9FFF]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> newKey <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">K</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">crc32</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>

        parser<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">app:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          <span class="token operator">...</span>options<span class="token punctuation">,</span>
          <span class="token literal-property property">defaultValue</span><span class="token operator">:</span> key<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// add prefix to split base and app</span>
        parser<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">base:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    parser<span class="token punctuation">.</span><span class="token function">parseFuncFromString</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;$t&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$tc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$te&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;i18n.t&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> parseKey<span class="token punctuation">)</span>
    <span class="token comment">// add support for vue-i18n interpolation</span>
    <span class="token comment">// https://kazupon.github.io/vue-i18n/guide/interpolation.html</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;.vue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.htm&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.html&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>extname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parser<span class="token punctuation">.</span><span class="token function">parseAttrFromString</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> parseKey<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;.jsx&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>extname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parser<span class="token punctuation">.</span><span class="token function">parseTransFromString</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;I18n&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">i18nKey</span><span class="token operator">:</span> <span class="token string">&#39;path&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> parseKey<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使用 Vite 动态导入翻译文件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jsonFiles <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">globEager</span><span class="token punctuation">(</span><span class="token string">&#39;./lang/**/*.json&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">eager</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> localeMap <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>jsonFiles<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> match <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.\\/lang\\/(.+)\\/.+\\.json$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> lang <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>acc<span class="token punctuation">,</span> <span class="token punctuation">[</span>lang<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>acc<span class="token punctuation">[</span>lang<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>jsonFiles<span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function m(b,y){const a=t("ExternalLinkIcon");return e(),o("div",null,[u,r,n("p",null,[s("Vue2 项目都是通过 "),n("a",k,[s("vue-i18n"),c(a)]),s(" 来实现的，这个库的使用方式也很简单，就是在组件中使用 "),d,s(" 方法来获取翻译后的文本。")]),v])}const f=p(i,[["render",m],["__file","translate.html.vue"]]);export{f as default};
