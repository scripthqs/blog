import{_ as a,o as s,c as n,f as e}from"./app-f4e03468.js";const p={},o=e(`<h1 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h1><p>运算符（operator）也称操作符，是用于实现赋值，比较和执行算数运算等功能的符号。</p><h2 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符" aria-hidden="true">#</a> 算数运算符</h2><p>除了+，-，*，/外，还有%取余（取模）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">9</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>&#39;+&#39;在字符串运算中，会变成拼接字符串</li><li>浮点数的运算精度很可能得到一个不准确的结果。</li><li><strong>由数字、运算符、变量等组成的式子称为表达式，表达式最终都有一个结果，称为返回值</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//2是返回值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="自增自减" tabindex="-1"><a class="header-anchor" href="#自增自减" aria-hidden="true">#</a> 自增自减</h2><p><code>a++</code>和<code>++a</code></p><ul><li>无论是哪一种都会使原变量自增 1</li><li>不同的是<code>a++</code>和<code>a++</code>的值不同，<code>a++</code>的是原值，<code>++a</code>是新值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//a=1</span>
a <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span> <span class="token comment">//a=2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>a--</code>和<code>--a</code></p><ul><li>无论是哪一种都会使原变量自减 1</li><li>不同的是<code>a--</code>和<code>--a</code>的值不同，<code>a--</code>的是原值，<code>--a</code>是新值</li></ul><h2 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符" aria-hidden="true">#</a> 关系运算符</h2><p>关系运算符（比较运算符）有大于、小于、全等、不等。会对两个数据进行比较，关系成立则返回<code>true</code>，不成立则返回<code>false</code></p><ul><li>对于非数值的关系运算，会将其转换成数字</li><li><code>NaN</code>和任何值比较都是 false</li><li>如果符号两侧的值都是字符串，不会将其转换成数字进行比较，而是分别比较字符串的字符的 Unicode 编码</li><li>比较字符编码的是一位一位的比较，如果两位一样则比较下一位 <ul><li>这种方法可以用作字母排序</li></ul></li><li>比较两个字符串型的数字时，一定要转型</li><li><code>\\uxxxx</code>转义字符<code>\\u</code>表示 Unicode 编码</li><li>&#39;==&#39;相等运算符会做类型转换 <ul><li><code>null==0</code>是 false</li><li><code>null==undefined</code>是 true</li><li>NaN 不和任何值相等，包括它本身</li></ul></li></ul><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h2><p>逻辑运算符用来进行布尔值运算的运算符，其返回值也是布尔值。与或非</p><h3 id="与" tabindex="-1"><a class="header-anchor" href="#与" aria-hidden="true">#</a> 与<code>&amp;&amp;</code></h3><p>逻辑与，两边都为 true，才返回 true</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>表达式<span class="token number">1</span> <span class="token operator">&amp;&amp;</span> 表达式<span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>表达式 1 为真，返回表达式 2</li><li>表达式 1 为假，返回表达式 1</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>a <span class="token operator">&amp;&amp;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;我出不出来&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时，如果 a 为<code>false</code>则不再看第二个值，此时 alert()语句将不会输出。</p><p><strong>总结：逻辑与（&amp;&amp;）找 false，找到就输出，找不到则返回最后一个</strong>。</p><h3 id="或" tabindex="-1"><a class="header-anchor" href="#或" aria-hidden="true">#</a> 或<code>||</code></h3><p>逻辑或，两边都为 false，才返回 false</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>表达式<span class="token number">1</span> <span class="token operator">||</span> 表达式<span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>表达式 1 为真，返回表达式 1</li><li>表达式 1 为假，返回表达式 2</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>b <span class="token operator">||</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;我出不出来&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时，如果第一个值为<code>true</code>则不再看第二个值，此时 alert()语句将不会输出</p><p><strong>总结：逻辑或（||）找 true，找到就输出，找不到则返回最后一个</strong>。</p><p><code>买东西肯定要买真货(true ||)</code></p><h3 id="非" tabindex="-1"><a class="header-anchor" href="#非" aria-hidden="true">#</a> 非<code>!</code></h3><p>逻辑非，取反。任意数据类型做两次非运算即可转换成 Boolean 类型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>c<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
a <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
a <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>
a <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
a <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>
a <span class="token operator">%=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符优先级" tabindex="-1"><a class="header-anchor" href="#运算符优先级" aria-hidden="true">#</a> 运算符优先级</h2><p><code>,</code>运算符可以分割多个语句，同时声明多个变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
  z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与<code>&amp;&amp;</code>的优先级比<code>||</code>高，&quot;假与真或&quot;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遇到优先级拿不准的直接加括号<code>()</code></p>`,44),c=[o];function t(l,i){return s(),n("div",null,c)}const d=a(p,[["render",t],["__file","06_js_operator.html.vue"]]);export{d as default};
