import{_ as e,o as i,c as l,f as a}from"./app-c6441670.js";const t={},d=a(`<h1 id="ssr-服务端渲染" tabindex="-1"><a class="header-anchor" href="#ssr-服务端渲染" aria-hidden="true">#</a> SSR 服务端渲染</h1><h2 id="spa-、ssg、-ssr" tabindex="-1"><a class="header-anchor" href="#spa-、ssg、-ssr" aria-hidden="true">#</a> SPA 、SSG、 SSR</h2><p>SPA(Single Page Application)单页面应用</p><ul><li>构建 SPA 应用常见的框架: React、Vue</li><li>SPA 应用默认只返回一个空 HTML 页面，整个程序的内容是通过 js 动态加载是实现的</li><li>只需要第一次请求时加载页面，用户体验较好</li><li>但是不利于 SEO，首屏加载资源过多时，速度慢</li></ul><p>SSG(Static Site Generate) 静态站点生成</p><ul><li>构建 SSG 应用常见的库和框架: Vue Nuxt、 React Next.js</li><li>是预先生成好的静态网站</li><li>直接给浏览器返回静态的 HTML，也有利于 SEO</li><li>但是网站的内容需要更新了，那必须得重新再次构建和部署</li></ul><p>SSR(Server Side Render)服务器端渲染</p><ul><li>构建 SSR 应用常见的库和框架有： Vue Nuxt、 React Next.js 等</li><li>在服务器端渲染页面，并将渲染好 HTML 返回给浏览器呈现</li><li>利于 SEO，更快的首屏渲染速度</li><li>但是更消耗服务器资源，开发者需要注意代码运行环境，服务器端还是浏览器端</li></ul><h2 id="爬虫和-seo" tabindex="-1"><a class="header-anchor" href="#爬虫和-seo" aria-hidden="true">#</a> 爬虫和 SEO</h2><p>对于 google 爬虫来说，分为 3 个阶段</p><ol><li>爬取：爬虫(蜘蛛)根据自己的规则在互联网上发现各种网页</li><li>索引编制：将获取的信息存储在大型数据库，根据内部算法，归类分组</li><li>呈现结果：当用户搜索时，搜索引擎根据内容选择代表呈现</li></ol><p>SEO 搜索引擎的优化：就是让网页符合爬虫的规则</p><ul><li>语义化标签，<code>&lt;h1&gt;</code>、<code>&lt;h6&gt;</code>、<code>p</code>、、<code>a</code>、<code>header</code></li><li>页面包含标题 <code>title</code> 和内部链接<code>a</code></li><li>meta 标签优化：设置 description、keywords</li><li>图片 img 添加 alt 属性，文本标记加粗<code>&lt;strong&gt;</code></li><li>robots.txt：规定爬虫可访问哪些网址</li><li>sitemap.xml 站点地图</li></ul><h2 id="ssr-实现方案" tabindex="-1"><a class="header-anchor" href="#ssr-实现方案" aria-hidden="true">#</a> SSR 实现方案</h2><p>使用流行的框架</p><ul><li>React：Next.js</li><li>Vue3: Nuxt3</li><li>Vue2: Nuxt.js</li></ul><h2 id="nuxt-3" tabindex="-1"><a class="header-anchor" href="#nuxt-3" aria-hidden="true">#</a> Nuxt 3</h2><p>Nuxt3 是基于 Vue3 + Vue Router + Vite 等技术栈，全程 Vue3 + Vite 开发体验。</p><ul><li>自动导包：会自动导入辅助函数、组合 API 和 Vue API ，无需手动导入</li><li>约定式路由：目录结构即路由，在 <code>pages/</code> 目录中创建的每个页面，都会根据目录结构和文件名来自动生成路由</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx nuxi init ssr-nuxt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="app-vue-入口文件" tabindex="-1"><a class="header-anchor" href="#app-vue-入口文件" aria-hidden="true">#</a> App.vue 入口文件</h3><p>默认情况下，Nuxt 会将 App.vue 文件视为入口点：</p><ul><li>定义页面布局 Layout 或 自定义布局，如：NuxtLayout</li><li>定义路由的占位，如：NuxtPage</li><li>编写全局样式</li><li>全局监听路由</li></ul><h3 id="nuxt-config-配置文件" tabindex="-1"><a class="header-anchor" href="#nuxt-config-配置文件" aria-hidden="true">#</a> nuxt.config 配置文件</h3><p>nuxt.config.ts 配置文件位于项目的根目录，可自定义配置</p><h3 id="nuxt3-内置组件" tabindex="-1"><a class="header-anchor" href="#nuxt3-内置组件" aria-hidden="true">#</a> nuxt3 内置组件</h3><ul><li>SEO 组件： Html、Body、Head、Title、Meta、Style、Link、NoScript、Base</li><li>NuxtLayout：是 Nuxt 自带的页面布局组件</li><li>NuxtPage：是 Nuxt 自带的页面占位组件，是对 router-view 的封装</li><li>ClientOnly：该组件中的默认插槽的内容只在客户端渲染，fallback 插槽的内容只在服务器端渲染</li><li>NuxtLink：是 Nuxt 自带的页面导航组件</li></ul><h3 id="新建页面" tabindex="-1"><a class="header-anchor" href="#新建页面" aria-hidden="true">#</a> 新建页面</h3><ul><li>Nuxt 项目中的页面是在 pages 目录下创建的</li><li>在 pages 目录创建的页面，Nuxt 会根据该页面的目录结构和其文件名来自动生成对应的路由</li></ul>`,29),r=[d];function s(u,n){return i(),l("div",null,r)}const o=e(t,[["render",s],["__file","01_ssr.html.vue"]]);export{o as default};
