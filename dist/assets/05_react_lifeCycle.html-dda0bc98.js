import{_ as e,o as a,c as i,f as t}from"./app-007a9be1.js";const l={},n=t('<h1 id="react-生命周期" tabindex="-1"><a class="header-anchor" href="#react-生命周期" aria-hidden="true">#</a> React 生命周期</h1><p>React 每个组件都包含“生命周期方法”，分为很多阶段</p><ul><li>装载阶段(Mount):组件第一次在 DOM 树被渲染的过程</li><li>更新阶段(Update):组件状态发生变化，重新更新渲染的过程</li><li>卸载过程(Unmount):组件从 DOM 树中被移除的过程</li></ul><p>react 会对组件内部实现的某些函数进行回调，告诉我们当前处于哪些阶段，这些函数就是生命周期函数</p><ul><li>componentDidMount 函数：组件挂载到 DOM 上</li><li>componentDidUpdate 函数：组件发生了更新</li><li>componentWillUnmount 函数：组件即将被移除</li></ul><p>组件实例被创建并插入 DOM 中时，生命周期调用的顺序：</p><h2 id="挂载" tabindex="-1"><a class="header-anchor" href="#挂载" aria-hidden="true">#</a> 挂载</h2><ol><li>constructor：初始化 state 或进行方法绑定</li><li>render</li><li>componentDidMount：操作 DOM，发送网络请求，添加订阅</li></ol><h2 id="更新" tabindex="-1"><a class="header-anchor" href="#更新" aria-hidden="true">#</a> 更新</h2><ol><li>render</li><li>componentDidUpdate：首次渲染不会执行，更新后操作 DOM，比较 props 然后发送请求</li></ol><h2 id="卸载" tabindex="-1"><a class="header-anchor" href="#卸载" aria-hidden="true">#</a> 卸载</h2><ol><li>componentWillUnmount：执行必要的清理操作，清除定时器，取消网络请求，取消订阅</li></ol><h2 id="不常用的生命周期" tabindex="-1"><a class="header-anchor" href="#不常用的生命周期" aria-hidden="true">#</a> 不常用的生命周期</h2><p><code>shouldComponentUpdate</code> 返回 false 或者 true，可以用来控制 render 函数需不需要重新渲染，可以用来性能优化</p>',14),o=[n];function r(c,d){return a(),i("div",null,o)}const s=e(l,[["render",r],["__file","05_react_lifeCycle.html.vue"]]);export{s as default};
