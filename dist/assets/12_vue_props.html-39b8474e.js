import{_ as n,o as s,c as a,f as e}from"./app-007a9be1.js";const t={},p=e(`<h1 id="组件的通信" tabindex="-1"><a class="header-anchor" href="#组件的通信" aria-hidden="true">#</a> 组件的通信</h1><h2 id="组件之间的关系" tabindex="-1"><a class="header-anchor" href="#组件之间的关系" aria-hidden="true">#</a> 组件之间的关系</h2><p>在项目开发中，组件之间的最常见的关系分为如下两种：</p><ol><li>父子关系</li><li>兄弟关系</li></ol><h2 id="组件的数据共享" tabindex="-1"><a class="header-anchor" href="#组件的数据共享" aria-hidden="true">#</a> 组件的数据共享</h2><p>父子组件之间的数据共享分为：</p><ul><li>父组件向子组件传递数据</li><li>子组件向父组件传递数据</li></ul><h2 id="父子组件数据传递" tabindex="-1"><a class="header-anchor" href="#父子组件数据传递" aria-hidden="true">#</a> 父子组件数据传递</h2><p>父组件向子组件共享数据使用<strong>自定义属性 props</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">//父组件</span>
  <span class="token operator">&lt;</span>Son <span class="token operator">:</span>msg<span class="token operator">=</span><span class="token string">&quot;message&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Son<span class="token operator">&gt;</span>
 <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;hello vue&#39;</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
  <span class="token comment">//子组件</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：不用<code>v-bind</code>传递时，相当于直接传递字符串&#39;message&#39;，</p><p>用<code>:</code>才能把&#39;hello vue&#39;传递给子组件 子组件向父组件共享数据使用<strong>自定义事件<code>$emit</code></strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">//子组件</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">add</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;numChange&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//父组件</span>
  <span class="token operator">&lt;</span>Son @numChange<span class="token operator">=</span><span class="token string">&#39;getNewNum&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">newNum</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token function">getNewNum</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>newNum <span class="token operator">=</span> val
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vue-的组件通信总结" tabindex="-1"><a class="header-anchor" href="#vue-的组件通信总结" aria-hidden="true">#</a> Vue 的组件通信总结</h2><h3 id="_1-props-emit-常用" tabindex="-1"><a class="header-anchor" href="#_1-props-emit-常用" aria-hidden="true">#</a> 1.<code>props/$emit</code>(常用)</h3><p><code>props/$emit</code>属性可以实现父子组件之间的通信，父组件可以通过<strong>自定义属性 props</strong>向子组件传递数据，子组件可以通过<strong>自定义事件$emit</strong>向父组件传递数据。</p><h3 id="_2-emit-on-各种组件关系" tabindex="-1"><a class="header-anchor" href="#_2-emit-on-各种组件关系" aria-hidden="true">#</a> 2.<code>$emit/$on</code>(各种组件关系)</h3><p>eventBus 事件总线<code>$emit/$on</code>适用于<strong>各种组件</strong>之间传递数据。步骤：</p><ol><li>新建 event-bus.js 模块文件，向外共享一个 Vue 实例对象</li><li>在数据的发送方，使用自定义事件，调用<code>bus.$emit(&#39;事件名称&#39;,发送的数据)</code></li><li>在数据的接收方，组测自定义事件，<code>bus.$on(&#39;自定义事件名称&#39;,事件处理函数)</code></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//eventBus.js</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//Left.vue,发送方</span>
<span class="token keyword">import</span> bus <span class="token keyword">from</span> <span class="token string">&#39;eventBus.js&#39;</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">send</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;share&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token comment">//Right.vue，接受方</span>
<span class="token keyword">import</span> bus <span class="token keyword">from</span> <span class="token string">&#39;eventBus.js&#39;</span>
<span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;share&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> val
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者将事件总线添加到 Vue 的原型。</p><ol><li><p>在 Vue 的原型上添加一个<code>$bus</code> 的属性让其等于一个新的 Vue 实例</p></li><li><p>发射全局监听事件，和常规<code>$emit</code> 一样也可以传递参数</p></li><li><p>监听全局事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//在vue中的main.js文件中</span>
<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//或者</span>
<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

<span class="token comment">//数据发送方</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&quot;itemImageLoad&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//数据接收方</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&quot;itemImageLoad&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_3-ref-refs-常用" tabindex="-1"><a class="header-anchor" href="#_3-ref-refs-常用" aria-hidden="true">#</a> 3.<code>ref/$refs</code>(常用)</h3><p><code>ref/$refs</code>可以实现<strong>父子组件</strong>之间的通信。</p><p>ref 属性使用到组件上，就指向组件引用的实例，可以通过实例方法组件的属性和方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 子组件</span>
<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
  <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 父组件</span>
<span class="token operator">&lt;</span>Son ref<span class="token operator">=</span><span class="token string">&quot;child&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Son<span class="token operator">&gt;</span>
<span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>child<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token comment">//hello</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>child<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//world</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-parent-children" tabindex="-1"><a class="header-anchor" href="#_4-parent-children" aria-hidden="true">#</a> 4.<code>$parent/$children</code></h3><p>使用<code>$parent</code>可以让组件访问父组件的实例，使用<code>$children</code>可以让组件访问子组件的实例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//在子组件中，$parent是一个对象 this.$parent.msg</span>
<span class="token comment">//在父组件中，$children是一个数组 this.$children[0].msg</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-attrs-listeners" tabindex="-1"><a class="header-anchor" href="#_5-attrs-listeners" aria-hidden="true">#</a> 5.<code>$attrs/$listeners</code></h3><p><code>$attrs和$listeners</code>使用于<strong>父子、隔代组件之间的通信</strong>。</p><ul><li><code>$attrs</code>属性继承了父组件的所有属性（除了 props 传递的属性,class,style）</li><li><code>$listeners</code>是一个对象，包含了父组件的各种事件方法。可以使用<code>v-bind=&#39;$attr&#39;</code>继续向子组件中传递属性。</li></ul><h3 id="_6-provide-inject" tabindex="-1"><a class="header-anchor" href="#_6-provide-inject" aria-hidden="true">#</a> 6.<code>provide/inject</code></h3><p>依赖注入<code>provide/inject</code>可以用于<strong>父子、隔代组件的通信</strong>。provide 和 inject 是 Vue 的钩子函数，provide 用来发送数据，inject 使用接收数据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//在父组件中，provide书写方式和data一样</span>
<span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token comment">//在子组件中</span>
<span class="token literal-property property">inject</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：provide 提供的属性有点像一个全局的变量，有可能造成变量的污染，而且依赖注入提供的属性是<strong>非响应式</strong>的。</p><h3 id="_7-vuex-常用" tabindex="-1"><a class="header-anchor" href="#_7-vuex-常用" aria-hidden="true">#</a> 7.vuex(常用)</h3><p>当数据比较复杂时，可以使用 vuex，将一些公共的数据抽离出来，作为全局变量进行管理，其他组件可以对这个公共数据进行读写操作。</p><h3 id="_8-离线存储-常用" tabindex="-1"><a class="header-anchor" href="#_8-离线存储-常用" aria-hidden="true">#</a> 8.离线存储(常用)</h3><p>可以使用浏览器的离线存储机制</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//组件a</span>
<span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;a数据&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//组件b</span>
<span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","12_vue_props.html.vue"]]);export{r as default};
