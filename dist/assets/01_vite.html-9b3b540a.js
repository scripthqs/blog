import{_ as p,r as e,o,c,b as n,e as s,d as t,f as i}from"./app-10c4e004.js";const l={},u=n("h1",{id:"vite",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vite","aria-hidden":"true"},"#"),s(" vite")],-1),r={href:"https://cn.vitejs.dev/",target:"_blank",rel:"noopener noreferrer"},d=i(`<p>特点：启动速度快</p><p>构建代码的底层是通过 rollup 实现的</p><ul><li>webpack 支持多种模块化代码，他必须要统一模块化，意味着他需要将所有依赖读一遍。</li><li>vite 基于 es modules，webpack 侧重兼容性</li></ul><h2 id="构建工具" tabindex="-1"><a class="header-anchor" href="#构建工具" aria-hidden="true">#</a> 构建工具</h2><ul><li>处理 typescript</li><li>react/vue</li><li>less/sass/component-style: less-loader,sass-loader</li><li>语法降级 babel</li><li>体积优化 uglifyJs</li></ul><h2 id="浏览器支持-esm" tabindex="-1"><a class="header-anchor" href="#浏览器支持-esm" aria-hidden="true">#</a> 浏览器支持 ESM</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token number">1</span>、天然支持 html、css、js 文件
<span class="token number">2</span>、对于js文件
  只加载 <span class="token string">&quot;/&quot;</span>、 <span class="token string">&quot;./&quot;</span>、<span class="token string">&quot;../&quot;</span>
  不识别 import、require （浪费性能、避免递归查询）
<span class="token number">3</span>、webapck
  a、将 EMS、commonjs 都转为 webpack.require() 自己的模式加载
  b、webpack 先进行整体的构建，再开启一个服务器
  c、vite 先启动一个服务器，再依据入口依次加载依赖模块
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vite 加载非相对路径：esm、commonjs</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span>、vite会做路径补全：
  <span class="token operator">/</span>node_modules<span class="token operator">/</span><span class="token punctuation">.</span>vite<span class="token operator">/</span>deps<span class="token operator">/</span>lodash<span class="token punctuation">.</span>js
<span class="token number">2</span>、依赖预构建
  a、使用 esbuild 都转化为 esm 的方式，放到 <span class="token operator">/</span>node_modules<span class="token operator">/</span>vite<span class="token operator">/</span>deps<span class="token operator">...</span>
  b、内部使用时，直接引入 <span class="token operator">/</span>node_modules<span class="token operator">/</span><span class="token punctuation">.</span>vite<span class="token operator">/</span>deps<span class="token operator">...</span>
  c、解决了网络多包传输的问题：common、esm 直接转 <span class="token keyword">var</span> <span class="token operator">...</span>
    例如：<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token keyword">default</span> <span class="token keyword">as</span> a<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span>
    转为：<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create-vite-和-vite" tabindex="-1"><a class="header-anchor" href="#create-vite-和-vite" aria-hidden="true">#</a> create-vite 和 vite</h2><p>create-vite 内置 vite</p><h2 id="依赖预加载" tabindex="-1"><a class="header-anchor" href="#依赖预加载" aria-hidden="true">#</a> 依赖预加载</h2><p>vite 找到对应的依赖，然后调用 esbuild（对 js 语法进行处理的库），将其他规范代码转换成 esmodule 规范，然后放在当前目录下的 node_modules/.vite/deps</p><ol><li>不同的第三方包会有不同的导出格式</li><li>对路径的出来可以直接使用.vite/deps，方便路径重写</li><li>网络多包传输的性能问题(原生 esmodule 规范不敢支持 node_modules 原因)，有了依赖预构建无论多少额外 export 和 import，vite 都会尽可能进行集成，最后只生成一个或几个模块</li></ol><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h2><p>在 vite.config.js 中，即 node 服务端</p><p>内置 dotenv 第三方库会自动读取.env 文件，并解析这个文件对应的环境变量，并注入到 process 对象下（考虑到和其他配置冲突，不会直接注入到 process 下）</p><ul><li>root</li><li>envDir:用来配置当前环境变量的文件地址</li></ul><p>Vite 默认是不加载 .env 文件的，可以调用 vite 的 loadEnv 来手动确认 env 文件，process.cwd 方法：返回当前 node 进程的工作目录</p><ul><li>.env：所有环境都用的</li><li>.env.development:开发环境，vite 默认取名 development</li><li>.env.product:生产环境，vite 默认取名 product</li></ul><p>在客户端，vite 会将环境变量注入到 i<wbr>mport.meta.env 里面去，但是 vite 做了一个拦截，保护隐私性变量。必须要以 VITE 开头，才会注入到客户端去，如果我们想要改这个前缀，可以使用 envPrefix 配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 根据当前工作目录中的 \`mode\` 加载 .env 文件</span>
<span class="token comment">// 设置第三个参数为 &#39;&#39; 来加载所有环境变量，而不管是否有</span>
<span class="token comment">// \`VITE_\` 前缀。</span>
<span class="token keyword">const</span> env <span class="token operator">=</span> <span class="token function">loadEnv</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vite-处理-css-模块" tabindex="-1"><a class="header-anchor" href="#vite-处理-css-模块" aria-hidden="true">#</a> vite 处理 css 模块</h2><ol><li>读取引入的 style.css</li><li>使用 fs 模块去读取 style.css 中文件内容</li><li>直接创建一个 style 标签，将 style.css 的内容直接 copy 到 style 标签中</li><li>将 style 标签插入到 index.html 的 head 中</li><li>将 css 内容直接替换为 js 脚本（方便热更新或者 css 模块化），同时设置 content-type 为 js，让浏览器以 js 脚本形式来执行该 css</li></ol><p>cssmodule 的原理</p><ul><li>componentA.module.css</li><li>componentB.module.css</li></ul><ol><li>module.css 是一种约定，代表开启 css 模块化</li><li>将所有类名进行一定规则的替换(<code>footer -&gt; _footer_i22st_1</code>)</li><li>同时创建一个映射对象<code>{footer:&#39;_footer_i22st_1&#39;}</code></li><li>同时将替换后的内容射到 style 标签中放到 head 标签中</li><li>将 componentA.module.css 内容完全抹除，替换成 js 脚本</li><li>将创建的映射对象在脚本中默认导出</li></ol><p>vite.config.js 通过 css 属性控制 vite 对 css 的处理</p><p>css.module:css 模块化处理</p><ul><li>localConvention:模块类名格式</li><li>scopeBehaviour：local 模块化 global 全局化</li><li>generateScopedName:自定义生成的类名格式，可以是函数</li><li>hashPrefix:自定义生成的类名前缀</li><li>globalModulePaths:指定全局样式的路径</li></ul><p>css.preprocessorOptions：css 预处理器配置</p><ul><li>less.math:启用数学运算</li><li>globalVars: 全局变量</li></ul><p>css.devSourcemap:文件索引</p><ul><li>代码被压缩或者编译过，程序报错，不会产生正确的错误位置信息，如果设置了 sourceMap 就会生成一个索引文件</li></ul><h2 id="postcss-后处理器" tabindex="-1"><a class="header-anchor" href="#postcss-后处理器" aria-hidden="true">#</a> postcss 后处理器</h2><p>保证 css 执行是万无一失的</p><ol><li>处理 css 的兼容性</li><li>前缀补全</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i postcss<span class="token operator">-</span>cli postcss <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>css.postcss:一般需要配置 plugins</p><ul><li>postcss-preset-env:支持 css 变量和未来的 css 语法，自动补全</li></ul><h2 id="vite-处理静态资源" tabindex="-1"><a class="header-anchor" href="#vite-处理静态资源" aria-hidden="true">#</a> vite 处理静态资源</h2><p>vite 图片和 json 、svg 都可以直接导入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// tree shaking 打包工具自动帮助移除没有用到的方法和变量</span>
<span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">&quot;lodash&quot;</span><span class="token punctuation">;</span>
_<span class="token punctuation">.</span>deepClone<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> deepClone <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;lodash&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// json也可以解构导入</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;test.json&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>resolve.alias:别名原理就是做一个字符串替换</p><h2 id="vite-对生产环境静态资源的处理" tabindex="-1"><a class="header-anchor" href="#vite-对生产环境静态资源的处理" aria-hidden="true">#</a> vite 对生产环境静态资源的处理</h2><p>打包的静态资源资源文件为什么要 hash？浏览器缓存机制，静态资源名字只要不改，就会直接用缓存的。刷新页面会读取缓存。</p><p>hash 算法：将一串字符串经过运算得到一个新的乱码字符串，利用 hash 算法就可以更好的控制浏览器缓存机制</p><h2 id="vite-插件" tabindex="-1"><a class="header-anchor" href="#vite-插件" aria-hidden="true">#</a> vite 插件</h2><p>vite 插件的本质是一个返回插件对象的函数，对象中包含各种生命周期钩子。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">myPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">myPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;my-plugin&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 插件名，必填</span>
    <span class="token comment">// 配置钩子</span>
    <span class="token function">config</span><span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> env</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 修改 Vite 配置</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 解析模块路径</span>
    <span class="token function">resolveId</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 自定义模块解析</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 加载文件内容</span>
    <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 自定义文件加载</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 转换文件内容</span>
    <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 代码转换</span>
      <span class="token keyword">return</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 其他钩子...</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插件返回值:可以返回字符串（转换后的代码）、对象（包含 code、map 等）、或 null（不处理）。</p><p>插件顺序:可以通过 enforce: &#39;pre&#39; | &#39;post&#39; 控制插件执行顺序。</p><p>vite-aliases：自动生成别名，检测 src 在内的所有文件夹，生成别名。插件需要在 vite 执行配置文件之前去改写配置文件。vite 插件必须返回 vite 一个配置对象，为了让插件扩展性更高，设计成函数。</p><p>vite 内置了很多插件</p><h2 id="vite-代码分割" tabindex="-1"><a class="header-anchor" href="#vite-代码分割" aria-hidden="true">#</a> vite 代码分割</h2><p>vite 的代码分割主要是依赖底层的 rollup 构建能力，通过动态导入 import 和手动配置 build.rollupOptions.output.manualChunks</p><p>只要你在代码中使用了 import() 语法，Vite 会自动把被动态导入的模块单独打包成一个 chunk，实现按需加载。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 自动代码分割</span>
button<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./moduleA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mod</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    mod<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>手动分割：manualChunks</p><p>在 vite.config.js 里配置 build.rollupOptions.output.manualChunks，可以自定义如何拆分 chunk，比如把第三方库单独打包。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rollupOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">manualChunks</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 每个依赖单独打包</span>
            <span class="token keyword">return</span> id<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;node_modules/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义打包脚本" tabindex="-1"><a class="header-anchor" href="#自定义打包脚本" aria-hidden="true">#</a> 自定义打包脚本</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// scripts/build.js</span>
<span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&quot;fs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> spawn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;child_process&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// spawn 适合长时间运行、输出较多的命令（如打包、启动服务），输出实时显示，不会有内存限制。</span>
<span class="token comment">// exec 适合短命令，输出会缓存在内存里，命令结束后一次性返回，如果输出内容太多可能导致内存溢出</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> fileURLToPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> args <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;传入参数:&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> envMap <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token constant">VITE_API_URL</span><span class="token operator">:</span> <span class="token string">&quot;https://api.xxx.com&quot;</span><span class="token punctuation">,</span>
    <span class="token constant">VITE_APP_TITLE</span><span class="token operator">:</span> <span class="token string">&quot;生产&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token constant">VITE_API_URL</span><span class="token operator">:</span> <span class="token string">&quot;https://api.test.com&quot;</span><span class="token punctuation">,</span>
    <span class="token constant">VITE_APP_TITLE</span><span class="token operator">:</span> <span class="token string">&quot;测试&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 兼容 __dirname</span>
<span class="token keyword">const</span> __filename <span class="token operator">=</span> <span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> __dirname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 读取环境名</span>
<span class="token keyword">const</span> envKey <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> envVars <span class="token operator">=</span> envMap<span class="token punctuation">[</span>envKey<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>envVars<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">未找到环境变量配置: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>envKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 生成 .env 文件内容</span>
<span class="token keyword">let</span> envContent <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>envVars<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  envContent <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 写入 .env 文件</span>
<span class="token keyword">const</span> envPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../.env.temp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>envPath<span class="token punctuation">,</span> envContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>envContent<span class="token punctuation">,</span> <span class="token string">&quot;.env 文件已生成:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 判断操作系统，选择命令</span>
<span class="token keyword">const</span> isWin <span class="token operator">=</span> process<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token string">&quot;win32&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> npxCmd <span class="token operator">=</span> isWin <span class="token operator">?</span> <span class="token string">&quot;npx.cmd&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;npx&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 调用 vite 打包，指定 mode 为 temp</span>
<span class="token keyword">const</span> vite <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span>npxCmd<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--mode&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;temp&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">cwd</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">stdio</span><span class="token operator">:</span> <span class="token string">&quot;inherit&quot;</span><span class="token punctuation">,</span> <span class="token comment">//子进程的输出（如打包进度、日志）会直接显示在当前终端。</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

vite<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">打包进程退出，错误码: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 打包成功后的业务逻辑</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span>envPath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除临时环境文件</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;.env.temp 文件已删除&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;.env.temp 删除失败:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jsconfig-js" tabindex="-1"><a class="header-anchor" href="#jsconfig-js" aria-hidden="true">#</a> jsconfig.js</h2>`,64),k={href:"https://code.visualstudio.com/docs/languages/jsconfig",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"用于配置 VS Code（或部分支持 JavaScript 项目的工具）对项目的智能提示、路径别名和代码跳转等功能。",-1);function m(b,h){const a=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("vite 官方文档："),n("a",r,[s("https://cn.vitejs.dev/"),t(a)])]),d,n("p",null,[n("a",k,[s("https://code.visualstudio.com/docs/languages/jsconfig"),t(a)])]),v])}const f=p(l,[["render",m],["__file","01_vite.html.vue"]]);export{f as default};
