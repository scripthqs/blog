import{_ as n,o as s,c as a,f as e}from"./app-c6441670.js";const t={},p=e(`<h1 id="node-使用-mysql-数据库" tabindex="-1"><a class="header-anchor" href="#node-使用-mysql-数据库" aria-hidden="true">#</a> Node 使用 MySQL 数据库</h1><p>在 Node 的代码中执行 SQL 语句可以借助两个库：</p><ul><li>mysql：最早的 Node 连接 MySQL 的数据库驱动</li><li>mysql2：在 mysql 的基础之上，进行了很多的优化、改进</li></ul><p>mysql2 兼容 mysql 的 API，并且提供了一些附加功能，支持 promise</p><h2 id="使用-mysql2" tabindex="-1"><a class="header-anchor" href="#使用-mysql2" aria-hidden="true">#</a> 使用 mysql2</h2><p>安装 mysql2</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> mysql2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>创建连接（通过 createConnection），并且获取连接对象</li><li>执行 SQL 语句即可（通过 query）</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mysql2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 1.创建一个连接(连接上数据库)</span>
<span class="token keyword">const</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;xxxxx&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&quot;test_db&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.执行操作语句, 操作数据库</span>
<span class="token keyword">const</span> statement <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM \`students\`;&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// structure query language: DDL/DML/DQL/DCL</span>
connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> values<span class="token punctuation">,</span> fields</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;查询失败:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 查看结果</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// console.log(fields)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="prepared-statement" tabindex="-1"><a class="header-anchor" href="#prepared-statement" aria-hidden="true">#</a> Prepared Statement</h2><p>Prepared Statement（预编译语句）</p><ul><li>提高性能：将创建的语句模块发送给 MySQL，然后 MySQL 编译（解析、优化、转换）语句模块，并且存储它但是不执行，真正执行时会给?提供实际的参数才会执行；就算多次执行，也只会编译一次，所以性能是更高的</li><li>防止 SQL 注入：：之后传入的值不会像模块引擎那样就编译，那么一些 SQL 注入的内容不会被执行；or 1 = 1 不会被执行</li></ul><h2 id="connection-pools" tabindex="-1"><a class="header-anchor" href="#connection-pools" aria-hidden="true">#</a> Connection Pools</h2><p>Connection Pools 连接池</p><ul><li>可以在需要的时候自动创建连接，并且创建的连接不会被销毁，会放到连接池中，后续可以继续使用</li><li>可以在创建连接池的时候设置 LIMIT，也就是最大创建个数</li></ul><h2 id="promise-方式" tabindex="-1"><a class="header-anchor" href="#promise-方式" aria-hidden="true">#</a> Promise 方式</h2><p>mysql2 同样是支持的 promise，以及 async 和 await</p>`,17),o=[p];function l(c,i){return s(),a("div",null,o)}const u=n(t,[["render",l],["__file","MySQL_04.html.vue"]]);export{u as default};
