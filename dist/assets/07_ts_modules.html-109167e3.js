import{_ as p,r as o,o as c,c as l,b as n,e as s,d as e,f as t}from"./app-007a9be1.js";const i={},r=t(`<h1 id="typescript-模块化" tabindex="-1"><a class="header-anchor" href="#typescript-模块化" aria-hidden="true">#</a> TypeScript 模块化</h1><p>TypeScript 最主要使用的模块化方案是 ES Module</p><h2 id="非模块" tabindex="-1"><a class="header-anchor" href="#非模块" aria-hidden="true">#</a> 非模块</h2><p>JavaScript 规范声明任何没有 export 的 js 文件都应该被认为是一个脚本，而非一个模块。</p><ul><li>在一个脚本文件中，变量和类型会被声明在共享的全局作用域，将多个输入文件合并成一个输出文件，或者在 HTML 使用多 个 <code>&lt;script&gt;</code> 标签加载这些文件。</li></ul><p>如果你有一个文件，现在没有任何 import 或者 export，但是你希望它被作为模块处理，添加这行代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 把js文件改成一个没有导出任何内容的模块</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内置类型的导入" tabindex="-1"><a class="header-anchor" href="#内置类型的导入" aria-hidden="true">#</a> 内置类型的导入</h2><p>需要使用 type 前缀 ，表明被导入的是一个类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> IDType<span class="token punctuation">,</span> IPerson <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./utils/type&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="类型的查找" tabindex="-1"><a class="header-anchor" href="#类型的查找" aria-hidden="true">#</a> 类型的查找</h2><p>有一些类型，并不是我们自己编写的</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> imageEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;image&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLImageElement<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>HTMLImageElement 并不是我们自己编写的，但是又这个类型，是因为 ts 有自己的类型管理和查找规则。</p><p>typescript 有 3 个地方查找类型声明：</p><ol><li>内置类型声明</li><li>外部定义类型声明(第三方库，Vue、React、axios)</li><li>自己定义类型声明</li></ol><h3 id="d-ts文件" tabindex="-1"><a class="header-anchor" href="#d-ts文件" aria-hidden="true">#</a> <code>.d.ts</code>文件</h3><p><code>.d.ts</code>文件用来做类型的声明(declare)，称之为类型声明或者类型定义文件。</p><ul><li>该文件仅仅用来做类型检测，告知 typescript 我们有哪些类型</li></ul><h3 id="内置类型声明" tabindex="-1"><a class="header-anchor" href="#内置类型声明" aria-hidden="true">#</a> 内置类型声明</h3><p>内置类型声明是 ts 自带的，帮助我们内置了 js 运行时的一些标准化 API 的声明文件</p><ul><li>包括比如 Function、String、Math、Date 等内置类型</li><li>包括运行环境中的 DOM API，比如 Window、Document 等</li></ul><p>内置类型声明通常在我们安装 typescript 环境中带有，这些声明文件名称类似 <code>lib.[something].d.ts</code></p><p>可以通过 target 和 lib 来决定哪些内置类型声明是可以使用的</p><h3 id="外部定义类型声明" tabindex="-1"><a class="header-anchor" href="#外部定义类型声明" aria-hidden="true">#</a> 外部定义类型声明</h3><p>外部类型声明通常是我们使用一些库（比如第三方库）时，需要的一些类型声明，通常有两种类型声明方式</p>`,26),d=n("li",null,[n("p",null,"在自己库中进行类型声明（编写.d.ts 文件），比如 axios")],-1),u=n("p",null,"通过社区的一个公有库 DefinitelyTyped 存放类型声明文件",-1),k={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.typescriptlang.org/dt/search?search=",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,[s("比如我们安装 react 的类型声明： "),n("code",null,"npm i @types/react --save-dev")],-1),b=t(`<p>有些情况下需要自己来定义声明文件</p><ul><li>我们使用的第三方库是一个纯的 JavaScript 库，没有对应的声明文件</li><li>我们给自己的代码中声明一些类型，方便在其他地方直接进行使用</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//假设 lodash 没有对应的声明文件</span>
<span class="token comment">// index.d.ts</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;lodash&quot;</span> <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//index.ts</span>
<span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">&quot;lodash&quot;</span><span class="token punctuation">;</span>
_<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此时vscode中输入_就会有提示join的方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="declare-声明" tabindex="-1"><a class="header-anchor" href="#declare-声明" aria-hidden="true">#</a> declare 声明</h2><p>我们可以使用 declare 声明模块、变量、文件、空间等。</p><ul><li>平时使用的代码中用到的类型, 直接在当前位置进行定义或者在业务文件夹某一个位置编写一个类型文件即可，不一定需要使用 declare</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 声明模块</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;lodash&quot;</span> <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 为自己的 变量/函数/类 定义类型声明</span>
<span class="token keyword">declare</span> <span class="token keyword">const</span> TName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">const</span> TAge<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">const</span> THeight<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 作为一个第三方库为其他开发者提供类型声明文件 .d.ts =&gt; axios.d.ts</span>

<span class="token comment">// 声明文件模块</span>

<span class="token comment">// 在开发vue的过程中，默认是不识别我们的.vue文件的，需要对其进行声明</span>
<span class="token comment">// declare module &quot;*.vue&quot;;</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;*.vue&quot;</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> DefineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> component<span class="token operator">:</span> DefineComponent<span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> component<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 开发中我们使用了 jpg 这类图片文件，默认typescript也是不支持的，也需要对其进行声明</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;*.png&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;*.jpg&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;*.jpeg&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;*.svg&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;&gt;&lt;/script&gt;</span>
<span class="token comment">// 通过cdn引入时，声明成模块(不合适)</span>
<span class="token comment">// 声明命名空间</span>
<span class="token keyword">declare</span> <span class="token keyword">namespace</span> $ <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>settings<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function y(h,g){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,n("ol",null,[d,n("li",null,[u,n("ul",null,[n("li",null,[n("a",k,[s("https://github.com/DefinitelyTyped/DefinitelyTyped/"),e(a)])]),n("li",null,[n("a",m,[s("https://www.typescriptlang.org/dt/search?search="),e(a)])]),v])])]),b])}const f=p(i,[["render",y],["__file","07_ts_modules.html.vue"]]);export{f as default};
