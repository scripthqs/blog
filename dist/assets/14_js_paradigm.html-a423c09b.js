import{_ as n,o as s,c as a,f as p}from"./app-f4e03468.js";const t={},e=p(`<h1 id="编程范式" tabindex="-1"><a class="header-anchor" href="#编程范式" aria-hidden="true">#</a> 编程范式</h1><p>编程范式是一种编程风格，分为命令式(过程式)、声明式(函数式)、面向对象等多种范式。</p><p>JavaScript 是一种“多范式”语言，可以使用不用的范式进行编程。</p><h2 id="命令式-面向过程" tabindex="-1"><a class="header-anchor" href="#命令式-面向过程" aria-hidden="true">#</a> 命令式(面向过程)</h2><p>命令式编程由一组详细的指令组成，让计算机以一定的顺序执行。之所以被称作“命令式”是因为开发者以非常具体的方式，准确地规定计算机必须做什么。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用命令式编程，获取数组中大于 5 的数字</span>
<span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [ 6, 7, 8, 9 ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>告诉程序要遍历整个数组的每一个元素，并且和 5 来比较，如果这个元素的值大于 5，就将它加入到另一个数组。</p><p>面向过程编程(过程式编程)，是命令式编程的派生，在其基础上添加了函数特性。先分析好具体的步骤，然后按照步骤(定义一个个函数)，一步步解决问题。</p><p>面向过程编程性能比面向对象高，适合跟硬件联系紧密的东西，例如单片机就是采用面向过程编程。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用命令式编程做蛋糕</span>
<span class="token number">1</span><span class="token operator">-</span> Pour flour <span class="token keyword">in</span> a bowl <span class="token comment">//将面粉倒入碗中</span>
<span class="token number">2</span><span class="token operator">-</span> Pour a couple eggs <span class="token keyword">in</span> the same bowl <span class="token comment">//在碗中打入两个鸡蛋</span>
<span class="token number">3</span><span class="token operator">-</span> Pour some milk <span class="token keyword">in</span> the same bowl <span class="token comment">//倒入一些牛奶</span>
<span class="token number">4</span><span class="token operator">-</span> Mix the ingredients <span class="token comment">//将它们混合</span>
<span class="token number">5</span><span class="token operator">-</span> Pour the mix <span class="token keyword">in</span> a mold <span class="token comment">//将混合物倒入模具</span>
<span class="token number">6</span><span class="token operator">-</span> Cook <span class="token keyword">for</span> <span class="token number">35</span> minutes <span class="token comment">//烤35分钟</span>
<span class="token number">7</span><span class="token operator">-</span> Let chill <span class="token comment">//冷却</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="声明式-函数式" tabindex="-1"><a class="header-anchor" href="#声明式-函数式" aria-hidden="true">#</a> 声明式(函数式)</h2><p>声明式编程是通过描述要做什么（what to do）来解决问题，而非像命令式编程那样明确指定如何实现（how to do）。</p><p>声明式编程通常使用函数式编程来实现，看起来更加简洁和易读，在函数式编程中，函数被认为是一等公民，意味着可以将它们赋值给变量，作为参数传入其他函数，或者由函数返回。</p><p>纯函数的概念：纯函数指的是输出仅取决于输入的函数。如果输入相同，输出的结果始终保持不变，另外纯函数没有副作用（对函数外部环境的改变）。</p><p>函数式编程，隐藏了复杂性，直接告诉计算机需要什么样的结果。函数式编程在函数中，还是使用了原来命令式编程的模式(这是必然，计算机最终还是依靠命令式来执行具体的指令才能解决问题)。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.使用命令式编程，需要使用一个result变量来存储函数结果，这是一种副作用</span>
<span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 外部变量</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [ 6, 7, 8, 9 ]</span>
<span class="token comment">//2.改成函数式编程</span>
<span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">filterNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 内部变量</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">filterNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [ 6, 7, 8, 9 ]</span>
<span class="token comment">//这样写可以确保函数不会更改任何作用域以外的东西。只创造了一个处理自己信息的变量，一旦执行结束，变量也就被回收</span>
<span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//3.进一步的，直接将filterNums这种通用的函数改进成filter函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [ 6, 7, 8, 9 ]</span>
<span class="token comment">// 只需要告诉计算机我们需要过滤（filter），过滤的条件是（num &gt; 5）</span>
<span class="token comment">// JavaScript 的 filter、map、reduce 和 sort 函数都是函数式编程的例子。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算机实际上还是循环遍历了整个数组，但是不需要开发人员直接写出这个指令。声明式编程实际上做的是在开发者面前隐藏代码的复杂性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//使用函数式编程做蛋糕</span>
<span class="token comment">//1.配料</span>
<span class="token keyword">function</span> <span class="token function">pourIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token number">1</span><span class="token operator">-</span> Pour flour <span class="token keyword">in</span> a bowl
    <span class="token number">2</span><span class="token operator">-</span> Pour a couple eggs <span class="token keyword">in</span> the same bowl
    <span class="token number">3</span><span class="token operator">-</span> Pour some milk <span class="token keyword">in</span> the same bowl
<span class="token punctuation">}</span>
<span class="token comment">//2.混合并使用模具</span>
<span class="token keyword">function</span> <span class="token function">mixAndTransferToMold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token number">4</span><span class="token operator">-</span> Mix the ingredients
    <span class="token number">5</span><span class="token operator">-</span> Pour the mix <span class="token keyword">in</span> a mold
<span class="token punctuation">}</span>
<span class="token comment">//3.烹饪放凉</span>
<span class="token keyword">function</span> <span class="token function">cookAndLetChill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token number">6</span><span class="token operator">-</span> Cook <span class="token keyword">for</span> <span class="token number">35</span> minutes
    <span class="token number">7</span><span class="token operator">-</span> Let chill
<span class="token punctuation">}</span>
<span class="token function">pourIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">mixAndTransferToMold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">cookAndLetChill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h2><p>面向对象编程以对象功能来划分问题，而不是步骤。 面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，更加灵活，易于维护。 面向对象的编程思想是对代码和数据进行封装，并以对象调用的方式，对外提供统一的调用接口。</p><ul><li>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工，面向对象编程适合多人合作。</li><li>JS 中的面向对象，是基于原型的面向对象。ES6 中，新引入了类(Class)和继承(Extends)来面向对象。</li><li>JS 中的对象(Object)是依靠构造器(constructor)和原型(prototype)构造出来的。</li><li>易维护、易复用、易拓展。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//使用面向对象的思想烤蛋糕</span>
<span class="token comment">//1.假设有一个主厨(叫厨神)，一个助理厨师(叫小福贵)，他们分工做蛋糕</span>

<span class="token keyword">class</span> <span class="token class-name">Cook</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">minAndBake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token number">4</span><span class="token operator">-</span> Mix the ingredients <span class="token comment">//将它们混合</span>
    <span class="token number">5</span><span class="token operator">-</span> Pour the mix <span class="token keyword">in</span> a mold <span class="token comment">//将混合物倒入模具</span>
    <span class="token number">6</span><span class="token operator">-</span> Cook <span class="token keyword">for</span> <span class="token number">35</span> minutes <span class="token comment">//烤35分钟</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">AssistantCook</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">pourIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//倒入配料</span>
    <span class="token number">1</span><span class="token operator">-</span> Pour flour <span class="token keyword">in</span> a bowl
    <span class="token number">2</span><span class="token operator">-</span> Pour a couple eggs <span class="token keyword">in</span> the same bowl
    <span class="token number">3</span><span class="token operator">-</span> Pour some milk <span class="token keyword">in</span> the same bowl
  <span class="token punctuation">}</span>
  <span class="token function">chillTheCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//放凉</span>
    <span class="token number">7</span><span class="token operator">-</span> Let chill
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 将每一个类实例化</span>
<span class="token keyword">const</span> cookGod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cook</span><span class="token punctuation">(</span><span class="token string">&#39;cookGod&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> littleRich <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AssistantCook</span><span class="token punctuation">(</span><span class="token string">&#39;littleRich&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 调用实例的方法</span>
littleRich<span class="token punctuation">.</span><span class="token function">pourIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
cookGod<span class="token punctuation">.</span><span class="token function">mixAndBake</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
littleRich<span class="token punctuation">.</span><span class="token function">chillTheCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","14_js_paradigm.html.vue"]]);export{k as default};
