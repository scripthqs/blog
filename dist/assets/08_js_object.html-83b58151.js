import{_ as a,o as n,c as s,f as e}from"./app-007a9be1.js";const l={},o=e(`<h1 id="对象-object" tabindex="-1"><a class="header-anchor" href="#对象-object" aria-hidden="true">#</a> 对象 (Object)</h1><p>万物皆对象，对象是一个具体的事物，除了那几种基本数据类型，就全都是对象</p><h2 id="对象的简介" tabindex="-1"><a class="header-anchor" href="#对象的简介" aria-hidden="true">#</a> 对象的简介</h2><p>对象是一组无序的相关<strong>属性</strong>和<strong>方法</strong>的集合。</p><ul><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li><li>方法：事物的行为，在对象中用方法来表示（常用动词）</li></ul><p>对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。</p><p>对象的作用是封装信息。比如 Student 类里可以封装学生的姓名、年龄和成绩。</p><h2 id="对象的分类" tabindex="-1"><a class="header-anchor" href="#对象的分类" aria-hidden="true">#</a> 对象的分类</h2><ul><li>内置对象 <ul><li>由 ES 标准中定义的对象，在任何的 ES 实现中都可以使用。</li><li>比如：Object、Math、Date、String、Array、Number、Boolean、Function 等。</li></ul></li><li>宿主对象 <ul><li>由 JS 运行环境提供的对象，目前来讲主要是浏览器提供的对象。</li><li>比如 BOM DOM，比如：<code>console</code>、<code>document</code></li></ul></li><li>自定义对象 <ul><li>由开发人员自己创建的对象</li><li>通过 new 关键字创建出来的对象实例，都是属于对象的类型。</li></ul></li></ul><h2 id="创建对象" tabindex="-1"><a class="header-anchor" href="#创建对象" aria-hidden="true">#</a> 创建对象</h2><h3 id="对象字面量创建对象" tabindex="-1"><a class="header-anchor" href="#对象字面量创建对象" aria-hidden="true">#</a> 对象字面量创建对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用对象字面量创建对象时，可以直接指定对象中的属性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
  <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用构造函数来创建对象" tabindex="-1"><a class="header-anchor" href="#使用构造函数来创建对象" aria-hidden="true">#</a> 使用构造函数来创建对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>使用 new 关键字调用的函数，是构造函数 constructor。</li><li>构造函数是专门用来创建对象的函数。</li></ul><p>添加属性</p><ul><li><code>对象.属性名 = 属性值;</code></li></ul><p>删除属性</p><ul><li><code>delete 对象.属性名;</code></li></ul><h2 id="调用对象" tabindex="-1"><a class="header-anchor" href="#调用对象" aria-hidden="true">#</a> 调用对象</h2><ul><li>对象.属性名</li><li>对象[&#39;属性名&#39;]，注意方括号里属性必须加引号</li><li>对象.方法名()，注意方法后面一定要加括号</li></ul><p>如果使用特殊的属性名，不能采用<code>.</code>的形式来操作，而需要</p><ul><li><code>对象[&#39;属性名&#39;] = 属性值</code></li><li>读取也需要同样的方式</li><li>使用这种方式操作属性更加灵活，<code>[]</code>间可以直接传递一个变量</li></ul><p>什么时候必须使用[]的方式</p><ol><li>属性名包含特殊字符：- 空格等</li><li>变量名不确定时</li></ol><h2 id="in-运算符" tabindex="-1"><a class="header-anchor" href="#in-运算符" aria-hidden="true">#</a> in 运算符</h2><p>in 运算符可以检查一个对象中是否含有指定的属性。</p><ul><li><code>&#39;属性名&#39; in 对象</code></li><li>有则返回 true</li><li>无则返回 false</li></ul><h2 id="键值对、属性、方法" tabindex="-1"><a class="header-anchor" href="#键值对、属性、方法" aria-hidden="true">#</a> 键值对、属性、方法</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">&#39;World&#39;</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">12</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码分析：</p><ul><li>1 个<code>{}</code>就定义了一个对象，赋值给变量<code>obj</code>，所以<code>obj</code>就指向一个对象.</li><li>内部包括两个键值对（或者说两个成员），<code>键名:&#39;键值&#39;</code>，多个键值对用<code>,</code>隔开。 <ul><li>CSS 的属性语法：<code>属性：属性值;</code> 多个属性之间用<code>;</code>隔开，多个属性值用<code>,</code>隔开。<code>width:800px;</code></li><li>HTML 的属性语法：<code>属性=&quot;属性值&quot;</code> 多个属性之间用<strong>空格</strong>隔开。<code>&lt;font color=&quot;red&quot; size=&quot;3&quot;&gt;文字&lt;/font&gt;</code></li></ul></li><li>键名都是字符串，但是可以不加<code>&#39;&#39;</code>，如果键名是数值，自动转为字符串。</li><li>不过，对于不符合标识符的键名，必须要加<code>&#39;&#39;</code>。</li><li>对象的每一个键名又称<strong>属性（property）</strong>，它的键值可以是任何数据类型。</li><li>当键值是函数时，通常把这个属性称为<strong>方法</strong>。</li><li>当键值时对象时，就会形成链式引用。</li><li>属性可以动态创建，不必在对象声明时就指定。</li></ul><h2 id="对象和代码块" tabindex="-1"><a class="header-anchor" href="#对象和代码块" aria-hidden="true">#</a> 对象和代码块</h2><p><code>{ foo: 123 }</code>可能会有两种含义，对象或者代码块。</p><ul><li>如果遇到这种情况，无法确定是对象还是代码块，一律解释为代码块。</li><li>如果要解释为对象，最好在大括号前加上圆括号。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 正确</span>
<span class="token punctuation">(</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,38),t=[o];function i(p,c){return n(),s("div",null,t)}const d=a(l,[["render",i],["__file","08_js_object.html.vue"]]);export{d as default};
