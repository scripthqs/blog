import{_ as a,o as s,c as e,f as n}from"./app-c6441670.js";const o={},p=n(`<h1 id="source-map" tabindex="-1"><a class="header-anchor" href="#source-map" aria-hidden="true">#</a> Source Map</h1><h2 id="生产环境遇到的问题" tabindex="-1"><a class="header-anchor" href="#生产环境遇到的问题" aria-hidden="true">#</a> 生产环境遇到的问题</h2><p>前端项目在投入生产环境之前，都需要对 JavaScript 源代码进行压缩混淆，从而减小文件的体积，提高文件的加载效率。此时就不可避免的产生了另一个问题：</p><p>**对压缩混淆之后的代码除错（debug）**是一件极其困难的事情</p><ul><li>变量被替换成没有任何语义的名称</li><li>空行和注释被剔除</li></ul><h2 id="什么是-source-map" tabindex="-1"><a class="header-anchor" href="#什么是-source-map" aria-hidden="true">#</a> 什么是 Source Map</h2><p><strong>Source Map 就是一个信息文件，里面储存着位置信息</strong>。也就是说，Source Map 文件中存储着压缩混淆后的代码，所对应的转换前的位置。</p><p>有了它，出错的时候，除错工具将<strong>直接显示原始代码，而不是转换后的代码</strong>，能够极大的方便后期的调试</p><h2 id="webpack-开发环境下的-source-map" tabindex="-1"><a class="header-anchor" href="#webpack-开发环境下的-source-map" aria-hidden="true">#</a> webpack 开发环境下的 Source Map</h2><p>在<strong>开发环境下</strong>，webpack 默认启用了 Source Map 功能。当程序运行出错时，可以直接在控制台提示错误行的位置，并定位到具体的源代码.</p><p>解决默认 Source Map 的问题:</p><p><strong>开发环境下</strong>，推荐在 webpack.config.js 中添加如下的配置，即可保证运行时报错的行数与源代码的行数保持一致</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&quot;eval-source-map&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在生产环境下</strong>，如果<strong>省略了 devtool 选项</strong>，则最终生成的文件中不包含 Source Map。这能够<strong>防止原始代码通过 Source Map 的形式暴露</strong>给别有所图之人</p><blockquote><p>正式发布，关闭 devtool，但是并不方便</p></blockquote><p><strong>只定位行数不暴露源码</strong>：</p><p><strong>在生产环境下</strong>，如果<strong>只想定位报错的具体行数</strong>，且不想暴露源码。此时可以将 devtool 的值设置为 nosources-source-map。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&quot;nosources-source-map&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>采用此选项后：你应该将你的服务器配置为，不允许普通用户访问 source map 文件！</p><h2 id="source-map-总结" tabindex="-1"><a class="header-anchor" href="#source-map-总结" aria-hidden="true">#</a> Source Map 总结</h2><p>开发环境下：</p><ul><li>建议把 devtool 的值设置为 eval-source-map</li><li>好处：可以精准定位到具体的错误行</li></ul><p>生产环境下：</p><ul><li>建议关闭 Source Map 或将 devtool 的值设置为 nosources-source-map</li><li>好处：防止源码泄露，提高网站的安全性</li></ul>`,24),t=[p];function r(c,l){return s(),e("div",null,t)}const u=a(o,[["render",r],["__file","08_webpack_Source_Map.html.vue"]]);export{u as default};
