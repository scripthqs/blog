import{_ as n,o as a,c as s,f as t}from"./app-f4e03468.js";const e={},p=t(`<h1 id="vue-响应式原理" tabindex="-1"><a class="header-anchor" href="#vue-响应式原理" aria-hidden="true">#</a> vue 响应式原理</h1><p>可以自动响应数据变量的代码机制，就称之为是响应式的。</p><p>响应式设计：变量改变时，自动执行某一行代码或者多行代码。将多行代码放在一个函数里，就变成了当数据改变时，自动执行某个函数。</p><h2 id="封装响应式函数" tabindex="-1"><a class="header-anchor" href="#封装响应式函数" aria-hidden="true">#</a> 封装响应式函数</h2><ol><li>封装一个新的函数 watchFn</li><li>凡是传入到 watchFn 的函数，就是需要响应式的</li><li>其他默认定义的函数不需要响应式</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> reactiveFns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">watchFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  reactiveFns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="响应式依赖的收集" tabindex="-1"><a class="header-anchor" href="#响应式依赖的收集" aria-hidden="true">#</a> 响应式依赖的收集</h2><p><code>reactiveFns</code>收集的依赖放在一个数组中保存，但是会存在数据管理的问题</p><ul><li>开发中需要监听很多对象的响应式</li><li>这个对象很可能不止一个属性，每一个属性都需要对应的响应式函数</li><li>不能在全局维护一大堆数组</li></ul><p>因此，需要设计一个类，用于管理某一个对象的某一属性的所有响应式函数，代替<code>reactiveFns</code>数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Depend</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reactiveFns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">addDepend</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reactiveFns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reactiveFns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Object.keys</code>方法传入一个对象，可以遍历对象的 key，返回一个由 key 组成的数组</li><li><code>Object.defineProperty</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> value <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
      dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="响应式数据的判断" tabindex="-1"><a class="header-anchor" href="#响应式数据的判断" aria-hidden="true">#</a> 响应式数据的判断</h2><h3 id="isref" tabindex="-1"><a class="header-anchor" href="#isref" aria-hidden="true">#</a> isRef</h3><ul><li>isRef: 检查一个值是否为一个 ref 对象</li></ul><h3 id="isreactive" tabindex="-1"><a class="header-anchor" href="#isreactive" aria-hidden="true">#</a> isReactive</h3><ul><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li></ul><h3 id="isreadonly" tabindex="-1"><a class="header-anchor" href="#isreadonly" aria-hidden="true">#</a> isReadonly</h3><ul><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li></ul><h3 id="isproxy" tabindex="-1"><a class="header-anchor" href="#isproxy" aria-hidden="true">#</a> isProxy</h3><ul><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul>`,22),c=[p];function o(i,l){return a(),s("div",null,c)}const r=n(e,[["render",o],["__file","19_vue3_proxy.html.vue"]]);export{r as default};
