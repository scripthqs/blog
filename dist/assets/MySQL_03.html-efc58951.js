import{_ as a,o as s,c as n,f as e}from"./app-f4e03468.js";const p={},l=e('<h1 id="mysql-的高级操作" tabindex="-1"><a class="header-anchor" href="#mysql-的高级操作" aria-hidden="true">#</a> MySQL 的高级操作</h1><h2 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数" aria-hidden="true">#</a> 聚合函数</h2><p>聚合函数表示对值的集合进行操作的组（集合）函数，聚合函数相当于默认将所有的数据分成了一组。</p><ul><li>计算平均值</li><li>计算最大/小值</li><li>计算总和</li><li>统计条数</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 华为手机价格的平均值</span>\nSELECT AVG<span class="token punctuation">(</span>price<span class="token punctuation">)</span> FROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span> WHERE brand <span class="token operator">=</span> <span class="token string">&#39;华为&#39;</span><span class="token punctuation">;</span>\n<span class="token comment"># 计算所有手机的平均分</span>\nSELECT AVG<span class="token punctuation">(</span>score<span class="token punctuation">)</span> FROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span><span class="token punctuation">;</span>\n<span class="token comment"># 手机中最低和最高分数</span>\nSELECT MAX<span class="token punctuation">(</span>score<span class="token punctuation">)</span> FROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span><span class="token punctuation">;</span>\nSELECT MIN<span class="token punctuation">(</span>score<span class="token punctuation">)</span> FROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span><span class="token punctuation">;</span>\n<span class="token comment"># 计算总投票人数</span>\nSELECT SUM<span class="token punctuation">(</span>voteCnt<span class="token punctuation">)</span> FROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span><span class="token punctuation">;</span>\n<span class="token comment"># 计算所有条目的数量</span>\nSELECT COUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span> FROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span><span class="token punctuation">;</span>\n<span class="token comment"># 华为手机的个数</span>\nSELECT COUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span> FROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span> WHERE brand <span class="token operator">=</span> <span class="token string">&#39;华为&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="group-by" tabindex="-1"><a class="header-anchor" href="#group-by" aria-hidden="true">#</a> Group by</h3><p>GROUP BY 通常和聚合函数一起使用，表示先对数据进行分组，再对每一组数据，进行聚合函数的计算。</p><ul><li>根据品牌进行分组</li><li>计算各个品牌中：商品的个数、平均价格、最高价格、最低价格、平均评分</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>SELECT brand,\nCOUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span> as count,\nROUND<span class="token punctuation">(</span>AVG<span class="token punctuation">(</span>price<span class="token punctuation">)</span>,2<span class="token punctuation">)</span> as avgPrice,\nMAX<span class="token punctuation">(</span>price<span class="token punctuation">)</span> as maxPrice,\nMIN<span class="token punctuation">(</span>price<span class="token punctuation">)</span> as minPrice,\nAVG<span class="token punctuation">(</span>score<span class="token punctuation">)</span> as avgScore\nFROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span> GROUP BY brand<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="having" tabindex="-1"><a class="header-anchor" href="#having" aria-hidden="true">#</a> HAVING</h3><p>给 Group By 查询到的结果添加一些约束，那么我们可以使用：HAVING</p><ul><li>筛选出平均价格在 4000 以下，并且平均分在 7 以上的品牌</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>SELECT brand,\nCOUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span> as count,\nROUND<span class="token punctuation">(</span>AVG<span class="token punctuation">(</span>price<span class="token punctuation">)</span>,2<span class="token punctuation">)</span> as avgPrice,\nMAX<span class="token punctuation">(</span>price<span class="token punctuation">)</span> as maxPrice,\nMIN<span class="token punctuation">(</span>price<span class="token punctuation">)</span> as minPrice,\nAVG<span class="token punctuation">(</span>score<span class="token punctuation">)</span> as avgScore\nFROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span> GROUP BY brand\nHAVING avgPrice <span class="token operator">&lt;</span> <span class="token number">4000</span> and avgScore <span class="token operator">&gt;</span> <span class="token number">7</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建多张表" tabindex="-1"><a class="header-anchor" href="#创建多张表" aria-hidden="true">#</a> 创建多张表</h2><p>一个商品表中，对应的品牌还需要包含其他的信息</p><ul><li>比如品牌的官网，品牌的世界排名，品牌的市值等</li><li>products 表中应该表示的都是商品相关的数据，应该又另外一张表来表示 brand 的数据</li><li>多个商品使用的品牌是一致时，会存在大量的冗余数据</li></ul><p>将所有的品牌数据，单独放到一张表中，创建一张品牌的表</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>CREATE TABLE IF NOT EXISTS <span class="token variable"><span class="token variable">`</span>brands<span class="token variable">`</span></span><span class="token punctuation">(</span>\n<span class="token function">id</span> INT PRIMARY KEY AUTO_INCREMENT,\nname VARCHAR<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL,\nwebsite VARCHAR<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>,\nworldRank INT\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="外键约束" tabindex="-1"><a class="header-anchor" href="#外键约束" aria-hidden="true">#</a> 外键约束</h3><p>将两张表联系起来，我们可以将 products 中的 brand_id 关联到 brand 中的 id。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 如果是创建表添加外键约束，我们需要在创建表的()最后添加</span>\nFOREIGN KEY <span class="token punctuation">(</span>brand_id<span class="token punctuation">)</span> REFERENCES brand<span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n<span class="token comment"># 如果是表已经创建好，额外添加外键</span>\nALTER TABLE <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span> ADD <span class="token variable"><span class="token variable">`</span>brand_id<span class="token variable">`</span></span> INT<span class="token punctuation">;</span>\nALTER TABLE <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span> ADD FOREIGN KEY <span class="token punctuation">(</span>brand_id<span class="token punctuation">)</span> REFERENCES brand<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment"># 更新brand_id</span>\nUPDATE <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span> SET <span class="token variable"><span class="token variable">`</span>brand_id<span class="token variable">`</span></span> <span class="token operator">=</span> <span class="token number">1</span> WHERE <span class="token variable"><span class="token variable">`</span>brand<span class="token variable">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;华为&#39;</span><span class="token punctuation">;</span>\nUPDATE <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span> SET <span class="token variable"><span class="token variable">`</span>brand_id<span class="token variable">`</span></span> <span class="token operator">=</span> <span class="token number">4</span> WHERE <span class="token variable"><span class="token variable">`</span>brand<span class="token variable">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;OPPO&#39;</span><span class="token punctuation">;</span>\nUPDATE <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span> SET <span class="token variable"><span class="token variable">`</span>brand_id<span class="token variable">`</span></span> <span class="token operator">=</span> <span class="token number">3</span> WHERE <span class="token variable"><span class="token variable">`</span>brand<span class="token variable">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;苹果&#39;</span><span class="token punctuation">;</span>\nUPDATE <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span> SET <span class="token variable"><span class="token variable">`</span>brand_id<span class="token variable">`</span></span> <span class="token operator">=</span> <span class="token number">2</span> WHERE <span class="token variable"><span class="token variable">`</span>brand<span class="token variable">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;小米&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="外键存在时更新和删除数据" tabindex="-1"><a class="header-anchor" href="#外键存在时更新和删除数据" aria-hidden="true">#</a> 外键存在时更新和删除数据</h3><p>如果 products 中引用的外键直接更新或者删除会报错</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 存在外键时修改会报错</span>\nUPDATE <span class="token variable"><span class="token variable">`</span>brand<span class="token variable">`</span></span> SET <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">100</span> WHERE <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>需要 on delete 或者 on update 的值，给更新或者删除时设置几个值：</p><ul><li>RESTRICT：默认，更新或删除时，报错</li><li>NO ACTION：是在 SQL 标准中定义，和 RESTRICT 一样</li><li>CASCADE：更新或删除某个记录时，会同步</li><li>SET NULL：更新或删除某个记录时，设置为 NULL</li></ul><h2 id="多表查询" tabindex="-1"><a class="header-anchor" href="#多表查询" aria-hidden="true">#</a> 多表查询</h2><p>当数据是存放在两张表中，就需要进行多表查询，例如：希望查询到产品的同时，显示对应的品牌相关的信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 最简单</span>\nSELECT * FROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>brand<span class="token variable">`</span></span><span class="token punctuation">;</span>\n<span class="token comment"># 符合products.brand_id = brand.id条件的数据过滤出来</span>\nSELECT * FROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>brands<span class="token variable">`</span></span> WHERE products.brand_id <span class="token operator">=</span> brands.id<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单的筛选并不能满足需求，需要对表进行连接</p><ul><li>左连接</li><li>右连接</li><li>内连接</li><li>全连接</li></ul><h3 id="左连接-开发中使用最多" tabindex="-1"><a class="header-anchor" href="#左连接-开发中使用最多" aria-hidden="true">#</a> 左连接(开发中使用最多)</h3><p>以左表为主，希望获取到的是左边所有的数据</p><ul><li>无论左边的表是否有对应的 brand_id 的值对应右边表的 id，左边的数据都会被查询出来</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>SELECT * FROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span> LEFT JOIN <span class="token variable"><span class="token variable">`</span>brands<span class="token variable">`</span></span> ON products.brand_id <span class="token operator">=</span> brands.id<span class="token punctuation">;</span>\nSELECT * FROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span> LEFT JOIN <span class="token variable"><span class="token variable">`</span>brands<span class="token variable">`</span></span> ON products.brand_id <span class="token operator">=</span> brands.id WHERE brands.id IS NOT NULL<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="右连接" tabindex="-1"><a class="header-anchor" href="#右连接" aria-hidden="true">#</a> 右连接</h3><p>以右表为主</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>SELECT * FROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span> RIGHT JOIN <span class="token variable"><span class="token variable">`</span>brands<span class="token variable">`</span></span> ON products.brand_id <span class="token operator">=</span> brands.id<span class="token punctuation">;</span>\nSELECT * FROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span> RIGHT JOIN <span class="token variable"><span class="token variable">`</span>brands<span class="token variable">`</span></span> ON products.brand_id <span class="token operator">=</span> brands.id WHERE products.id IS NULL<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内连接" tabindex="-1"><a class="header-anchor" href="#内连接" aria-hidden="true">#</a> 内连接</h3><p>CROSS JOIN 或者 JOIN 都可以</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 内连接，代表的是在两张表连接时就会约束数据之间的关系，来决定之后查询的结果；</span>\nSELECT * FROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span> INNER JOIN <span class="token variable"><span class="token variable">`</span>brand<span class="token variable">`</span></span> ON <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span>.brand_id <span class="token operator">=</span> <span class="token variable"><span class="token variable">`</span>brand<span class="token variable">`</span></span>.id<span class="token punctuation">;</span>\n<span class="token comment"># where条件，代表的是先计算出笛卡尔乘积，在笛卡尔乘积的数据基础之上进行where条件的筛选（效果一样）</span>\nSELECT * FROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>brand<span class="token variable">`</span></span> WHERE <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span>.brand_id <span class="token operator">=</span> <span class="token variable"><span class="token variable">`</span>brand<span class="token variable">`</span></span>.id<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="全连接" tabindex="-1"><a class="header-anchor" href="#全连接" aria-hidden="true">#</a> 全连接</h3><p>MySQL 中并没有对它的支持，需要使用 UNION 来实现</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>SELECT * FROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span> LEFT JOIN <span class="token variable"><span class="token variable">`</span>brands<span class="token variable">`</span></span> ON products.brand_id <span class="token operator">=</span> brands.id<span class="token punctuation">)</span>\nUNION\n<span class="token punctuation">(</span>SELECT * FROM <span class="token variable"><span class="token variable">`</span>products<span class="token variable">`</span></span> RIGHT JOIN <span class="token variable"><span class="token variable">`</span>brands<span class="token variable">`</span></span> ON products.brand_id <span class="token operator">=</span> brands.id<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多对多关系数据查询" tabindex="-1"><a class="header-anchor" href="#多对多关系数据查询" aria-hidden="true">#</a> 多对多关系数据查询</h2><p>比如学生可以选择多门课程，一个课程可以被多个学生选择</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建学生表</span>\nCREATE TABLE IF NOT EXISTS <span class="token variable"><span class="token variable">`</span>students<span class="token variable">`</span></span><span class="token punctuation">(</span>\n<span class="token function">id</span> INT PRIMARY KEY AUTO_INCREMENT,\nname VARCHAR<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL,\nage INT\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment"># 创建课程表</span>\nCREATE TABLE IF NOT EXISTS <span class="token variable"><span class="token variable">`</span>courses<span class="token variable">`</span></span><span class="token punctuation">(</span>\n<span class="token function">id</span> INT PRIMARY KEY AUTO_INCREMENT,\nname VARCHAR<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL,\nprice DOUBLE NOT NULL\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="建立关系表" tabindex="-1"><a class="header-anchor" href="#建立关系表" aria-hidden="true">#</a> 建立关系表</h3><p>需要一个关系表来记录两张表中的数据关系</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建关系表</span>\nCREATE TABLE IF NOT EXISTS <span class="token variable"><span class="token variable">`</span>students_select_courses<span class="token variable">`</span></span><span class="token punctuation">(</span>\n<span class="token function">id</span> INT PRIMARY KEY AUTO_INCREMENT,\nstudent_id INT NOT NULL,\ncourse_id INT NOT NULL,\nFOREIGN KEY <span class="token punctuation">(</span>student_id<span class="token punctuation">)</span> REFERENCES students<span class="token punctuation">(</span>id<span class="token punctuation">)</span> ON UPDATE CASCADE,\nFOREIGN KEY <span class="token punctuation">(</span>course_id<span class="token punctuation">)</span> REFERENCES courses<span class="token punctuation">(</span>id<span class="token punctuation">)</span> ON UPDATE CASCADE\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="json-object" tabindex="-1"><a class="header-anchor" href="#json-object" aria-hidden="true">#</a> JSON_OBJECT</h2><p>使用 JSON_OBJECT 可以将数据转成对象</p><h2 id="json-arrayagg" tabindex="-1"><a class="header-anchor" href="#json-arrayagg" aria-hidden="true">#</a> JSON_ARRAYAGG</h2><p>JSON_ARRAYAGG 和 JSON_OBJECT 结合可以多对多转成数组</p>',54),i=[l];function t(c,o){return s(),n("div",null,i)}const d=a(p,[["render",t],["__file","MySQL_03.html.vue"]]);export{d as default};
