import{_ as n,o as s,c as a,f as t}from"./app-10c4e004.js";const e={},p=t(`<h1 id="pinia" tabindex="-1"><a class="header-anchor" href="#pinia" aria-hidden="true">#</a> Pinia</h1><p>Pinia 是一个更加适合 Vue3 的状态管理库。</p><h2 id="pinia-和-vuex-的区别" tabindex="-1"><a class="header-anchor" href="#pinia-和-vuex-的区别" aria-hidden="true">#</a> Pinia 和 Vuex 的区别</h2><ul><li>Pinia 可以替代 Vuex</li><li>比 Vuex 的更简单的 API</li><li>Pinia 不再有 mutations 的概念</li><li>Pinia 不再有 modules 的嵌套结构</li><li>没有命名空间的概念</li><li>Pinia 可以创建多个 store</li><li>对 TypeScript 的支持更好</li></ul><h2 id="使用-pinia" tabindex="-1"><a class="header-anchor" href="#使用-pinia" aria-hidden="true">#</a> 使用 Pinia</h2><p>首先安装 Pinia</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install pinia
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建一个 pinia 并且传递给应用程序。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//新建stores文件夹，并且新建index.js文件</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> pinia<span class="token punctuation">;</span>
<span class="token comment">//在main.js中导入pinia</span>
<span class="token keyword">import</span> pinia <span class="token keyword">from</span> <span class="token string">&quot;./stores&quot;</span><span class="token punctuation">;</span>
<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pinia-有-3-个概念" tabindex="-1"><a class="header-anchor" href="#pinia-有-3-个概念" aria-hidden="true">#</a> Pinia 有 3 个概念</h2><ul><li>state、getters、actions</li><li>等同于 Vue2 中的 data、computed、methods</li><li>可以直接在 store 上访问 state、getters、actions 中定义的属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义关于counter的store</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> useUser <span class="token keyword">from</span> <span class="token string">&quot;./user&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> useCounter <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&quot;counter&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">99</span><span class="token punctuation">,</span>
    <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;why&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;kobe&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;james&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.基本使用</span>
    <span class="token function">doubleCount</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 2.一个getter引入另外一个getter</span>
    <span class="token function">doubleCountAddOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// this是store实例</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doubleCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 3.getters也支持返回一个函数</span>
    <span class="token function">getFriendById</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>friends<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> friend <span class="token operator">=</span> state<span class="token punctuation">.</span>friends<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>friend<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> friend<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 4.getters中用到别的store中的数据</span>
    <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 1.获取user信息</span>
      <span class="token keyword">const</span> userStore <span class="token operator">=</span> <span class="token function">useUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 2.获取自己的信息</span>

      <span class="token comment">// 3.拼接信息</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">name:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userStore<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-count:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">incrementNum</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> useCounter<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="state" tabindex="-1"><a class="header-anchor" href="#state" aria-hidden="true">#</a> state</h3><ul><li>state 是一个选项，这个选项的值需要是一个函数，函数返回一个对象，对象中存储数据</li><li>在组件中拿到当前的 store 直接使用即可，store.xxx</li></ul><h3 id="getters" tabindex="-1"><a class="header-anchor" href="#getters" aria-hidden="true">#</a> getters</h3><ul><li>getters 也是一个选项，这个选项的值是一个对象，对象中存储着一个个函数，每个函数可以有一个参数 state，通过 state 可以获取到当前 store 的 state</li><li>除此之外每个函数还可以拿到一个 this，这个 this 就是当前的整个 store 实例</li><li>通过这个 this，可以想用谁就用谁</li><li>在组件中使用也是拿到 store 直接 store.xxx 即可</li></ul><h3 id="actions" tabindex="-1"><a class="header-anchor" href="#actions" aria-hidden="true">#</a> actions</h3><ul><li>在 actions 中，主要存放一个个函数，每个函数最主要的工作发送异步请求，获取到数据后直接修改 state</li><li>每个 action 函数并不像 getter 函数一样，第一个参数是 state，它可以没有参数</li><li>需要通过 this 拿到 state 然后再修改 state 中的值</li><li>在组件中拿到 store 后直接调用即可，store.xxx()，如果你在此时传递参数，那么就可以在 action 中拿到参数</li></ul><h2 id="多个-store-如何使用" tabindex="-1"><a class="header-anchor" href="#多个-store-如何使用" aria-hidden="true">#</a> 多个 store 如何使用</h2><p>没有模块的概念，在 vuex 中会有 modules 的概念，但是在 pinia 中没有，想要有相同的概念，只需要多创建几个 store 即可。</p><ul><li>想要用时直接拿到 <code>store：const homeStore = useHome()</code>，然后直接使用即可</li><li>想要拿到别的 store，也是直接拿：<code>const aboutStore = useAbout()</code>，然后用就行</li><li>可以在某个 store 中拿另外的 store，然后使用 store 中的任何方法</li><li>在某个 store 的某个 getter 函数中使用其他 store 的某个 getter 函数，在当前 getter 函数中可以这么写： <ul><li>const aboutStore = useAbout();</li><li>aboutStore.某个 about 中 getter 函数</li></ul></li></ul><h2 id="和-vuex-的使用区别" tabindex="-1"><a class="header-anchor" href="#和-vuex-的使用区别" aria-hidden="true">#</a> 和 vuex 的使用区别</h2><ul><li>我们在 vuex 中使用某个 state 时，需要<code>$store.state.xxx</code></li><li>在 pinia 中直接拿到 store 之后 <code>store.xxx</code> 即可</li><li>我们在 vuex 中使用某个 getter 函数时，需要<code>$store.getters.xxx</code></li><li>在 pinia 中拿到 store 后，<code>store.xxx</code> 即可</li><li>在 vuex 中进行异步请求需要<code>派发 action</code> 函数</li><li>在 pinia 中拿到 store 后，直接<code>调用 action</code> 函数即可</li></ul><h2 id="开发中使用" tabindex="-1"><a class="header-anchor" href="#开发中使用" aria-hidden="true">#</a> 开发中使用</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> startDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> endDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
endDate<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span>startDate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> useMainStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">token</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>

    <span class="token literal-property property">startDate</span><span class="token operator">:</span> startDate<span class="token punctuation">,</span>
    <span class="token literal-property property">endDate</span><span class="token operator">:</span> endDate<span class="token punctuation">,</span>

    <span class="token literal-property property">isLoading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> useMainStore<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),o=[p];function i(c,l){return s(),a("div",null,o)}const r=n(e,[["render",i],["__file","pinia.html.vue"]]);export{r as default};
