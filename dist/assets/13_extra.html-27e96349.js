import{_ as n,o as a,c as s,f as e}from"./app-c6441670.js";const t={},o=e(`<h1 id="with、eval、严格模式" tabindex="-1"><a class="header-anchor" href="#with、eval、严格模式" aria-hidden="true">#</a> with、eval、严格模式</h1><h2 id="with-语句" tabindex="-1"><a class="header-anchor" href="#with-语句" aria-hidden="true">#</a> with 语句</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">with</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Hello World</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="eval-函数" tabindex="-1"><a class="header-anchor" href="#eval-函数" aria-hidden="true">#</a> eval 函数</h2><p>eval 函数允许执行一个代码字符串</p><ul><li>可以将传入的字符串当做 js 代码执行</li><li>会将最后一句执行语句的结果，作为返回值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> codeString <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">var name = &quot;huang&quot;; console.log(name); console.log(message); &quot;abc&quot;;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>codeString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//huang Hello World</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//abc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="严格模式" tabindex="-1"><a class="header-anchor" href="#严格模式" aria-hidden="true">#</a> 严格模式</h2><p>JS 有一种严格模式(strict mode)的概念</p><ul><li>具有限制性的 js 模式</li><li>浏览器对以更加严格的方式对代码进行检测和执行</li></ul>`,10),p=[o];function l(c,i){return a(),s("div",null,p)}const u=n(t,[["render",l],["__file","13_extra.html.vue"]]);export{u as default};
