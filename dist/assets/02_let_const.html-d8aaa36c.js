import{_ as e,o as t,c as i,f as l}from"./app-c6441670.js";const a={},o=l('<h1 id="let-和-const" tabindex="-1"><a class="header-anchor" href="#let-和-const" aria-hidden="true">#</a> Let 和 const</h1><p>var 的设计可以看作成 JavaScript 语言设计的缺陷。使用 let 替代 var 可以解决没有块级作用域的问题。</p><h2 id="块级作用域" tabindex="-1"><a class="header-anchor" href="#块级作用域" aria-hidden="true">#</a> 块级作用域</h2><p>块级作用域<code>{}</code>里面声明的变量不会被外面访问。在 ES5 之前，if 和 for 都没有块级作用域，必须借助函数作用域。</p><h2 id="let-声明变量" tabindex="-1"><a class="header-anchor" href="#let-声明变量" aria-hidden="true">#</a> let 声明变量</h2><ol><li>let 变量不能重复声明</li><li>有块级作用域</li><li>不存在变量提升</li><li>不影响作用域链</li><li>声明的变量不再是 window 的属性</li></ol><p><strong>应用场景：以后声明变量使用 let 就对了</strong>。</p><h2 id="const-声明常量" tabindex="-1"><a class="header-anchor" href="#const-声明常量" aria-hidden="true">#</a> const 声明常量</h2><ol><li>一定要赋初值</li><li>常量的值不能修改</li><li>一般常量使用大写</li><li>有块级作用域</li><li>声明的变量不再是 window 的属性</li></ol><p>对于数组和对象中的元素修改，不算对常量的修改，不会报错，使用 const 声明数组和对象比较稳妥，考虑优先使用</p><p><strong>注意: 对象属性修改和数组元素变化不会出发 const 错误</strong>。</p><p><strong>应用场景：声明对象类型使用 const，非对象类型声明选择 let</strong>。</p>',12),n=[o];function r(c,s){return t(),i("div",null,n)}const h=e(a,[["render",r],["__file","02_let_const.html.vue"]]);export{h as default};
