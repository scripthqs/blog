import{_ as p,r as e,o,c,b as n,e as s,d as i,f as a}from"./app-06f72143.js";const l="/assets/url-cd71c4fd.png",u={},r=a(`<h1 id="常用内置模块" tabindex="-1"><a class="header-anchor" href="#常用内置模块" aria-hidden="true">#</a> 常用内置模块</h1><h2 id="node-全局变量" tabindex="-1"><a class="header-anchor" href="#node-全局变量" aria-hidden="true">#</a> Node 全局变量</h2><p>在 node 中有一个全局对象 global，它的作用和网页中的 window 类似，里面包括了的 process、console、setTimeout</p><ul><li>在全局中创建的变量会作为 global 的属性保存</li><li>在全局中创建的函数会作为 global 的方法保存</li></ul><p>当 node 在执行模块中的代码时，他会首先在代码的最顶部，添加如下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span>require<span class="token punctuation">,</span>module<span class="token punctuation">,</span>__filename<span class="token punctuation">,</span>__dirname</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际中模块中的代码都是包装在一个函数中执行的，并且在函数执行时，同时传递了 5 个实参</p><ul><li>exports：该对象将变量和函数暴露在外面</li><li>require：函数，用来引入外部的模块</li><li>module：module 代表是当前模块的本身，exports 就是 module 的属性，既可以使用 exports 导出，也可以使用 module.exports</li><li><code>__filename</code>：当前文件的完整路径</li><li><code>__dirname</code>：当前文件夹的完整路径</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常见的全局对象" tabindex="-1"><a class="header-anchor" href="#常见的全局对象" aria-hidden="true">#</a> 常见的全局对象</h3><p>process 对象</p><ul><li>提供了 Node 进程中相关的信息</li><li>如 Node 的运行环境、参数信息等</li></ul><p>console 对象</p><ul><li>提供了简单的调试控制台</li></ul><p>定时器函数</p><ul><li>setTimeout</li><li>setInterval</li><li>setImmediate</li><li>process.nextTick</li></ul>`,16),d={href:"http://nodejs.cn/api/",target:"_blank",rel:"noopener noreferrer"},k=a(`<h2 id="os-模块" tabindex="-1"><a class="header-anchor" href="#os-模块" aria-hidden="true">#</a> os 模块</h2><p>os（<code>operation system</code>）模块提供了与操作系统相关的实用方法和属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;os&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 换行符</span>
os<span class="token punctuation">.</span><span class="token constant">EOL</span><span class="token punctuation">;</span> <span class="token comment">//根据操作系统生成对应的换行符 window \\r\\n，linux下面 \\n</span>

<span class="token comment">// 查看cpu相关信息</span>
os<span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 总内存大小 (单位 字节)</span>
os<span class="token punctuation">.</span><span class="token function">totalmem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 空余内存大小 (单位 字节)</span>
os<span class="token punctuation">.</span><span class="token function">freemem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 主机名</span>
os<span class="token punctuation">.</span><span class="token function">hostname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 系统类型</span>
os<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="path-模块" tabindex="-1"><a class="header-anchor" href="#path-模块" aria-hidden="true">#</a> path 模块</h2><p>path 模块用于处理文件和目录(文件夹)的路径。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取路径最后一部内容，一般用它来获取文件名称</span>
path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">&quot;c:/a/b/c/d.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// d.html</span>

<span class="token comment">// 获取目录名，路径最后分隔符部分被忽略</span>
path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token string">&quot;c:/a/b/c/d.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c:/a/b/c</span>

<span class="token comment">// 获取路径中文件扩展名（后缀）</span>
path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">&quot;c:/a/b/c/d.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// .html</span>

<span class="token comment">// 给定的路径连接在一起</span>
path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;/a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// /a/b/c</span>

<span class="token comment">// resolve：模拟cd（切换目录）操作同时拼接路径</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;../b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;/a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&#39;/&#39;表示当前磁盘的根目录，window 系统下，目录分割符可以是&#39;/&#39;或&#39;&#39;，linux 系统下，系统的分割符是&#39;/&#39;，不能使用&#39;&#39;。</p><h2 id="url-模块" tabindex="-1"><a class="header-anchor" href="#url-模块" aria-hidden="true">#</a> url 模块</h2><p>URL 字符串是结构化的字符串，包含多个含义不同的组成部分。 解析字符串后返回的 URL 对象，每个属性对应字符串的各个组成部分。</p><p><img src="`+l+`" alt="url"></p><p>完整的 url 包含了：协议（https:），//，用户名和密码，域名（@sub.example.com），端口（8080），路径，查询，哈希。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> href <span class="token operator">=</span> <span class="token string">&quot;http://www.xxx.com:8080/pathname?id=100#bbb&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 解析网址，返回Url对象</span>
<span class="token comment">// 参2 如果为true 则 query获取得到的为对象形式</span>
url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>href<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//以一种 Web 浏览器解析超链接的方式把一个目标 URL 解析成相对于一个基础 URL。</span>
url<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;https://lynnn.cn/foo/bar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：url 模块中没有 join 方法。</p></blockquote><ul><li>url.parse() 将一个地址转化成对象模式 （已经废弃）</li><li>url.resolve() 将多个路径拼接成一个完整的 url（已经废弃）</li></ul><p>之前使用里面的 parse 方法来获取到前端发送到后端的数据，现在改方法已被弃用，现在需要使用 URL 类</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// new一个URL实例</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token string">&quot;https://example.org/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种方法是使用 querstring()</p><h2 id="querystring-模块" tabindex="-1"><a class="header-anchor" href="#querystring-模块" aria-hidden="true">#</a> querystring 模块</h2><p>用于<strong>解析和格式化</strong> URL 查询字符串（URL 地址的 get 形式传参）的实用工具。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;querystring&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// query字符串转为对象</span>
qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;foo=bar&amp;abc=xyz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//decode()是parse()的别名</span>
qs<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">&quot;foo=bar&amp;abc=xyz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 对象转为query字符串</span>
qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">abc</span><span class="token operator">:</span> <span class="token string">&quot;xyz&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//encode()是stringify()的别名</span>
qs<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">abc</span><span class="token operator">:</span> <span class="token string">&quot;xyz&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20);function m(v,b){const t=e("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[s("更多内置模块及常用内置模块的更多 API 用法，可以参考："),n("a",d,[s("http://nodejs.cn/api/"),i(t)])]),k])}const h=p(u,[["render",m],["__file","09_node_os.html.vue"]]);export{h as default};
