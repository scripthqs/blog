import{_ as r,o as e,c as t,f as o}from"./app-c6441670.js";const n={},s=o('<h1 id="vue-生命周期" tabindex="-1"><a class="header-anchor" href="#vue-生命周期" aria-hidden="true">#</a> Vue 生命周期</h1><h2 id="生命周期和生命周期函数" tabindex="-1"><a class="header-anchor" href="#生命周期和生命周期函数" aria-hidden="true">#</a> 生命周期和生命周期函数</h2><p><strong>生命周期</strong>（Life Cycle）是指一个组件从<strong>创建 -&gt; 运行 -&gt; 销毁</strong>的整个阶段，强调的是一个时间段。</p><p><strong>生命周期函数</strong>：是由 vue 框架提供的<strong>内置函数</strong>，会伴随着组件的生命周期，<strong>自动按次序执行</strong></p><p>注意：<strong>生命周期</strong>强调的是<strong>时间段</strong>，<strong>生命周期函数</strong>强调的是<strong>时间点</strong>。</p><p><code>hook</code>钩子，生命周期函数又称为钩子函数。</p><h2 id="组件生命周期函数的分类" tabindex="-1"><a class="header-anchor" href="#组件生命周期函数的分类" aria-hidden="true">#</a> 组件生命周期函数的分类</h2><p>组件生命周期有 3 个阶段：</p><p><strong>组件创建阶段：</strong></p><ol><li>beforeCreate 创建前，</li><li>created 创建后</li><li>beforeMount 挂载前</li><li>mounted 挂载后</li></ol><p><strong>组件运行阶段</strong>：</p><ol><li>beforeUpdate 数据更新前</li><li>updated 数据更新后</li></ol><p><strong>组件销毁阶段</strong>：</p><ol><li>beforeDestroy 销毁前</li><li>destroyed 销毁后</li></ol><h2 id="beforecreate" tabindex="-1"><a class="header-anchor" href="#beforecreate" aria-hidden="true">#</a> beforeCreate</h2><ol><li>初始化<strong>事件</strong>和<strong>生命周期函数</strong></li><li><strong>props/data/methods</strong>尚未被创建，都处于<strong>不可用</strong>的状态</li></ol><h2 id="created" tabindex="-1"><a class="header-anchor" href="#created" aria-hidden="true">#</a> <strong>created</strong></h2><ol><li>初始化<strong>props/data/methods</strong></li><li>组件中的<strong>props/data/methods</strong>已创建好，都处于<strong>可用</strong>的状态，但是组件的<strong>模板结构尚未生成</strong>，<strong>不能操作 DOM</strong></li></ol><p>注意：<strong>在开发中，这个函数中，可以发起 ajax 请求，获取数据</strong>。</p><h2 id="beforemount" tabindex="-1"><a class="header-anchor" href="#beforemount" aria-hidden="true">#</a> beforeMount</h2><p><strong>将要把</strong>内存中编译好的<strong>HTML</strong>结构<strong>渲染到</strong>浏览器中，此时浏览器中<strong>还没有</strong>当前组件的 DOM 结构。<strong>不能操作 DOM</strong></p><h2 id="mounted" tabindex="-1"><a class="header-anchor" href="#mounted" aria-hidden="true">#</a> <strong>mounted</strong></h2><p>已经把内存中的 HTML 结构，成功的渲染到浏览器中，此时浏览器的中<strong>已然包含</strong>了当前组件的 DOM 结构，<strong>可以操作 DOM</strong></p><h2 id="beforeupdate" tabindex="-1"><a class="header-anchor" href="#beforeupdate" aria-hidden="true">#</a> beforeUpdate</h2><p><strong>将要</strong>根据变化之后，最新的数据，<strong>重新渲染</strong>组件中的模板结构，</p><p><strong>data 数据是最新的，DOM 结构还是旧的</strong>。</p><h2 id="updated" tabindex="-1"><a class="header-anchor" href="#updated" aria-hidden="true">#</a> updated</h2><p>已经根据最新的数据，<strong>完成了</strong>组件 DOM 结构的<strong>重新渲染</strong>。</p><p><strong>data 数据是最新的，DOM 结构也是最新的</strong>。</p><h2 id="beforedestroy" tabindex="-1"><a class="header-anchor" href="#beforedestroy" aria-hidden="true">#</a> beforeDestroy</h2><p><strong>将要销毁</strong>此组件，此时<strong>尚未销毁</strong>，组件还处于<strong>正常工作</strong>的状态</p><h2 id="destroyed" tabindex="-1"><a class="header-anchor" href="#destroyed" aria-hidden="true">#</a> destroyed</h2><p>组件已经被销毁，此组件在浏览器中对应的<strong>DOM 结构</strong>已经被<strong>完全移除</strong>。</p><p><strong>清除定时器、解绑事件监听器，清空数据等</strong>。</p>',34),a=[s];function d(g,i){return e(),t("div",null,a)}const l=r(n,[["render",d],["__file","10_vue_life_cycle.html.vue"]]);export{l as default};
