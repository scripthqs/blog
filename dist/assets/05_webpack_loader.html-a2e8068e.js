import{_ as s,o as n,c as a,f as e}from"./app-f4e03468.js";const p={},t=e(`<h1 id="loader" tabindex="-1"><a class="header-anchor" href="#loader" aria-hidden="true">#</a> Loader</h1><h2 id="loader-概述" tabindex="-1"><a class="header-anchor" href="#loader-概述" aria-hidden="true">#</a> loader 概述</h2><p>在实际开发过程中，webpack 默认只能打包处理以 .js 后缀名结尾的模块。其他<strong>非 .js 后缀名结尾的模块</strong>， webpack 默认处理不了，<strong>需要调用 loader 加载器才可以正常打包</strong>，否则会报错！</p><p>例如，当我们需要处理加载 css，图片，高级的 ES6，TS，less，.vue 等等文件时，就需要使用 loader</p><p>loader 加载器的作用：<strong>协助 webpack 打包处理特定的文件模块</strong></p><ul><li>css-loader 可以打包处理 .css 相关的文件</li><li>less-loader 可以打包处理 .less 相关的文件</li><li>babel-loader 可以打包处理 webpack 无法处理的高级 JS 语</li></ul><p>注意：在 webpack，一切都是模块，需要在 index.js 中通过 import 来引入各种文件，<strong>不需要在 index.html 中引入</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//index.js</span>
<span class="token keyword">import</span> <span class="token string">&quot;./css/index.css&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6 标准发布后，module 成为标准，标准使用是以 export 指令导出接口，以 import 引入模块。但是在我们一贯的 node 模块中，我们依然采用的是 CommonJS 规范，使用 require 引入模块，使用 module.exports 导出接口。</p><h2 id="打包处理-css-文件" tabindex="-1"><a class="header-anchor" href="#打包处理-css-文件" aria-hidden="true">#</a> 打包处理 css 文件</h2><ol><li><p><strong>运行命令</strong>，安装处理 css 文件的 loader</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i css-loader style-loader <span class="token parameter variable">-D</span> <span class="token comment">#安装最新版</span>
<span class="token function">npm</span> i style-loader@3.0.0 css-loader@5.2.6 <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：可以直接安装最新版，但是不同的版本可能会报各种莫名其妙的错误，做好准备。-D(--save-dev)表示本地需要</p></blockquote></li><li><p>在 webpack.config.js 的 module -&gt; rules 数组中，<strong>添加 loader 规则</strong>如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，test 表示匹配的文件类型， use 表示对应要调用的 loader</p><p>注意：</p><ul><li>use 数组中指定的 loader 顺序是固定的</li><li>多个 loader 的调用顺序是：从后往前调用</li></ul></li></ol><h2 id="打包处理-less-文件" tabindex="-1"><a class="header-anchor" href="#打包处理-less-文件" aria-hidden="true">#</a> 打包处理 less 文件</h2><ol><li><p>运行命令，安装处理 less 文件的 loader</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i less-loader <span class="token function">less</span> -D//安装最新版本
<span class="token function">npm</span> i less-loader@10.0.1 less@4.1.1 <span class="token parameter variable">-D</span> //安装指定版本
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<strong>不同版本匹配很可能报错</strong></p></li><li><p>在 webpack.config.js 的 module -&gt; rules 数组中，<strong>添加 loader 规则</strong>如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;less-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="postcss-工具" tabindex="-1"><a class="header-anchor" href="#postcss-工具" aria-hidden="true">#</a> postCSS 工具</h2><ul><li>PostCSS 是一个通过 JavaScript 来转换样式的工具</li><li>这个工具可以帮助我们进行一些 CSS 的转换和适配，比如自动添加浏览器前缀、css 样式的重置</li><li>但是实现这些功能，我们需要借助于 PostCSS 对应的插件</li></ul><p>使用 PostCSS</p><ol><li>查找 PostCSS 在构建工具中的扩展，比如 webpack 中的 postcss-loader</li><li>选择可以添加你需要的 PostCSS 相关的插件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> postcss-loader <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要添加前缀，所以要安装 autoprefixer</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> autoprefixer <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// postcss 需要有对应的插件才会起效果，所以我们需要配置它的 plugin</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;postcss-loader&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">postcssOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;autoprefixer&quot;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>postcss-preset-env 也是一个 postcss 的插件，它可以帮助我们将一些现代的 CSS 特性，转成大多数浏览器认识的 CSS，并且会根据目标浏览器或者运行时环境添加所需的 polyfill，也包括会自动帮助我们添加 autoprefixer（所以相当于已经内置了 autoprefixer）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> postcss-preset-env <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// postcss.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;postcss-preset-env&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="打包处理图片资源" tabindex="-1"><a class="header-anchor" href="#打包处理图片资源" aria-hidden="true">#</a> 打包处理图片资源</h2><p>在项目中使用图片，比较常见的使用图片的方式是两种</p><ul><li>img 元素，设置 src 属性</li><li>其他元素（比如 div），设置 background-image 的 css 属性</li></ul><p>**base 图片适用于小图标，不用发送 ajax 网络请求，大图用 url。**转换成后 base64 后，占用内存变大。</p><p>图片资源属于与 url 路径相关的文件。</p><ol><li><p>运行 命令，安装处理 url 文件的 loader</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i --save-dev url-loader file-loader
<span class="token function">npm</span> i url-loader@4.1.1 file-loader@6.2.0 <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 webpack.config.js 的 module -&gt; rules 数组中，<strong>添加 loader 规则</strong>如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpg|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;url-loader?limit=8192&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 **?**之后的使 loader 的参数项</p><ul><li><strong>如果需要调用的 loader 只有一个，则可以只传递一个字符串</strong></li><li>limit 用来指定图片的大小，单位是字节（byte）</li><li>只有 ≤ limit 大小的图片，才会被转为 base64 格式的图片</li></ul></li></ol><h2 id="打包处理-js-文件中的高级语法" tabindex="-1"><a class="header-anchor" href="#打包处理-js-文件中的高级语法" aria-hidden="true">#</a> 打包处理 js 文件中的高级语法</h2><p>webpack 只能打包处理<strong>一部分</strong>高级的 JavaScript 语法。对于那些 webpack 无法处理的高级 js 语法，需要借 助于 <strong>babel-loader</strong> 进行打包处理。例如 webpack 无法处理下面的 JavaScript 代码</p><ol><li><p><strong>运行命令</strong>，安装 babel-loader</p><blockquote><p>webpack 3.x | babel-loader 8.x | babel 7.x</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> babel-loader@8.0.0-beta.0 @babel/core @babel/preset-env webpack
<span class="token function">npm</span> i babel-loader@8.2.2 @babel/core@7.14.6 @babel/plugin-proposal-decorators@7.14.5 <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>添加 loader 规则</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置 babel-loader，在项目根目录下，具体情况要看使用了哪些 babel-loader 插件，创建名为 <strong>babel.config.js</strong>配置文件，比如使用组件库 element-ui 时，就需要配置 如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@vue/cli-plugin-babel/preset&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;component&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">libraryName</span><span class="token operator">:</span> <span class="token string">&quot;element-ui&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">styleLibraryName</span><span class="token operator">:</span> <span class="token string">&quot;theme-chalk&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,33),l=[t];function o(i,r){return n(),a("div",null,l)}const u=s(p,[["render",o],["__file","05_webpack_loader.html.vue"]]);export{u as default};
