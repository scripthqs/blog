import{_ as s,o as n,c as a,f as t}from"./app-10c4e004.js";const e={},p=t(`<h1 id="组件化开发" tabindex="-1"><a class="header-anchor" href="#组件化开发" aria-hidden="true">#</a> 组件化开发</h1><h2 id="什么是组件化" tabindex="-1"><a class="header-anchor" href="#什么是组件化" aria-hidden="true">#</a> 什么是组件化？</h2><p>组件化开发指的是：根据<strong>封装</strong>的思想，<strong>把页面上可复用的 UI 结构封装为组件</strong>，从而方便项目的开发和维护。</p><p>将复杂问题拆分成多个可以处理的小问题，再将其放在整体中。</p><p>在开发中，将一个页面拆分成一个个小的、可复用的组件，每个组件完成属于自己这部分的独立功能，从而方便整个页面的管理和维护。</p><h2 id="vue-中的组件化开发" tabindex="-1"><a class="header-anchor" href="#vue-中的组件化开发" aria-hidden="true">#</a> vue 中的组件化开发</h2><p><strong>Vue 中，所有的组件都继承自 Vue 类的原型</strong>：</p><ul><li>vue 是一个<strong>支持组件化开发</strong>的前端框架。</li><li>vue 中规定：<strong>组件的后缀名是 <code>.vue</code></strong>。App.vue 文件本质上就是一个 vue 的组件</li></ul><h2 id="vue-组件的三个组成部分" tabindex="-1"><a class="header-anchor" href="#vue-组件的三个组成部分" aria-hidden="true">#</a> vue 组件的三个组成部分</h2><p>每个 .vue 组件都由 3 部分构成，分别是</p><ol><li>template -&gt; 组件的模板结构</li><li>script -&gt; 组件的 JavaScript 行为</li><li>style -&gt; 组件的样式</li></ol><p>其中，每个组件中必须包含 template 模板结构，而 script 行为和 style 样式是可选的组成部分</p><h2 id="template" tabindex="-1"><a class="header-anchor" href="#template" aria-hidden="true">#</a> <code>template</code></h2><p>vue 规定：每个组件对应的模板结构，需要定义到 <code>&lt;template&gt;</code>节点</p><ul><li>template 是 vue 提供的容器标签，只起到包裹性质的作用，它不会被渲染为真正的 DOM 元素</li><li>template 中<strong>只能包含唯一的根节点</strong>，一般写在 div 中</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="script" tabindex="-1"><a class="header-anchor" href="#script" aria-hidden="true">#</a> <code>script</code></h2><p>开发者可以在<code>&lt;script&gt;</code>节点中封装组件的 JavaScript 业务逻辑</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>vue 组件中的 data 必须是一个函数，不能直接指向一个数据对象。</strong></p><p>否则会导致多个组件实例共用同一份数据的问题。</p><p>如果组件中的 data 中的是一个对象，到时候创建的组件实例都会指向一个相同的对象。而组件不应该相互影响。</p><h2 id="style" tabindex="-1"><a class="header-anchor" href="#style" aria-hidden="true">#</a> <code>style</code></h2><p>组件内的 <code>&lt;style&gt;</code>节点是可选的，开发者可以在<code>&lt;style&gt;</code> 节点中编写样式<strong>美化当前组件的 UI 结构</strong>。</p><p>默认情况下，<strong>写在 .vue 组件中的样式会全局生效</strong>，因此很容易造成<strong>多个组件之间的样式冲突</strong>问题。</p><p>导致组件之间样式冲突的根本原因是：</p><ul><li>单页面应用程序中，所有组件的 DOM 结构，都是基于<strong>唯一的 index.html</strong> 页面进行呈现的</li><li>每个组件中的样式，都会影响<strong>整个 index.html 页面</strong>中的 DOM 元素</li></ul><p><strong>解决样式冲突：</strong></p><ol><li><p>为每个组件分配<strong>唯一的自定义属性</strong>，在编写组件样式时，通过<strong>属性选择器</strong>来控制样式的作用域</p></li><li><p><strong>添加 <code>scoped</code>属性</strong></p></li><li><p><strong>/deep/ 样式穿透</strong></p></li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>less<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>添加 lang=&quot;less&quot; 属性，即可使用 less 语法编写组件的样式</li><li>添加 <code>scoped</code>属性，它的 CSS 只会应用到当前组件的元素上</li></ul><p>如果给当前组件的 style 节点添加了 scoped 属性，则当前组件的样式对其子组件是不生效的。如果想让某些样式对子组件生效，可以使用 <strong>/deep/ 深度选择器</strong></p>`,32),l=[p];function o(c,i){return n(),a("div",null,l)}const r=s(e,[["render",o],["__file","08_vue_template.html.vue"]]);export{r as default};
