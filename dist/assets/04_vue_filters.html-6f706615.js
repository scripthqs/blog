import{_ as a,o as n,c as s,f as t}from"./app-c6441670.js";const e={},p=t(`<h1 id="过滤器-vue3-已废弃" tabindex="-1"><a class="header-anchor" href="#过滤器-vue3-已废弃" aria-hidden="true">#</a> 过滤器(Vue3 已废弃)</h1><h2 id="过滤器简介" tabindex="-1"><a class="header-anchor" href="#过滤器简介" aria-hidden="true">#</a> 过滤器简介</h2><p>过滤器（Filters）是 vue 为开发者提供的功能，常用于<strong>文本的格式化</strong>。过滤器可以用在两个地方：<strong>插值表达式</strong> 和 <strong>v-bind 属性绑定</strong>。</p><p>过滤器应该被添加在 JavaScript 表达式的<strong>尾部</strong>，由“<strong>管道符</strong><code>|</code>”进行调用</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 插值表达式 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>message | capitalize<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- v-bind 属性绑定 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>raw.id | formatId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>过滤器需要一个自定义语法，打破了大括号内的表达式“只是 JavaScript”的假设，这不仅有学习成本，而且有实现成本</p><p><strong>建议用计算属性或方法代替过滤器，而不是使用过滤器。</strong></p><blockquote><p><strong>在 Vue3.x 中，过滤器已移除，且不再支持。</strong></p></blockquote><h2 id="定义过滤器" tabindex="-1"><a class="header-anchor" href="#定义过滤器" aria-hidden="true">#</a> 定义过滤器</h2><p>在创建 vue 实例期间，可以在 filters 节点中定义过滤器</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>     <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>message <span class="token operator">|</span> xyz<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>

      <span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">xyz</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token string">&#39;!&#39;</span> <span class="token operator">+</span> str
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="私有过滤器" tabindex="-1"><a class="header-anchor" href="#私有过滤器" aria-hidden="true">#</a> 私有过滤器</h2><p>在 filters 节点下定义的过滤器，称为“私有过滤器”，因为它只能在当前 vm 实例所控制的 el 区域内使用。</p><h2 id="全局过滤器" tabindex="-1"><a class="header-anchor" href="#全局过滤器" aria-hidden="true">#</a> 全局过滤器</h2><p>如果希望在多个 vue 实例之间共享过滤器，则可以按照如下的格式定义全局过滤器，注意要在<strong>Vue 实例最上面</strong>定义。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">&quot;hqs&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;@&quot;</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果全局过滤器和私有过滤器冲突，按照就近原则，调用私有过滤器。</p><h2 id="连续调用多个过滤器" tabindex="-1"><a class="header-anchor" href="#连续调用多个过滤器" aria-hidden="true">#</a> 连续调用多个过滤器</h2><p>过滤器可以串联地进行调用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token punctuation">{</span>
    message <span class="token operator">|</span> xyz <span class="token operator">|</span> hqs<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="过滤器传参" tabindex="-1"><a class="header-anchor" href="#过滤器传参" aria-hidden="true">#</a> 过滤器传参</h2><p>过滤器的本质是 JavaScript 函数，因此可以接收参数</p>`,22),o=[p];function c(i,l){return n(),s("div",null,o)}const u=a(e,[["render",c],["__file","04_vue_filters.html.vue"]]);export{u as default};
