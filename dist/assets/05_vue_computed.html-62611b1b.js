import{_ as n,o as s,c as a,f as t}from"./app-c6441670.js";const e={},p=t(`<h1 id="computed" tabindex="-1"><a class="header-anchor" href="#computed" aria-hidden="true">#</a> computed</h1><h2 id="computed-简介" tabindex="-1"><a class="header-anchor" href="#computed-简介" aria-hidden="true">#</a> computed 简介</h2><p>computed 计算属性指的是通过<strong>一系列运算</strong>之后，最终得到<strong>一个属性值</strong>。</p><p>这个<strong>动态计算出来的属性值</strong>可以被模板结构或 methods 方法使用。</p><h2 id="计算属性的使用" tabindex="-1"><a class="header-anchor" href="#计算属性的使用" aria-hidden="true">#</a> 计算属性的使用</h2><p>定义一个函数，return 函数的返回值。</p><ul><li>通过 this 访问数据</li><li>对于任何包含响应式数据的赋值逻辑,你应该使用计算属性</li><li>字符串拼接</li><li>返回函数的计算结果，计算属性的函数写在 computed 中</li><li>使用<strong>计算属性时是属性名</strong>，而不是调用函数的形式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> add <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="计算属性的特点" tabindex="-1"><a class="header-anchor" href="#计算属性的特点" aria-hidden="true">#</a> 计算属性的特点</h2><p>特点：</p><ol><li>定义的时候，要被定义为“方法”</li><li>在使用计算属性的时候，当普通的属性使用即可</li></ol><p>好处：</p><ol><li>实现了代码的复用</li><li>只要计算属性中依赖的数据源变化了，则计算属性会自动重新求值！</li></ol><h2 id="计算属性的-setter-和-getter" tabindex="-1"><a class="header-anchor" href="#计算属性的-setter-和-getter" aria-hidden="true">#</a> 计算属性的 setter 和 getter</h2><p>计算属性原理是底层借助了<strong>Object.defineProperty 的 setter 和 getter</strong>来的</p><p><code>computed</code>计算属性中，一般是一个对象，里面有两个方法：getter 和 setter，但是计算属性默认只用 getter，所以一般都是简写的，所有调用都不加括号</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 语法糖的写法</span>
    <span class="token function">fullName1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 完整的写法:</span>
    <span class="token literal-property property">fullName2</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> names <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="计算属性的缓存" tabindex="-1"><a class="header-anchor" href="#计算属性的缓存" aria-hidden="true">#</a> 计算属性的缓存</h2><p>计算属性虽然和定义方法得到的最终结果是一样的，但是计算属性是基于它们的<strong>响应式依赖</strong>进行缓存的。所以多使用计算属性少使用方法。</p><ul><li>computed 底层会缓存, 性能更高</li><li>计算属性会基于它们的依赖关系进行缓存</li><li>在数据不发生变化时，计算属性是不需要重新计算的</li><li>但是如果依赖的数据发生变化，在使用时，计算属性依然会重新进行计算</li></ul>`,20),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","05_vue_computed.html.vue"]]);export{u as default};
