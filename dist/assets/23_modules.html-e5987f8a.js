import{_ as s,o as n,c as a,f as e}from"./app-f4e03468.js";const o={},t=e(`<h1 id="模块化开发" tabindex="-1"><a class="header-anchor" href="#模块化开发" aria-hidden="true">#</a> 模块化开发</h1><h2 id="为什么使用模块化" tabindex="-1"><a class="header-anchor" href="#为什么使用模块化" aria-hidden="true">#</a> 为什么使用模块化</h2><ul><li>解决全局变量命名冲突问题</li><li>解决 js 文件必须按照一定顺序引入的问题</li></ul><h2 id="如何使用模块化" tabindex="-1"><a class="header-anchor" href="#如何使用模块化" aria-hidden="true">#</a> 如何使用模块化</h2><ul><li>使用匿名函数，还需要使用一个模块作为出口，暴露函数里面的变量</li><li>在匿名函数中定义一个对象</li><li>给对象添加各种需要暴露的属性和方法</li><li>最后将这个对象返回，并且在外面使用一个 ModuleA 接收</li></ul><h2 id="常见的模块化规范" tabindex="-1"><a class="header-anchor" href="#常见的模块化规范" aria-hidden="true">#</a> 常见的模块化规范</h2><p>ES6 之前，js 没有模块化，JavaScript 社区已经尝试并提出了 AMD、CMD、CommonJS 等模块化规范。</p><p><strong>ES6</strong>标准发布后，<strong>module 成为标准</strong>，标准使用是以<strong>export 指令导出</strong>接口，以<strong>import 引入</strong>模块。</p><p><strong>但是在我们一贯的 node 模块</strong>中，我们依然采用的是<strong>CommonJS 规范</strong>，使用<strong>module.exports 导出</strong>接口，使用<strong>require 引入</strong>模块，</p><p>模块化已经有很多既有的规范和对应的实现方案，常见的模块化规范：</p><ul><li>CommonJS<strong>node 和 webpack 使用，适用于服务器端</strong></li><li>AMD <strong>适用浏览器端</strong></li><li>CMD<strong>适用浏览器端</strong></li></ul><p>太多的模块化规范给开发者增加了学习的难度与开发的成本。因此，大一统的 <strong>ES6 模块化规范诞生</strong>了</p><p>ES6 的 Modules <strong>vuecli 脚手架中可以使用，ES6 语法，js 文件中都可以使用</strong></p><p>模块化两个核心：<strong>导出和导入</strong></p><h2 id="commonjs-模块化的导出和导入" tabindex="-1"><a class="header-anchor" href="#commonjs-模块化的导出和导入" aria-hidden="true">#</a> CommonJS 模块化的导出和导入</h2><p>node.js 遵循了 CommonJS 的模块化规范。其中：</p><ul><li>导入其它模块使用 require() 方法</li><li>模块对外共享成员使用 module.exports 对象或者 exports</li><li>模块化的好处： 大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，利人利己</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//导出</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> flag<span class="token punctuation">,</span> sum <span class="token punctuation">}</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>fs <span class="token operator">=</span> fs<span class="token punctuation">;</span>
<span class="token comment">//导入</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> flag<span class="token punctuation">,</span> sum <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./aaa.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exports" tabindex="-1"><a class="header-anchor" href="#exports" aria-hidden="true">#</a> exports</h3><p>exports 是一个对象，可以在这个对象中添加很多个属性，添加的属性会导出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//bar.js</span>
exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;aaa&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>
<span class="token comment">//index.js</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./bar.js&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 此时的bar变量等于exports对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="module-exports" tabindex="-1"><a class="header-anchor" href="#module-exports" aria-hidden="true">#</a> module.exports</h3><p>在 Node 中真正用于导出的其实根本不是 exports，而是 module.exports，是因为 module 对象的 exports 属性是 exports 对象的一个引用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports <span class="token operator">===</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>通过 exports 只能使用.的方式来向外暴露内部变量</li><li>module.exports 既可以使用.的形式，也可以直接赋值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;sayHello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 1.在开发中使用的很少</span>
exports<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>sayHello <span class="token operator">=</span> sayHello<span class="token punctuation">;</span>

<span class="token comment">// 2.将模块中内容导出</span>
<span class="token comment">// 结论: Node导出的本质是在导出module.exports对象</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>sayHello <span class="token operator">=</span> sayHello<span class="token punctuation">;</span>

<span class="token comment">// console.log(exports.name, &quot;----&quot;)</span>
<span class="token comment">// console.log(exports.age, &quot;----&quot;)</span>
<span class="token comment">// console.log(exports.sayHello, &quot;----&quot;)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports <span class="token operator">===</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3.开发中常见的写法</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">,</span>
  age<span class="token punctuation">,</span>
  sayHello<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="require" tabindex="-1"><a class="header-anchor" href="#require" aria-hidden="true">#</a> require</h3><p>require 是一个函数，可以帮助我们引入一个文件（模块）中导出的对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * X是一个Node核心模块，比如path、http
 * 直接返回核心模块，并且停止查找
 */</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> http<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * X是以 ./ 或 ../ 或 /（根目录）开头的
 * 将X当做一个文件在对应的目录下查找
 * 没有找到对应的文件，将X作为一个目录
 * 没有找到，那么报错：not found
 */</span>
<span class="token keyword">const</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./utils&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 *  名称不是路径, 也不是一个内置模块
 *  找node_modules
 */</span>
<span class="token keyword">const</span> aaa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;axios&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>axios<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="commonjs-的特点" tabindex="-1"><a class="header-anchor" href="#commonjs-的特点" aria-hidden="true">#</a> CommonJS 的特点</h3><p>CommonJS 加载模块是同步的，只有等到对应的模块加载完毕，当前模块中的内容才能被运行。</p><ul><li>服务器加载的 js 文件都是本地文件，加载速度非常快，所以服务器加载没问题</li></ul><p>但是在浏览器中，同步加载可能会影响 js 代码的正常运行，所有通常不使用 CommonJS 规范。早期浏览器使用模块化是 AMD 或者 CMD，现在都是用 ES Modules，并且 webpack 等工具可以对 CommonJS 或者 ES Modules 的转化</p><h2 id="es6-模块化实现" tabindex="-1"><a class="header-anchor" href="#es6-模块化实现" aria-hidden="true">#</a> ES6 模块化实现</h2><p><strong>ES6 模块化规范是浏览器端与服务器端通用的模块化开发规范</strong>。它的出现极大的降低了前端开发者的模块化学习成本，开发者不需再额外学习 AMD、CMD 或 CommonJS 等模块化规范。</p><p>ES6 模块化规范中定义：</p><ul><li>每个 js 文件都是一个独立的模块</li><li><strong>导入</strong>其它模块成员使用 <strong>import 关键字</strong></li><li><strong>导出</strong>模块成员使用 <strong>export 关键字</strong></li></ul><h3 id="在-node-js-中体验-es6-模块化" tabindex="-1"><a class="header-anchor" href="#在-node-js-中体验-es6-模块化" aria-hidden="true">#</a> 在 node.js 中体验 ES6 模块化</h3><p>node.js 中默认仅支持 CommonJS 模块化规范，若想基于 node.js 体验与学习 ES6 的模块化语法，可以按照 如下两个步骤进行配置：</p><ul><li><p>确保安装了 v14.15.1 或更高版本的 node.js</p></li><li><p>在 package.json 的根节点中添加 &quot;type&quot;: &quot;module&quot; 节点</p></li></ul><h3 id="es6-exports" tabindex="-1"><a class="header-anchor" href="#es6-exports" aria-hidden="true">#</a> ES6 exports</h3><p>export 关键字将一个模块中的变量、函数、类等导出。</p><p>导出的具体方式有 3 种：</p><ol><li>在语句声明前直接加上 export 导出</li><li>将需要导出的标识符，放在 export 后面的<code>{}</code>，注意<code>{}</code>不是 ES6 的对象字面量增强写法，也不是表示一个对象。<code>export {name:name}</code>是错误的写法。</li><li>导出时给标识符起一个别名，通过 <code>as</code> 关键字起别名</li></ol><h3 id="es6-import" tabindex="-1"><a class="header-anchor" href="#es6-import" aria-hidden="true">#</a> ES6 import</h3><p>import 关键字负责从另外一个模块中导入内容</p><p>导入的具体方式：</p><ol><li><code>import {标识符列表 } from 模块</code>，注意<code>{}</code>不是表示一个对象，只是存放导入的标识符列表内容。</li><li>导入时给标识符起别名，也是通过<code>as</code>关键字</li><li>通过<code>*</code>将模块功能放在模块功能对象上</li></ol><p>另外 export 和 import 可以结合使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> sum <span class="token keyword">as</span> barSum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./bar.js&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>import 函数返回一个 Promise，可以通过 then 获取结果</strong>。</p><h3 id="默认导入导出" tabindex="-1"><a class="header-anchor" href="#默认导入导出" aria-hidden="true">#</a> 默认导入导出</h3><p><strong>默认导出</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> 默认导出的成员<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> fun <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>默认导入</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> 接收名称 <span class="token keyword">from</span> <span class="token string">&quot;模块标识符&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> m1 <span class="token keyword">from</span> <span class="token string">&quot;./01.module.js&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>每个模块中，只允许使用唯一的一次 export default，否则会报错！</li><li>默认导入时的接收名称可以任意名称，只要是合法的成员名称即可</li><li>在导入时不需要使用 {}，并且可以自己来指定名字</li></ul><h3 id="按需导入导出" tabindex="-1"><a class="header-anchor" href="#按需导入导出" aria-hidden="true">#</a> 按需导入导出</h3><p><strong>按需导出</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> 按需导出的成员
<span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>按需导入</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> s1 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;模块标识符&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> s1 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./02.module.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> 自定义名字 <span class="token keyword">from</span> <span class="token string">&quot;./02.module.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> s1 <span class="token keyword">as</span> 新名字 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./02.module.js&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>每个模块中可以使用<strong>多次</strong>按需导出</li><li>按需导入的成员名称必须和按需导出的<strong>名称保持一致</strong></li><li>按需导入时，可以使用 <strong>as 关键字进行重命名</strong></li><li>按需导入可以和<strong>默认导入一起</strong>使用</li></ol><p>如果需要导入的变量很多时，使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> 自定义名字 <span class="token keyword">from</span> <span class="token string">&quot;./aaa.js&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="直接导入并执行" tabindex="-1"><a class="header-anchor" href="#直接导入并执行" aria-hidden="true">#</a> 直接导入并执行</h3><p>如果只想单纯地执行某个模块中的代码，并不需要得到模块中向外共享的成员。此时，可以直接导入并执行模 块代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//直接导入</span>
<span class="token keyword">import</span> <span class="token string">&quot;./style.css&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="require-import-的区别" tabindex="-1"><a class="header-anchor" href="#require-import-的区别" aria-hidden="true">#</a> require，import 的区别</h2><p>require/exports 的用法只有以下三种简单的写法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>fs <span class="token operator">=</span> fs<span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> fs<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>import/export 的写法就多种多样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token keyword">default</span> <span class="token keyword">as</span> fs<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> fs <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>readFile<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>readFile <span class="token keyword">as</span> read<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>
<span class="token keyword">import</span> fs<span class="token punctuation">,</span> <span class="token punctuation">{</span>readFile<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> fs
<span class="token keyword">export</span> <span class="token keyword">const</span> fs
<span class="token keyword">export</span> <span class="token keyword">function</span> readFile
<span class="token keyword">export</span> <span class="token punctuation">{</span>readFile<span class="token punctuation">,</span> read<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>CommonJS 还是 ES6 Module 输出都可以看成是一个具备多个属性或者方法的对象；</li><li>default 是 ES6 Module 所独有的关键字，export default fs 输出默认的接口对象，import fs from &#39;fs&#39; 可直接导入这个对象；</li><li>ES6 Module 中导入模块的属性或者方法是强绑定的，包括基础类型；而 CommonJS 则是普通的值传递或者引用传递。</li></ol>`,74),p=[t];function i(l,c){return n(),a("div",null,p)}const u=s(o,[["render",i],["__file","23_modules.html.vue"]]);export{u as default};
