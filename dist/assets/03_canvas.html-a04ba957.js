import{_ as n,o as a,c as s,f as t}from"./app-10c4e004.js";const e={},p=t(`<h1 id="canvas" tabindex="-1"><a class="header-anchor" href="#canvas" aria-hidden="true">#</a> Canvas</h1><h2 id="canvas-简介" tabindex="-1"><a class="header-anchor" href="#canvas-简介" aria-hidden="true">#</a> Canvas 简介</h2><p>Canvas 是 html5 新增元素，提供了很多 javaScript 绘图 API，例如绘制路径，矩形，圆，文本、图像等。</p><ul><li><code>canvas</code>标签只有 2 个属性，<code>width</code>和<code>height</code>单位默认 px，当没有设置宽高时，canvas 是默认初始化宽为 300px，高为 150px。</li><li><code>canvas</code>必须要有结束标签，<code>&lt;canvas&gt;&lt;/canvas&gt;</code>，如果没有，其他内容会认为是替代内容，不会显示出来。</li><li><code>canvas.getContext()</code> 方法是否存在来检查浏览器是否支持 Canvas（现代浏览器基本都支持）</li><li><code>canvas</code>没有 src 和 alt 属性。</li><li><code>canvas</code>也可以通过 css 选择器设置 css 样式</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">canvas</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">canvas:hover</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tutorial<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>300<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>300px<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 你的浏览器不兼容Canvas,请升级您的浏览器! <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 1.拿到canvas的元素对象</span>
      <span class="token keyword">let</span> canvasEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;tutorial&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>canvasEl<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 2.拿到Canvas渲染的上下文</span>
      <span class="token comment">// ctx: CanvasRenderingContext2D</span>
      <span class="token comment">// ctx是一个绘图的上下文: 提供了绘图的指令, 可以绘制各种图形( 圆形 直线 椭圆... )</span>
      <span class="token keyword">let</span> ctx <span class="token operator">=</span> canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2d | webgl</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="canvas-的特点" tabindex="-1"><a class="header-anchor" href="#canvas-的特点" aria-hidden="true">#</a> Canvas 的特点</h2><ul><li>适合像素级处理，能够以 <code>.png</code> 或 <code>.jpg</code> 格式保存图像，适合对图片进行像素级的处理</li><li>可以做图像游戏开发</li><li>移动端不能过多使用，占内存</li><li>只能通过 js 操作</li><li>放大图片会模糊，颗粒化和像素化</li></ul><h2 id="canvas-grid-和坐标空间" tabindex="-1"><a class="header-anchor" href="#canvas-grid-和坐标空间" aria-hidden="true">#</a> Canvas Grid 和坐标空间</h2><p>学习 canvas 需要了解 canvas 网络(canvas grid) 和坐标系。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>canvas width<span class="token operator">=</span><span class="token string">&quot;150&quot;</span> height<span class="token operator">=</span><span class="token string">&quot;150&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>当新建一个<code>width:150px;height:150px</code>时，<code>canvas</code>元素会默认被网格覆盖。</li><li>通常来说，网格中的一个单元相当于 canvas 的一个像素。</li><li>网格的原点（0，0）位于坐标的左上角，所有元素都相对于该原点位置。</li><li>网格理解为原点在左上角的空间坐标系。</li><li>网格的原点可以变换，旋转、缩放，移动原点后，后续的变换都会基于新的坐标系。</li></ul><h2 id="canvas-绘图的方法" tabindex="-1"><a class="header-anchor" href="#canvas-绘图的方法" aria-hidden="true">#</a> Canvas 绘图的方法</h2><p>canvas 绘图的方式有两种：矩形方法和路径方法。</p><ul><li>简单的图形可以使用矩形方法。</li><li>复杂的图形都是由路径组成。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//绘制矩形</span>
<span class="token function">fillRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//绘制一个填充的矩形</span>
<span class="token function">strokeRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//绘制一个矩形的边框</span>
<span class="token function">clearRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清除指定矩形区域，让清除部分完全透明。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路径-更通用" tabindex="-1"><a class="header-anchor" href="#路径-更通用" aria-hidden="true">#</a> 路径（更通用）</h2><p>通过路径绘制图形：</p><ol><li>首先需要创建路径起始点（beginPath）。</li><li>然后使用绘图命令去画出路径( rect，arc 、moveTo、lineTo )，rect 画矩形，arc 画圆，lineTo 画线</li><li>之后把路径闭合( closePath , 不是必须)，看情况是否需要闭合。</li><li>一旦路径生成，就能通过描边(stroke)或填充路径区域(fill)来渲染图形。</li></ol><h3 id="绘制直线" tabindex="-1"><a class="header-anchor" href="#绘制直线" aria-hidden="true">#</a> 绘制直线</h3><ol><li>lineWidth <ul><li>设置线条宽度的属性值必须为正数。默认值是 1px，不需单位。（ 零、负数、Infinity 和 NaN 值将被忽略）</li><li>路径的两边各绘制线宽的一半</li></ul></li><li>moveTo(x,y) <ul><li>moveTo 方法可以移动坐标，但是不出现绘制的途径</li><li>moveTo(x,y)配合 beginPath()，此时的坐标为 x,y</li><li>moveTo 方法可以绘制一些不连续的路径</li></ul></li><li>lineTo(x,y) <ul><li>lineTo(x,y)表示从当前位置到指定(x,y)位置的直线</li><li>开始的点是上次介绍的点</li><li>或者可以用 moveTo 指定移动点</li></ul></li></ol><h3 id="绘制圆、圆弧" tabindex="-1"><a class="header-anchor" href="#绘制圆、圆弧" aria-hidden="true">#</a> 绘制圆、圆弧</h3><p>arc(x, y, radius, startAngle, endAngle, anticlockwise)，该方法有六个参数：</p><ul><li>x、y：圆心坐标</li><li>radius：圆弧半径</li><li>startAngle、endAngle：指定开始 和 结束的弧度。以 x 轴为基准（注意：单位是弧度，不是角度）</li><li>anticlockwise：为一个布尔值。true 是逆时针方向，false 是顺时针方向，默认为 false</li></ul><h3 id="绘制矩形" tabindex="-1"><a class="header-anchor" href="#绘制矩形" aria-hidden="true">#</a> 绘制矩形</h3><p>除了使用 fillRect 和 strokeRect，还有<code>ctx.rect(x, y, width, height)</code></p><ul><li><code>ctx.rect(x, y, width, height)</code>这种方法是路径的方法，需要配合 stroke 或者 fill</li><li>当该方法执行的时候，<code>moveTo(x, y)</code> 方法自动设置坐标参数（0,0）。也就是说，当前笔触自动重置回默认坐标。</li></ul><h2 id="色彩" tabindex="-1"><a class="header-anchor" href="#色彩" aria-hidden="true">#</a> 色彩</h2><p>绘制图形后，如果想给图形上色，需要两个重要属性</p><ul><li><code>fillStyle = color</code>设置图形的填充颜色，需在 fill() 函数前调用</li><li><code>strokeStyle = color</code>设置图形轮廓的颜色，需在 stroke() 函数前调用。</li></ul><p>默认情况下，线条和填充颜色都是黑色（CSS 颜色值 #000000）</p><ul><li>一旦设置了 strokeStyle 或者 fillStyle 的值，那么这个新值就会成为新绘制的图形的默认值</li><li>如果要给图形上不同的颜色，需要重新设置 fillStyle 或 strokeStyle 的值</li></ul><p>注意区分：</p><ul><li>fill() 函数是图形填充，fillStyle 属性是设置填充色，相互搭配才生效</li><li>stroke() 函数是图形描边，strokeStyle 属性是设置描边色，相互搭配才生效</li></ul><h3 id="设置透明度" tabindex="-1"><a class="header-anchor" href="#设置透明度" aria-hidden="true">#</a> 设置透明度</h3><p>除了可以绘制实色图形，我们还可以用 canvas 来绘制半透明的图形，有 2 种方法：</p><ol><li>strokeStyle 和 fillStyle 属性结合 RGBA</li><li>globalAlpha 属性 <ul><li>globalAlpha = 0 ~ 1</li><li>这个属性影响到 canvas 里所有图形的透明度</li><li>有效的值范围是 0.0（完全透明）到 1.0（完全不透明），默认是 1.0。</li></ul></li></ol><h2 id="线的样式" tabindex="-1"><a class="header-anchor" href="#线的样式" aria-hidden="true">#</a> 线的样式</h2><ul><li>lineWidth：设置线宽</li><li>lineCap： 属性的值决定了线段端点显示的样子 <ul><li>butt 截断，默认是 butt。</li><li>round 圆形</li><li>square 正方形</li></ul></li><li>lineJoin：属性的值决定了图形中线段连接处所显示的样子 <ul><li>miter 斜槽规，默认是 miter</li><li>round 圆形</li><li>bevel 斜角</li></ul></li></ul><h2 id="绘制文本" tabindex="-1"><a class="header-anchor" href="#绘制文本" aria-hidden="true">#</a> 绘制文本</h2><p>canvas 提供了两种方法来渲染文本：</p><ol><li>fillText(text, x, y [, maxWidth]) <ul><li>在 (x,y) 位置，填充指定的文本</li><li>绘制的最大宽度（可选）。</li></ul></li><li>strokeText(text, x, y [, maxWidth]) <ul><li>在 (x,y) 位置，绘制文本边框</li><li>绘制的最大宽度（可选）。</li></ul></li></ol><p>文本的样式属性：</p><ul><li>font：字体属性。默认的字体是：10px sans-serif。如果要修改，必须要有这两个属性。</li><li>textAlign：文本对齐属性。可选的值包括：start, end, left, right or center。默认值是 start</li><li>textBaseline：基线对齐。可选的值包括：top, hanging, middle, alphabetic, ideographic, bottom。默认值是 alphabetic。</li></ul><h2 id="绘制图片" tabindex="-1"><a class="header-anchor" href="#绘制图片" aria-hidden="true">#</a> 绘制图片</h2><p>绘制图片，可以使用 drawImage 方法将它渲染到 canvas 里。drawImage 可以传的参数很多，常用的有：</p><ul><li>drawImage(image, x, y, width, height)，其中 image 参数是 image 或者 canvas 对象，x 和 y 是其在目标 canvas 里的起始坐标。width 和 height，这两个参数用来控制当向 canvas 画入时应该缩放的大小。</li></ul><p>canvas 的 还有一些 API 设置图片的来源</p><ul><li>HTMLImageElement：这些图片是由 Image()函数构造出来的，或者任何的<code>&lt;img&gt;</code>元素</li><li>HTMLVideoElement：用一个 HTML 的 <code>&lt;video&gt;</code>元素作为图片源，可以从视频中抓取当前帧作为一个图像</li><li>HTMLCanvasElement：可以使用另一个 <code>&lt;canvas&gt;</code> 元素作为图片源</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这种使用比较多</span>
<span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//图片加载完后有onload事件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="绘制状态" tabindex="-1"><a class="header-anchor" href="#绘制状态" aria-hidden="true">#</a> 绘制状态</h2><p>Canvas 绘画状态</p><ul><li>是当前绘画时所产生的样式和变形的一个快照</li><li>Canvas 在绘画时，会产生相应的绘画状态，其实我们是可以将某些绘画的状态存储在栈中来为以后复用</li><li>Canvas 绘画状态的可以调用 save 和 restore 方法是用来保存和恢复，这两个方法都没有参数，并且它们是成对存在的</li></ul><p>保存和恢复（Canvas）绘画状态</p><ul><li>save()：保存画布 (canvas) 的所有绘画状态</li><li>restore()：恢复画布 (canvas) 的所有绘画状态</li></ul><p>Canvas 绘画状态包括：</p><ul><li>当前应用的变形（即移动，旋转和缩放）</li><li>以及一些常用属性：strokeStyle, fillStyle, globalAlpha, lineWidth, lineCap, lineJoin, miterLimit, shadowOffsetX, shadowOffsetY, shadowBlur, shadowColor, font, textAlign, textBaseline 等等</li><li>当前的裁切路径（clipping path）</li></ul><h2 id="形变" tabindex="-1"><a class="header-anchor" href="#形变" aria-hidden="true">#</a> 形变</h2><p>类似 CSS3 支持形变</p><ul><li>translate(x,y)：平移</li><li>rotate(angle)：旋转。</li><li>scale(x, y)：缩放</li><li>transform(a, b, c, d, e, f)： 允许对变形矩阵直接修改。这个方法是将当前的变形矩阵乘上一个基于自身参数的矩阵。</li></ul><p>一般形变都配合 canvas 状态使用</p><ul><li>形变需要在绘制图形前调用</li><li>在做变形之前先调用 save 方法保存状态是一个很好的习惯</li><li>大多数情况下，调用 restore 方法比手动恢复原先的状态要简单得多</li><li>如果在一个循环中做位移，但没有保存和恢复 canvas 状态，很可能到最后会发现有些东西不见了，因为它很可能已超出 canvas 画布以外了</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ctx<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保存形变之前的状态</span>
<span class="token comment">// 1.形变</span>
ctx<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 360 -&gt; Math.PI * 2</span>
<span class="token comment">// 180 -&gt; Math.PI</span>
<span class="token comment">// 1 -&gt; Math.PI / 180</span>
<span class="token comment">// 45 -&gt; Math.PI / 180 * 45</span>
ctx<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绘图结束(恢复形变之前的状态)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 save 和 restore 可以保证形变的坐标轴参照一直是原点</p><h2 id="动画" tabindex="-1"><a class="header-anchor" href="#动画" aria-hidden="true">#</a> 动画</h2><p>canvas 动画需要对画布上所有图形进行一帧一帧的重绘。需要使用三种方法来定期执行指定函数进行重绘。</p><ul><li>setInterval</li><li>setTimeout</li><li>requestAnimationFrame</li></ul><p>如要画出流畅动画，1s 需绘 60 帧</p><ol><li>用 clearRect 方法清空 canvas</li><li>保存 canvas 状态</li><li>绘制动画图形的一帧</li><li>恢复 canvas 状态</li></ol><p>定时器不是非常精准的，放到了宏任务中等待执行。如果有一直未处理的微任务，回调函数可能不在指定事件内触发回调。如果要更加平稳和精准，可以使用 requestAnimationFrame 函数</p><h3 id="requestanimationframe-函数" tabindex="-1"><a class="header-anchor" href="#requestanimationframe-函数" aria-hidden="true">#</a> requestAnimationFrame 函数</h3><p>希望执行一个动画，并且要求浏览器在下次重绘之前调用该函数的回调函数来更新动画。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ctx <span class="token operator">=</span> canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2d | webgl</span>

<span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
  ctx<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="开发中常用" tabindex="-1"><a class="header-anchor" href="#开发中常用" aria-hidden="true">#</a> 开发中常用</h2><p>上传图片前压缩</p><ul><li>ctx.drawImage</li><li>canvas.toBlob</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 4. 导出压缩后的图片（jpeg 格式，质量 0.7）</span>
canvas<span class="token punctuation">.</span><span class="token function">toBlob</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 预览压缩后的图片</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;preview&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将 blob 上传到服务器</span>
    <span class="token comment">// new FormData().append(&#39;file&#39;, blob)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">&quot;image/jpeg&quot;</span><span class="token punctuation">,</span>
  <span class="token number">0.7</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对页面进行截图：用 html2canvas 库</p><p>裁剪图片</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 例如：裁剪图片中间 100x100 区域，绘制到 canvas 左上角</span>
  <span class="token keyword">const</span> sx <span class="token operator">=</span> img<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> sy <span class="token operator">=</span> img<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> sWidth <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> sHeight <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> dx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> dy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> dWidth <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> dHeight <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> sx<span class="token punctuation">,</span> sy<span class="token punctuation">,</span> sWidth<span class="token punctuation">,</span> sHeight<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> dWidth<span class="token punctuation">,</span> dHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>滤镜效果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span>filter <span class="token operator">=</span> currentFilter<span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span>filter <span class="token operator">=</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 恢复默认</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,81),c=[p];function l(o,i){return a(),s("div",null,c)}const r=n(e,[["render",l],["__file","03_canvas.html.vue"]]);export{r as default};
