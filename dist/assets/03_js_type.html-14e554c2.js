import{_ as n,o as s,c as a,f as e}from"./app-10c4e004.js";const t={},p=e(`<h1 id="js-数据类型" tabindex="-1"><a class="header-anchor" href="#js-数据类型" aria-hidden="true">#</a> js 数据类型</h1><p>在计算机中，不同的数据所需的存储空间不同，为了充分利用存储空间，就定义了不同的数据类型。js 一共 6 种数据类型（es6 之前），5 种原始数据类型（值类型），1 种引用数据类型（引用类型）。2021 年，已经有 8 种数据类型。</p><ul><li><strong><code>String</code> 字符串</strong></li><li><strong><code>Number</code> 数值</strong></li><li><strong><code>Boolean</code> 布尔值</strong></li><li><strong><code>Null</code> 空值</strong></li><li><strong><code>Undefined</code> 未定义</strong></li><li><strong><code>Object</code> 对象类型\`</strong></li><li><strong><code>Symbol</code> (ES6) 独一无二的值类型。</strong></li><li><strong><code>BigInt</code> (ES10) 大整数基本类型。</strong></li></ul><h2 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number</h2><p>js 数字类型既可以用来保存整数值，也可以保存小数（浮点数）。</p><p>值在双精度 64 位二进制（-(2^53 -1) 到 2^53 -1）。</p><p>几个特殊的数字：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">+</span><span class="token number">Infinity</span> 正无穷，超过最大值返回
<span class="token operator">-</span><span class="token number">Infinity</span> 负无穷
<span class="token number">NaN</span> 非数值，Not<span class="token operator">-</span>a<span class="token operator">-</span>Number
Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> js可表示的最大值
Number<span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> js可表示的最小正值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>NaN 与任何值都不相等，包括 NaN 本身，Undefined 和任何数值计算的结果都是 NaN</li><li><code>+0 === -0</code>但是做分母时，返回值不一样</li></ul><h3 id="数字进制" tabindex="-1"><a class="header-anchor" href="#数字进制" aria-hidden="true">#</a> 数字进制</h3><ul><li>十进制：没有前导 0 的数值。</li><li>八进制：有前缀 0o 或 0O 的数值，或者有前导 0、且只用到 0-7 的八个阿拉伯数字的数值。</li><li>十六进制：有前缀 0x 或 0X 的数值。</li><li>二进制：有前缀 0b 或 0B 的数值</li></ul><h3 id="基本运算" tabindex="-1"><a class="header-anchor" href="#基本运算" aria-hidden="true">#</a> 基本运算</h3><ul><li><p><code>+</code>只有在两边都是 Number 类型时，才是数字相加，否则就是连字符，用来连接字符串。</p></li><li><p><code>-</code>时，&quot;2&quot;-1 得到的结果却是数值 1，字符串会自动做隐式转换。</p></li></ul><h3 id="运算精度" tabindex="-1"><a class="header-anchor" href="#运算精度" aria-hidden="true">#</a> 运算精度</h3><p>JS 中整数运算基本可以保证准确，小数运算很可能得到一个不准确的结果。要进行准确的运算的方法；</p><ul><li>简单精度 使用<code>toFix()</code>方法进行小数的截取</li><li>实际开发中，可以使用数学运算开源库 <ul><li>Math.js 文件很大，压缩的文件 500kb，涉及大型的复杂运算使用</li><li>decimal.js 轻量的运算库，压缩的文件 32kb，大多数数学运算项目都可以满足。</li></ul></li></ul><p>开源库既可以使用 cdn 的方式引用，也可以使用 npm 包的方式引入。</p><h3 id="数值相关的全局方法" tabindex="-1"><a class="header-anchor" href="#数值相关的全局方法" aria-hidden="true">#</a> 数值相关的全局方法</h3><ol><li><p>parseInt()将字符串转换成整数</p><ul><li><p>头部空格会自动消除，不是字符串，则会先转为字符串再转换</p></li><li><p>第一个字符不能转换成数字（除后面直接跟着数字的正负号），返回 NaN。</p></li><li><p>返回值只有两种可能，十进制整数或者 NaN。</p></li><li><p>字符串以 0x 或 0X 开头，parseInt 会将其按照十六进制数解析</p></li><li><p>如果字符串以 0 开头，将其按照 10 进制解析或者 8 进制。</p></li><li><p>科学计数法不好使，e 会被当成普通字母。</p></li><li><p>parseInt 方法还可以接受第二个参数（2 到 36 之间，如果第二个参数没有意义则会被忽略），表示被解析的值的进制。默认值是 10。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">1000000000000000000000.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;1e+21&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">0.0000008</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;8e-7&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>

<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;1000&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;1000&quot;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 216</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;1000&quot;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 512</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>parseFloat()将一个字符串转为浮点数。</p><ul><li>科学计数法好使。</li><li>空字符串转为 NaN。</li></ul></li><li><p>isNaN()方法可以用来判断一个值是否为 NaN。</p><ul><li><p>只对数值有效，如果传入其他值，会被先转成数值。</p></li><li><p>isNaN 为 true 的值，有可能不是 NaN，而是一个字符串。</p></li><li><p>对于对象和数组，isNaN 也返回 true。</p></li><li><p>但是对于空数组和只有一个数值成员的数组，isNaN 又返回 false。</p></li><li><p>NaN 是唯一不等于自身的值，这是最可靠的方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myIsNaN</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> value <span class="token operator">!==</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>isFinite()方法返回一个布尔值，表示某个值是否为正常的数值。</p><ul><li>Infinity、-Infinity、NaN 和 undefined 这几个值会返回 false</li><li><code>isFinite</code>对于其他的数值都会返回 true。</li></ul></li></ol><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h2><p>字符串使用单引号或者双引号。要点：</p><ul><li><code>&#39;&#39;</code>引号间什么都不写，称为空字符串。</li><li>同类引号不能嵌套。</li><li>对于一些特殊的符号，可以使用<code>\\</code>作为转义字符。 <ul><li><code>\\&#39;</code> 单引号</li><li><code>\\&quot;</code> 双引号</li><li><code>\\n</code> 换行</li><li><code>\\r</code>回车</li><li><code>\\b</code>空格</li></ul></li></ul><h3 id="获取字符串的长度" tabindex="-1"><a class="header-anchor" href="#获取字符串的长度" aria-hidden="true">#</a> 获取字符串的长度</h3><p>字符串由若干份字符串组成，这些字符的数量就是字符串的长度，可以通过 length 属性获取整个字符串的长度。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">&quot;你好&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str3 <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str4 <span class="token operator">=</span> <span class="token string">&quot;hello,world&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str4<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一个中文、英文都算一个字符</li><li>一个中文标点、英文标点算一个字符</li><li>一个空格算一个字符，多个连续空格也算多个字符。</li></ul><h3 id="字符串的拼接" tabindex="-1"><a class="header-anchor" href="#字符串的拼接" aria-hidden="true">#</a> 字符串的拼接</h3><p>多个字符串之间可以使用加号 <code>+</code> 进行拼接。</p><p><code>字符串 + 任意数据类型 = 拼接之后的新字符串</code></p><p>拼接前，任意数据类型会强制转换成字符串，然后再拼接成一个新的字符串。应用：</p><ul><li><code>&#39;&#39; + 任意数据类型</code> 可以强制转换成字符串</li></ul><h3 id="字符串与数组" tabindex="-1"><a class="header-anchor" href="#字符串与数组" aria-hidden="true">#</a> 字符串与数组</h3><ul><li>字符串可以视为字符数组，因此可以使用方括号运算符，用来返回某个位置的字符，从 0 开始。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;h&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;e&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;o&quot;</span>
<span class="token comment">// 直接对字符串使用方括号运算符</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;e&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果方括号中的数字超过字符串的长度，或者方括号中根本不是数字，则返回 undefined。</li><li>字符串与数组的相似性仅此而已。实际上，无法改变字符串之中的单个字符。</li></ul><h3 id="字符串的不可改变性" tabindex="-1"><a class="header-anchor" href="#字符串的不可改变性" aria-hidden="true">#</a> 字符串的不可改变性</h3><p>字符串里面的值不可被改变，虽然看上去内容变了，其实是地址变了，内存中开辟了新的空间。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
str <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当重新给变量 str 赋值时，常量&#39;hello&#39;不会被修改，依然保存在内存中，str 会改为指向<code>world</code>。</p><h3 id="模板字符串-模板字面量" tabindex="-1"><a class="header-anchor" href="#模板字符串-模板字面量" aria-hidden="true">#</a> 模板字符串（模板字面量）</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token string">&quot;17&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;,age:&quot;</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//传统写法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,age:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ES6新语法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：ES6 新语法括号中不是单引号，而是 TAB 键上方的符号。</p><ul><li>模板字符串中可以直接换行</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token string">&quot;17&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,
          age:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ES6新语法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在模板字符串中插入表达式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">和为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>a <span class="token operator">+</span> b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，积为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>a <span class="token operator">*</span> b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ES6新语法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>模板字符串中可以调用函数</li><li>模板字符串支持嵌套使用</li></ul><h3 id="字符串的方法" tabindex="-1"><a class="header-anchor" href="#字符串的方法" aria-hidden="true">#</a> 字符串的方法</h3><p>在计算机底层，字符串是以字符数组的形式保存的。</p><ul><li><code>indexOf(想要查询的字符串)</code>检索字符串中是否含有指定内容，找到返回索引，没有返回-1</li><li><code>charAt()</code>根据索引获取指定索引的字符，直接写<code>[]</code>也可以</li><li><code>charCodeAt()</code>获取索引处的 Unicode 编码</li><li><code>String.fromCharCode()</code>根据 Unicode 编码获取</li><li><code>concat</code>和<code>+</code>一样</li><li><code>slice()</code>可以在字符串中截取指定内容</li><li><code>substring()</code>截取字符串，不同的是这个方法不能接受负值，默认使用 0，会自动交换</li><li><code>splice()</code>删除指定的一个或多个元素</li><li><code>split()</code>可以将字符串拆分成一个数组，传递一个字符串作为参数，根据该字符串拆分数组</li><li><code>toUpperCase()</code>将字符串转换成大写并返回</li><li><code>toLowerCase()</code>将字符串装换成小写并返回</li><li><code>startsWith()</code>字符串以什么开头</li><li><code>endsWith()</code>字符串以什么结尾</li></ul><h2 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> Boolean</h2><p>布尔值有两个<code>true</code> 和 <code>false</code>。千万不能加引号，主要用来做逻辑判断：</p><ul><li>true 表示真</li><li>false 表示假</li></ul><p>布尔型和数字型相加时，</p><ul><li>true 按 1 来算</li><li>false 按 0 来算</li></ul><p>对于以下几个值转换成布尔值时为 false，其他都是 true。</p><ul><li>undefined</li><li>null</li><li>false</li><li>0</li><li>NaN</li><li>&quot;&quot;或&#39;&#39; 空字符串</li></ul><p>注意：空数组（[]）和空对象（{}）对应的布尔值，都是 true。</p><h2 id="null-和-undefined" tabindex="-1"><a class="header-anchor" href="#null-和-undefined" aria-hidden="true">#</a> null 和 undefined</h2><p>null 专门用来定义空对象，如果想定义一个变量引用类型，但是暂时还没想好放什么内容，可以设置为 null。</p><ul><li>null 类型的值只有一个，就是 null。</li><li>使用 typeof 检查一个 null 值时，会返回 object。</li></ul><p>undefined 未定义，使用的情况：</p><ul><li>变量已声明，但未赋值，此时该变量的值就是 undefined</li><li>变量未声明未定义时，直接使用会报错，使用 typeof 检查则返回 undefined。</li><li>如果一个函数没有返回值，那么，这个函数的返回值就是 undefined。在定义一个函数时，如果末尾没有 return 语句，那么其实就是<code>return undefined</code></li><li>调用函数时，如果没有传参，那么这个值就是 undefined。</li></ul><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h3><ul><li><p>null == undefined 为 true</p></li><li><p>null === undefined 为 false</p></li><li><p>和数字做运算时：</p><ul><li>10 + null 结果时 10</li><li>10 + undefined 结果为 NaN</li></ul></li><li><p>任何数据类型和 undefined 运算都是 NaN，任何值和 null 运算都相当于和 0 运算。</p></li></ul><p>总结：</p><ul><li><code>undefined</code>代表定义了未赋值</li><li><code>null</code>代表定义了也赋值了，只是赋的值为 null</li></ul><p>什么时候赋值为 null；</p><ul><li>初始赋值为<code>null</code>时，代表将要赋值为对象。 <ul><li><code>var b = null</code>代表 b 将要赋值为称对象</li><li><code>b = [1,2,3]</code>确定对象并赋值。</li></ul></li><li>最后赋值为<code>null</code>，表示释放对象内存。 <ul><li><code>b = null</code>让 b 指向的对象称为垃圾对象，被垃圾回收器回收。</li></ul></li></ul>`,69),l=[p];function o(i,c){return s(),a("div",null,l)}const r=n(t,[["render",o],["__file","03_js_type.html.vue"]]);export{r as default};
