import{_ as e,r as t,o,c as i,b as n,e as a,d as c,f as l}from"./app-007a9be1.js";const p={},r=n("h1",{id:"electron-简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#electron-简介","aria-hidden":"true"},"#"),a(" Electron 简介")],-1),d={href:"https://www.electronjs.org/zh/docs/latest/",target:"_blank",rel:"noopener noreferrer"},u=l(`<p>分为主进程和渲染进程</p><ol><li>创建了 main.js 脚本来运行主要进程</li><li>使用 Electron 的 app 和 BrowserWindow 模块来创建一个浏览器窗口，在一个单独的进程(渲染器)中显示网页内容</li><li>为了访问渲染器中的 Node.js 的某些功能，在 BrowserWindow 的构造函数上附加了一个预加载脚本</li></ol><h2 id="控制台" tabindex="-1"><a class="header-anchor" href="#控制台" aria-hidden="true">#</a> 控制台</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  打开开发者工具</span>
mainWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">openDevTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// mainWindow.webContents.openDevTools({ mode: &#39;detach&#39; })</span>
<span class="token comment">// { mode: &#39;detach&#39; } 选项可以将 DevTools 作为一个独立的窗口打开</span>
<span class="token comment">// 使用快捷键打开开发工具</span>
globalShortcut<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&quot;Alt+F12&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  mainWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">openDevTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="browserwindow" tabindex="-1"><a class="header-anchor" href="#browserwindow" aria-hidden="true">#</a> BrowserWindow</h2><ul><li>width</li><li>height</li><li>webPreferences.preload 将脚本附在渲染进程上</li></ul><h2 id="contextbridge" tabindex="-1"><a class="header-anchor" href="#contextbridge" aria-hidden="true">#</a> contextBridge</h2><p>在隔离的上下文中创建一个安全的、双向的、同步的桥梁。</p><ol><li><p>contextBridge.exposeInMainWorld(apiKey, api)</p><ul><li>通过 window[apiKey]访问</li></ul></li><li><p>contextBridge.exposeInIsolatedWorld(worldId, apiKey, api)</p></li></ol><ul><li>定义全局对象</li></ul><h2 id="进程通信-ipc" tabindex="-1"><a class="header-anchor" href="#进程通信-ipc" aria-hidden="true">#</a> 进程通信 IPC</h2><ul><li>ipcMain 模块</li><li>ipcRenderer 模块</li></ul>`,12);function h(k,m){const s=t("ExternalLinkIcon");return o(),i("div",null,[r,n("p",null,[a("官方文档："),n("a",d,[a("https://www.electronjs.org/zh/docs/latest/"),c(s)])]),u])}const v=e(p,[["render",h],["__file","01_electron.html.vue"]]);export{v as default};
