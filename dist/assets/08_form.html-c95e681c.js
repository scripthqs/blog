import{_ as a,o as n,c as s,f as t}from"./app-06f72143.js";const e={},o=t(`<h1 id="表单标签" tabindex="-1"><a class="header-anchor" href="#表单标签" aria-hidden="true">#</a> 表单标签</h1><p>在 HTML 中，一个完整的表单通常由<strong>表单域</strong>、<strong>表单控件</strong>、<strong>提示信息</strong>三个部分组成</p><h2 id="表单域" tabindex="-1"><a class="header-anchor" href="#表单域" aria-hidden="true">#</a> 表单域</h2><p>表单域是一个包含表单元素的区域，用<code>&lt;form&gt;</code>标签定义表单域。</p><p><code>form</code>表单标签让用户填写和选择，收集用户信息，用于服务器交换。属性：</p><ul><li><code>name/id</code>：表单的名称，用于 js 来操作或控制表单时使用。name 可以重复，id 是唯一的。</li><li><code>action</code>：指定表单数据的处理程序，一般是 PHP，如：<code>action=&quot;login.php&quot;</code>这个属性将表示，表单将提交到哪里。</li><li><code>method</code>：表单数据的提交方式，一般取值：get(默认)和 post，这个属性表示用什么 http 方法提交，有 get 和 post 两种。</li><li><code>Enctype</code>：表单数据的编码方式（加密），Enctype 只能在 POST 方式下使用。取值可以是： <ul><li>Application/x-www-form-urlencoded：默认加密方式，除了上传文件之外的数据都可以</li><li>Multipart/form-data：上传附件时，必须使用这种编码方式。</li><li>text/plain： 窗体数据以纯文本形式进行编码，其中不含任何控件或格式字符。空格转换为 &quot;+&quot; 加号，但不对特殊字符编码</li></ul></li></ul><p>get 提交和 post 提交的区别：</p><ul><li>get 方式将表单的数据，以<code>name=value</code>的形式追加到 action 后面指定的处理程序后面，两者间使用<code>？</code>隔开，每个表单的<code>name=value</code>间使用<code>&amp;</code>隔开。</li><li>get 的特点：只适合提交少量信息，并且不太安全，不要提交敏感信息，提交的数据类型仅限于 ASCII 字符。</li><li>post 方式将表单数据直接发送（隐藏）到 action 后面的指定的处理程序，post 发送的数据不可见。</li><li>post 的特点：可以提交海量信息，相对更加安全，提交的数据格式多样（word、excel、rar、img）</li></ul><h2 id="表单控件" tabindex="-1"><a class="header-anchor" href="#表单控件" aria-hidden="true">#</a> 表单控件</h2><h3 id="input-输入表单元素" tabindex="-1"><a class="header-anchor" href="#input-输入表单元素" aria-hidden="true">#</a> input 输入表单元素</h3><p><code>input</code>输入标签（文本框），用于接收用户输入。</p><ul><li><code>&lt;input type=&quot;text&quot; /&gt;</code></li></ul><p>属性值:</p><ul><li><code>type</code>：文本类型，属性值可以是： <ul><li>text：文本。</li><li>password：密码。</li><li>radio：单选按钮，名字相同的按钮作为一组进行单选，像收音机，按下去一个按钮，其他的就抬起来了，所以叫做 radio。</li><li>checkbox：多选按钮，name 属性值相同的按钮作为一组进行选择。</li><li>hidden：隐藏框，在表单中包含不希望用户看见的信息。</li><li>button：普通按钮，结合 js 代码进行使用。</li><li>submit：提交按钮，传送当前表单的数据给服务器或其他程序处理。这个按钮不需要写 value 自动就会有“提交”文字。这个按钮真的有提交功能。点击按钮后，这个表单就会被提交到 form 标签的 action 属性中指定的那个页面中去。</li><li>reset：重置按钮，清空当前表单的内容，并设置为最初的默认值.</li><li>image：图片按钮，和提交按钮的功能完全一致，只不过图片按钮可以显示图片。</li><li>file：文件选择框。 提示：如果要限制上传文件的类型，需要配合 JS 来实现验证。对上传文件的安全检查：一是扩展名的检查，二是文件数据内容的检查。</li></ul></li><li><code>name</code>：定义 input 元素的名称，单选框和复选框要有相同的 name 值</li><li><code>value=&quot;内容&quot;</code>：文本框里的默认内容（已经被填好了的）.</li><li><code>readonly</code>：文本框只读，不能编辑。属性值可以不写。</li><li><code>disabled</code>：文本框只读，不能编辑，光标点不进去。属性值可以不写。</li><li><code>checked</code>：属性值也是 checked，规定此 input 元素首次加载也能够当被选中，主要针对单选框和复选框。</li><li><code>maxlength</code>：属性值是正整数，规定输入字段的最大字符数</li></ul><h3 id="input-和-label" tabindex="-1"><a class="header-anchor" href="#input-和-label" aria-hidden="true">#</a> <code>&lt;input&gt;和&lt;label&gt;</code></h3><p><code>&lt;label&gt;</code> 标签为 input 元素定义标注。</p><p>将一个 <code>&lt;label&gt;</code> 和一个 <code>&lt;input&gt;</code> 元素匹配在一起，你需要给 <code>&lt;input&gt;</code> 一个 <code>id</code> 属性。而 <code>&lt;label&gt;</code> 需要一个 <code>for</code> 属性，其值和 <code>&lt;input&gt;</code> 的 <code>id</code> 一样</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preference<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cheese<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Do you like cheese?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cheese<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cheese<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以将 <code>&lt;input&gt;</code> 直接放在 <code>&lt;label&gt;</code> 里，此时则不需要 <code>for</code> 和 <code>id</code> 属性，因为关联已隐含存在：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span>
  <span class="token punctuation">&gt;</span></span>Do you like peas?
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>peas<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>目的：扩大了元素的可点击区域，让包括使用触屏设备在内的用户更容易激活这个元素。</strong></p><h3 id="select-下拉表单元素" tabindex="-1"><a class="header-anchor" href="#select-下拉表单元素" aria-hidden="true">#</a> select 下拉表单元素</h3><p>可以使用<code>&lt;select&gt;</code>标签控件定义下拉列表</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>form<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>select<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>option<span class="token operator">&gt;</span>选项<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>option<span class="token operator">&gt;</span>选项<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>option<span class="token operator">&gt;</span>选项<span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
    <span class="token operator">...</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 select 中至少包含一对 option</li><li>在 option 中定义 selected= “selected&quot;时，当前项即为默认选中项</li></ul><h3 id="textarea-文本域元素" tabindex="-1"><a class="header-anchor" href="#textarea-文本域元素" aria-hidden="true">#</a> textarea 文本域元素</h3><p>当用户输入内容较多的情况下，我们就不能使用文本框表单，此时我们可以使用<code>&lt;textarea&gt;</code>标签</p><p>在表单元素中，<code>&lt;textarea&gt;</code>是定义多行文本输入的控件，留言板，评论等</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>form<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>textarea<span class="token operator">&gt;</span>请输入内容<span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>属性：</p><ul><li>cols=&quot;每行中的字符数&quot;</li><li>rows=&quot;显示的行数&quot;</li></ul><p>但是<strong>我们在实际开发中不会使用，都是用 css 来改变大小</strong></p>`,32),p=[o];function l(c,i){return n(),s("div",null,p)}const d=a(e,[["render",l],["__file","08_form.html.vue"]]);export{d as default};
