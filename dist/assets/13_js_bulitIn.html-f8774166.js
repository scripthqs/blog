import{_ as n,o as a,c as s,f as e}from"./app-10c4e004.js";const l={},t=e(`<h1 id="内置对象" tabindex="-1"><a class="header-anchor" href="#内置对象" aria-hidden="true">#</a> 内置对象</h1><p>除了 String、Number、Boolean 三个基本包装类外，还有很多其他的常用的包装类。</p><h2 id="date-对象" tabindex="-1"><a class="header-anchor" href="#date-对象" aria-hidden="true">#</a> Date 对象</h2><p>在 JS 中使用 Date 对象来表示时间</p><ul><li>创建 Date 对象 <ul><li><code>var date = new Date();</code></li><li>直接使用构造函数创建的 Data 对象，则会封装当前代码执行的时间</li><li>可以将一个时间作为参数传递给构造函数</li><li><code>var date = new Date(&#39;12/30/2020 12:13:58&#39;)</code></li></ul></li><li>date.getDate(); <ul><li>获取当前日期是几日</li></ul></li><li>date.getDay(); <ul><li>获取当前日期是周几，0-6，0 代表周日</li></ul></li><li>date.getMonth(); <ul><li>获取月份，0-11，0 表示 1 月，11 表示 12 月</li></ul></li><li>getTime(); <ul><li>获取当前日期对象的时间戳</li><li>从 1970 年 1 月 1 日，0 时 0 分 0 秒到当前时间花费的毫秒数，1 秒=1000 毫秒</li><li>计算机底层就是使用时间戳</li><li><code>Date.now()</code>获取当前时间的时间戳，可以测试代码执行的性能</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//将字符串时间转成时间戳</span>
<span class="token keyword">let</span> timeString <span class="token operator">=</span> <span class="token string">&quot;2023-01-01&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>timeString<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> sjc1 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> sjc2 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> scj3 <span class="token operator">=</span> <span class="token operator">+</span>date<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sjc1<span class="token punctuation">,</span> sjc2<span class="token punctuation">,</span> scj3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>timeString<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="math-对象" tabindex="-1"><a class="header-anchor" href="#math-对象" aria-hidden="true">#</a> Math 对象</h2><ul><li>Math 和其他对象不同，不是一个构造函数</li><li>它属于工具类，不用创建对象，里面封装了数学运算相关的属性和方法</li><li><code>Math.abs()</code>绝对值</li><li><code>Math.ceil()</code>上舍入，进行向上取整</li><li><code>Math.floor()</code>向下取整</li><li><code>Math.round()</code>四舍五入</li><li><code>Math.random()</code>可以生成随机 0-1 的随机数</li><li>生成 x-y 随机数：<code>Math.round(Math.random()*(y-x)+x)</code></li><li><code>Math.max()</code>获取最大值</li><li><code>Math.min()</code>获取最小值</li><li><code>Math.pow(x,y)</code>x 的 y 次幂</li><li><code>Math.sqrt(x)</code>对一个数开方</li><li><code>Math.PI</code> 圆周率</li></ul><h2 id="regexp-对象" tabindex="-1"><a class="header-anchor" href="#regexp-对象" aria-hidden="true">#</a> RegExp 对象</h2><p>RegExp 即正则表达式</p><ul><li>正则表达式用于定义一些字符串的规则。</li><li>计算机可以根据正则表达式，来检查一个字符串是否符合指定的规则，或者将字符串中符合规则的内容提取出来。</li></ul><h3 id="创建正则表达式对象" tabindex="-1"><a class="header-anchor" href="#创建正则表达式对象" aria-hidden="true">#</a> 创建正则表达式对象</h3><ol><li><p>使用构造函数创建正则表达式的对象</p><ul><li><code>var 变量 = new RegExp(&quot;正则表达式&quot;,&quot;匹配模式&quot;) //两个参数都是字符串</code></li><li><code>test()</code>这个方法可以检查一个字符串是否符合正则表达式的规则</li><li><code>reg.test(str)</code>如果符合则返回 true，否则返回 false</li><li>构造函数第二个参数，两个参数都是字符串 <ul><li>i 忽略大小写，ignore</li><li>g 全局匹配模式，global</li></ul></li></ul></li><li><p>使用字面量创建正则表达式</p></li></ol><ul><li><code>var 变量 = /正则表达式/匹配模式; // 注意，这个语法里没有引号</code></li></ul><p>两种方法的比较：</p><ul><li>构造函数创建时，更加灵活，因为参数中可以传递变量</li><li>使用字面量创建更加简单</li></ul><p>全局匹配 g 慎用 test()方法(否则很可能写出一个难以排查的 bug):</p><ul><li>对于全局的正则表达式，test()只会检测是否存在某个目标字符串，只要存在就为 true</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">test</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;_test_test&quot;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>全局匹配模式 g 一般用 exec()、match()、replace()等方法。</li><li>全局匹配模式 g 如果用于 test()方法会有问题。因为 g 模式会生成一个 lastIndex 参数来存储匹配最后一次的位置。<code>reg.test</code>可能上一次返回 true，下一次就返回 false 了。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">1</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;123123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">;</span> <span class="token comment">//1;</span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;123123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true;</span>
reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">;</span> <span class="token comment">//4;</span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;123123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false;</span>
reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">;</span> <span class="token comment">//0;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建一个表达式，检查字符串是否有 a 或 b，使用<code>|</code>或者<code>[]</code><ul><li><code>var reg = /a|b/</code></li><li><code>var reg = /[ab]/</code></li><li><code>var reg = /[a-z]/</code>任意小写</li><li><code>var reg = /[A-Z]/</code>任意大写</li><li><code>var reg = /[A-z]/</code>任意字母</li><li><code>var reg = /a[bde]c/</code></li></ul></li><li><code>^</code>表示除了 <ul><li><code>var reg = /[^ab]/</code>除了 a 或 b 之外，还有没有其他的字符内容</li><li><code>var reg = /[^0-9]/</code>除了数字，还有没有其他的字符内容</li></ul></li></ul><h3 id="字符串和正则表达式的方法" tabindex="-1"><a class="header-anchor" href="#字符串和正则表达式的方法" aria-hidden="true">#</a> 字符串和正则表达式的方法</h3><ul><li><code>split()</code>可以将一个字符串拆分成一个数组 <ul><li>该方法可以根据任意字母将字符串拆分</li><li>可以传递正则表达式作为参数，这样方法可以根据正则表达式区拆分字符串</li><li><code>str.split(/[a-z]/)</code></li></ul></li><li><code>search()</code>可以搜索字符串是否含有指定内容 <ul><li>如果搜索到指定内容，则会返回第一次出现的出现的索引，没有则返回-1</li><li>可以传递正则表达式作为参数</li><li><code>str.search(/a[bcd]e/)</code></li></ul></li><li><code>match()</code>可以根据正则表达式，从一个字符串中符合条件的内容提取出来 <ul><li><code>str.match(/[A-z]/)</code>默认情况下，match 只会只找到第一个</li><li>我们可以设置正则表达式为全局匹配</li><li><code>str.match(/[A-z]/g)</code>也可以设置同时设置 ig</li><li>match()方法会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果</li><li>match()这个方法还是很实用的，可以在一个很长的字符串中，提取出有规则的内容。爬虫的时候经常会使用</li></ul></li><li><code>replace()</code>可以将字符串中的指定内容替换成新的内容 <ul><li><code>str.replace(&#39;a&#39;,&#39;@&#39;)</code>2 个参数，被替换的内容和新的内容，默认只会替换第一个</li><li><code>str.replace(/[a-z]/ig,&#39;@&#39;)</code></li><li><code>str.replace(/[a-z]/ig,&#39;&#39;)</code>可以去除字母</li></ul></li></ul><h3 id="正则表达式语法" tabindex="-1"><a class="header-anchor" href="#正则表达式语法" aria-hidden="true">#</a> 正则表达式语法</h3><ul><li><p>创建正则表达式检查字符串是否含有 aaa</p><ul><li><code>var reg = /a{3}/</code></li><li><code>{n}</code>表示正好出现 n 次</li><li><code>{m,n}</code>表示出现 m 次到 n 次</li><li><code>{m,}</code>表示出现 m 次以上</li><li><code>()</code>表示一组</li><li><code>[]</code>表示匹配里面的字符</li></ul></li><li><p>量词</p><ul><li><code>+</code>表示至少一个，相当于<code>{1，}</code></li><li><code>*</code>表示 0 或多个，相当于<code>{0,}</code></li><li><code>?</code>表示 0 或 1，相当于<code>{0,1}</code></li></ul></li><li><p>检查字符串是否以 a 开头</p><ul><li><code>var reg = /^a/</code></li><li><code>^</code>表示开头，中括号里面表示除了/[^a]/</li><li><code>var reg = /a$/</code></li><li><code>$</code>表示结尾</li><li><code>/^a$/</code>表示只有 a</li><li>如果在正则表达式中同时使用^和$符号，则要求字符串必须完全符合正则表达式。</li></ul></li><li><p>检查字符串是否是合法手机号</p><ul><li><code>var reg = /^1[3-9][0-9]{9}$/</code></li></ul></li><li><p>检查字符串中是否含有.</p><ul><li><code>.</code>有特殊意义，表示任意字符</li><li>此时需要使用转义字符，<code>\\</code>，字符串中<code>\\</code>也是表示转义</li><li><code>var reg = /\\./</code></li><li><code>\\.</code>表示单纯的<code>.</code></li></ul></li><li><p><code>\\w</code>任意字母、数字、_ 相当于<code>[A-z0-9_]</code></p></li><li><p><code>\\W</code>除了字母、数字、_ 相当于<code>[^A-z0-9_]</code></p></li><li><p><code>\\d</code>任意数字，[0-9]</p></li><li><p><code>\\D</code>除了数字，[^0-9]</p></li><li><p><code>\\s</code>空格</p></li><li><p><code>\\S</code>除了空格</p></li><li><p><code>\\b</code>单词边界 <code>var reg = /\\bhello\\b/</code></p></li><li><p><code>\\B</code>除了单词边界</p></li><li><p>去除字符串前后的空格</p><ul><li>去除空格就是就是使用<code>&#39;&#39;</code>替换空格</li><li><code>str.replace(/^\\s*/,&quot;&#39;)</code>去掉开头的空格</li><li><code>str = str.replace(/\\s*$/, &quot;&quot;)</code>去除结尾的空格</li><li><code>str = str.replace(/^\\s*|\\s*$/g,&quot;&quot;)</code>去除开头结尾空格</li></ul></li><li><p>判断字符串是否为电子邮件</p><ul><li><code>var emailReg = /^\\w{3,}(\\.\\w+)*@[A-z0-9]+(\\.[A-z]{2,5}){1,2}$/</code></li></ul></li></ul>`,26),o=[t];function c(i,p){return a(),s("div",null,o)}const d=n(l,[["render",c],["__file","13_js_bulitIn.html.vue"]]);export{d as default};
