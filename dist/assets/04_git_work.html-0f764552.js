import{_ as i,o as l,c as e,f as a}from"./app-007a9be1.js";const d={},o=a('<h1 id="git-多人协作" tabindex="-1"><a class="header-anchor" href="#git-多人协作" aria-hidden="true">#</a> git 多人协作</h1><h2 id="git-多人协作的流程" tabindex="-1"><a class="header-anchor" href="#git-多人协作的流程" aria-hidden="true">#</a> git 多人协作的流程</h2><ol><li>A 在自己计算机中创建本地仓库</li><li>A 在 github 中创建远程仓库</li><li>A 将本地仓库推送到远程仓库</li><li>B 克隆远程仓库到本地进行开发</li><li>B 将本地仓库中开发的内容推送到远程仓库</li><li>A 将远程仓库中的最新内容拉到本地</li></ol><h2 id="将本地仓库推送到远程仓库" tabindex="-1"><a class="header-anchor" href="#将本地仓库推送到远程仓库" aria-hidden="true">#</a> 将本地仓库推送到远程仓库</h2><p>A 创建好本地仓库和远程仓库后，将本地仓库推送到远程仓库中。</p><ul><li><code>git push 远程仓库地址 分支名称</code></li><li>第一次推送应该会验证 github 账号密码</li><li>然后计算机会自动保存账号密码，账号密码保存的位置 <ul><li>打开控制面板</li><li>点击右上角的查看方式设置为大图标（默认一般是类别）</li><li>点击凭据管理器</li><li>选择 Windows 凭据</li><li>可以看到这个账号，删除后下次推送还会验证账号密码 远程仓库地址可以起一个方便的别名，方便推送</li></ul></li><li><code>git remote add 别名 远程仓库地址</code></li><li><code>git push 别名 分支名称</code></li></ul><p>这种方法还是不够方便</p><ul><li><code>git push -u 远程仓库地址 分支名称</code></li><li><code>git push -u 别名 分支名称</code></li><li>以上两种方法选择一种，只要在 push 后面加上<code>-u</code>下次就可以直接通过<code>git push</code>提交代码</li></ul><h2 id="将远程仓库克隆到本地仓库" tabindex="-1"><a class="header-anchor" href="#将远程仓库克隆到本地仓库" aria-hidden="true">#</a> 将远程仓库克隆到本地仓库</h2><p>B 在本地计算机中，选择一个合适的地方，打开 git bash 命令行窗口，将远程仓库克隆到本地。</p><ul><li><code>git clone 远程仓库地址</code></li><li>B 克隆的远程仓库依然可以使用 A 之前创建的别名</li><li>B 在可以在本地开发功能和提交到本地仓库</li><li>注意：此时 B 还不能直接将本地仓库推送到远程仓库中，如果可以，那么远程仓库将很可能被随意修改。</li></ul><p>A 可以 github 中给 B 权限，让 B 成为协作者</p><ul><li>点击仓库中 settings(设置)</li><li>左侧选择 Manage access(管理访问)</li><li>输入账号密码验证身份</li><li>invite a collaborator(邀请协作伙伴)</li><li>输入 B 的 github 账号</li><li>会生成一个邀请链接，A 将这个链接发送给 B</li><li>B 访问这个链接，并同意</li><li>此时 B 可以将本地仓库推送到远程仓库</li></ul><h2 id="将最新版本更新到本地仓库" tabindex="-1"><a class="header-anchor" href="#将最新版本更新到本地仓库" aria-hidden="true">#</a> 将最新版本更新到本地仓库</h2><p>A 将最新的版本拉取到本地仓库</p><ul><li><code>git pull 远程仓库地址 分支名称</code></li><li><code>git pull 别名 分支名称</code></li><li><code>git pull</code>也可以直接使用</li><li>拉取操作属于读取操作，不需要验证身份</li><li>如果远程仓库中的版本高于本地仓库的版本，本地仓库不能向远程仓库进行提交</li></ul><h2 id="解决冲突" tabindex="-1"><a class="header-anchor" href="#解决冲突" aria-hidden="true">#</a> 解决冲突</h2><p>在多人同时开发一个项目时，如果两个人同时修改了同一个文件的同一个地方，就会发生冲突，冲突需要人为解决。</p><ul><li>使用<code>git pull</code>命令，可以看见文件冲突的开始和结束，再人为修改</li></ul><h2 id="为开源项目做贡献" tabindex="-1"><a class="header-anchor" href="#为开源项目做贡献" aria-hidden="true">#</a> 为开源项目做贡献</h2><p>C 不是团队成员，也可以向项目提交代码，不过需要项目人 A 的同意。</p><ul><li>C 先点击项目的 Fork</li><li>C 会有一个相同的项目</li><li>C 将这个开源项目克隆到本地 <ul><li><code>git clone Fork项目的地址</code></li></ul></li><li>C 在本地中修改这个项目</li><li>C 提交到自己 Fork 的那个项目中 <ul><li><code>git pull Fork开源项目的地址 分支</code></li></ul></li><li>C 点击自己 Fork 项目的 Pull Request</li><li>C 点击 New Pull Request</li><li>A 可以同意或者拒绝</li></ul>',22),t=[o];function c(h,r){return l(),e("div",null,t)}const s=i(d,[["render",c],["__file","04_git_work.html.vue"]]);export{s as default};
