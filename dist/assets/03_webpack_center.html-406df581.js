import{_ as n,o as s,c as a,f as t}from"./app-c6441670.js";const e={},p=t(`<h1 id="webpack-核心概念" tabindex="-1"><a class="header-anchor" href="#webpack-核心概念" aria-hidden="true">#</a> webpack 核心概念</h1><h2 id="entry-入口" tabindex="-1"><a class="header-anchor" href="#entry-入口" aria-hidden="true">#</a> Entry 入口</h2><p>指示 webpack 以哪个文件作为入口起点开始打包，分析构建内部依赖图</p><h2 id="output-输出" tabindex="-1"><a class="header-anchor" href="#output-输出" aria-hidden="true">#</a> Output 输出</h2><p>指示 webpack 打包后的资源 bundles 输入到哪里去，以及如何命名</p><h2 id="loader-翻译" tabindex="-1"><a class="header-anchor" href="#loader-翻译" aria-hidden="true">#</a> Loader 翻译</h2><p>让 webpack 能够处理那些非 JavaScript 文件，webpack 本身只能理解 JavaScript。</p><h2 id="plugins-插件" tabindex="-1"><a class="header-anchor" href="#plugins-插件" aria-hidden="true">#</a> Plugins 插件</h2><p>可以用于执行范围更广的任务，插件的范围包括打包优化，压缩，重新定义环境中的变量等等</p><h2 id="mode-模式" tabindex="-1"><a class="header-anchor" href="#mode-模式" aria-hidden="true">#</a> Mode 模式</h2><p>指示 webpack 使用相应模式的配置，开发模式（development）和生产模式（production）。默认是 production</p><p>mode=development</p><ul><li>开发环境</li><li><strong>不会</strong>对打包生成的文件进行<strong>代码压缩</strong>和性能优化</li><li>打包<strong>速度快</strong>，适合在<strong>开发阶段</strong>使用</li></ul><p>mode=production</p><ul><li>生产环境</li><li>会对打包生成的文件进行<strong>代码压缩</strong>和<strong>性能优化</strong></li><li>打包<strong>速度很慢</strong>，仅适合在项目发布阶段使用</li></ul><p>开发中，使用 development，因为，追求打包的速度，而不是体积。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="chunk" tabindex="-1"><a class="header-anchor" href="#chunk" aria-hidden="true">#</a> Chunk</h2><p>Chunk 是 Webpack 打包过程中的代码块，是一个可执行的模块</p><h2 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> Module</h2><p>Module 是 Webpack 中的模块，可以是 js、css、图片等各种资源文件</p><h2 id="resolve" tabindex="-1"><a class="header-anchor" href="#resolve" aria-hidden="true">#</a> Resolve</h2><p>Resolve 用于解析模块路径，可以配置模块查找的规则(extensions)和路径别名(alias)。</p><p>extensions 是解析到文件时自动添加扩展名：</p><ul><li>默认值是 [&#39;.wasm&#39;, &#39;.mjs&#39;, &#39;.js&#39;, &#39;.json&#39;]</li><li>所以如果我们代码中想要添加加载 .vue 或者 jsx 或者 ts 等文件时，我们必须自己写上扩展名</li></ul><p>alias 可以配置别名：</p><ul><li>特别是当我们项目的目录结构比较深的时候，或者一个文件的路径可能需要 ../../../这种路径片段</li><li>我们可以给某些常见的路径起一个别名</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.css&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.vue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//配置这个参数后，导入文件时，可以省略后缀</span>
      <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;@&quot;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;@&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&#39;./src/&#39;</span><span class="token punctuation">)</span><span class="token comment">//用@符号代替src文件夹</span>
        <span class="token literal-property property">vue$</span><span class="token operator">:</span> <span class="token string">&quot;vue/dist/vue.esm.js&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建议使用@符号表示 src 源代码目录，从外往里找，不要使用../从里往外找。</p><p>注意：起别名后，通过 import 引入的路径别名可以直接生效，src 引入的路径使用别名需要加<code>~</code>。</p><h3 id="path-join-和-path-resolve" tabindex="-1"><a class="header-anchor" href="#path-join-和-path-resolve" aria-hidden="true">#</a> path.join 和 path.resolve</h3><ol><li><p>join 是把各个 path 片段连接在一起， resolve 把&#39;／&#39;当成根目录</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;/a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// /a/b</span>
path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;/a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// /b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>resolve 在传入非/路径时，会自动加上当前目录形成一个绝对路径，而 join 仅仅用于路径拼接</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 当前路径为</span>
<span class="token comment">//User/test;</span>
path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;..&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// a/d</span>
path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;..&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// /Users/test/a/d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出 resolve 在传入的第一参数为非根路径时，会返回一个带当前目录路径的绝对路径。</p></li></ol><h2 id="optimization" tabindex="-1"><a class="header-anchor" href="#optimization" aria-hidden="true">#</a> Optimization</h2><p>Optimization 用于优化打包后的代码，包括代码压缩、tree shaking 等</p>`,34),o=[p];function i(c,l){return s(),a("div",null,o)}const r=n(e,[["render",i],["__file","03_webpack_center.html.vue"]]);export{r as default};
