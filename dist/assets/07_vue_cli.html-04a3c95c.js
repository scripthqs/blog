import{_ as e,o as i,c as l,f as n}from"./app-10c4e004.js";const a={},t=n(`<h1 id="vue-cli-脚手架" tabindex="-1"><a class="header-anchor" href="#vue-cli-脚手架" aria-hidden="true">#</a> Vue CLI 脚手架</h1><h2 id="单页面应用程序" tabindex="-1"><a class="header-anchor" href="#单页面应用程序" aria-hidden="true">#</a> 单页面应用程序</h2><p>单页面应用程序（英文名：Single Page Application）简称 SPA，顾名思义，指的是一个 Web 网站中只有唯一的一个 HTML 页面，所有的功能与交互都在这唯一的一个页面内完成.</p><h2 id="vue-cli-简介" tabindex="-1"><a class="header-anchor" href="#vue-cli-简介" aria-hidden="true">#</a> Vue CLI 简介</h2><p>在开发大型项目，必然会使用 Vue CLI 工具</p><ul><li>在 Vue.js 开发大型应用时，需要考虑代码目录结构，项目结构和部署、热加载，代码单元测试等事情</li><li>使用脚手架工具可以帮助我们完成这些事情</li></ul><p>CLI 全称 Command-Line Interface，翻译为命令行界面，但是俗称脚手架。</p><p>Vue CLI 是官方发布 vue.js 项目脚手架，可以<strong>快速搭建 Vue 开发环境和对应的 webpack 配置</strong>。脚手架依赖 node 和 webpack。</p><h2 id="安装和使用" tabindex="-1"><a class="header-anchor" href="#安装和使用" aria-hidden="true">#</a> 安装和使用</h2><p>vue-cli 是 npm 上的一个全局包，使用 npm install 命令，安装 cli</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> @vue/cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>基于 vue-cli 快速生成工程化的 Vue 项目：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue create 项目的名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>vue ui</code>以图形化界面创建和管理项目，导入项目即可使用</p></li><li><p>ESlint：检测代码规范</p></li><li><p>unit test：单元测试</p></li><li><p>e2e test：e2e 测试，end to end，安装 Nightwatch，进行自动化测试的工具</p></li></ul><h2 id="vuecli-目录解析" tabindex="-1"><a class="header-anchor" href="#vuecli-目录解析" aria-hidden="true">#</a> vuecli 目录解析</h2><ul><li>public 文件夹：相当于 cli2 对 static 目录,index.html</li><li>.browserslistrc：浏览器相关支持情况</li><li>assets 文件夹：存放项目中用到的静态资源文件，例如：css 样式表、图片资源</li><li>components 文件夹：程序员封装的、可复用的组件，都要放到 components 目录下</li><li>main.js 是项目的入口文件。整个项目的运行，要先执行 main.js</li><li>App.vue 是项目的根组件。</li><li>.editorconfig：项目文本相关配置</li><li>.eslintignore：代码规范忽略文件配置</li><li>.gitignore：git 仓库忽略文件配置</li><li>.postcssrc.js：CSS 相关转化配置</li><li>.babel.config.js：ES 代码相关转化配置</li></ul><h2 id="vuecli-修改配置" tabindex="-1"><a class="header-anchor" href="#vuecli-修改配置" aria-hidden="true">#</a> vuecli 修改配置</h2><p>Vue3.x 脚手架隐藏了所有 webpack 相关的配置，若想查看具体的配置可以执行</p><ul><li><code>vue inspect &gt; output.js</code> 只能查看，不能修改</li></ul><p>修改配置的方法：</p><ol><li>vuecli3.x 的很多相关配置被隐藏，使用 vue ui 即可使用图形化管理配置</li><li>在 node_modules 文件夹下的@vue 文件夹中可以找到隐藏的配置</li><li>自己创建 vue.config.js 文件，module.exports = {}自定义配置文件</li><li>另外，在用户下找到.vuerc 可删除修改一些保存的配置</li></ol><h2 id="runtime-compiler-和-runtime-only" tabindex="-1"><a class="header-anchor" href="#runtime-compiler-和-runtime-only" aria-hidden="true">#</a> runtime-compiler 和 runtime-only</h2><p>Vue 程序的运行流程；</p><ol><li>写出 template（模板）</li><li>parse（解析）成 ast（抽象语法树）abstract syntax tree</li><li>compile（编译）成 render 函数</li><li>vDom（虚拟 dom）</li><li>ui（真实 dom）</li></ol><ul><li>runtime-compiler 解析步骤：template-&gt;ast-&gt;render-&gt;vDom-&gt;ui</li><li>runtime-only 解析步骤：render-&gt;vDom-&gt;ui(性能更好，代码更少)</li></ul><p>render 函数中的 h 是 createElement 函数，createElement(&#39;标签&#39;,&#39;{标签属性}&#39;,[&#39;标签中的内容&#39;])</p><p>render 函数可以直接传入组件，<code>render:createElement =&gt; createElement(App)</code></p><p>使用 runtime-only 版本时，.vue 文件的 template 由 vue-template-compiler 直接编译成 render 函数</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>new Vue({ render: h =&gt; h(App), }).$mount(&#39;#app&#39;) //相当于 new Vue({ el: &#39;#app&#39;, render: h =&gt; h(App), })
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>浏览器无法解析.vue 文件，通过 vue-template-compiler 将 vue 文件转换成 js 文件</strong>。</p><h2 id="vue-项目的运行流程" tabindex="-1"><a class="header-anchor" href="#vue-项目的运行流程" aria-hidden="true">#</a> vue 项目的运行流程</h2><p>通过<strong>main.js 把 App.vue 渲染到 index.html</strong>的指定区域中。</p><ul><li><strong>App.vue</strong> 用来编写待渲染的<strong>模板结构</strong></li><li><strong>index.html</strong> 中需要预留一个 <strong>el 区域</strong></li><li>main.js 把 <strong>App.vue</strong> 渲染到了 <strong>index.html</strong> 所预留的区域中</li></ul><h2 id="components-和-views-文件夹" tabindex="-1"><a class="header-anchor" href="#components-和-views-文件夹" aria-hidden="true">#</a> components 和 views 文件夹</h2><ul><li>两个文件夹都是用来方组件的</li><li>如果每个组件是通<strong>过路由来切换的</strong>，就放在<strong>views 里面</strong></li><li><strong>不使用路由</strong>切换，<strong>可复用</strong>的组件，放在<strong>components 里面</strong></li></ul>`,35),r=[t];function s(o,u){return i(),l("div",null,r)}const d=e(a,[["render",s],["__file","07_vue_cli.html.vue"]]);export{d as default};
