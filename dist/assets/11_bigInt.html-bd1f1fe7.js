import{_ as n,o as s,c as a,f as e}from"./app-10c4e004.js";const t={},o=e(`<h1 id="bigint" tabindex="-1"><a class="header-anchor" href="#bigint" aria-hidden="true">#</a> BigInt</h1><p>ES5 之前，只有 6 种数据类型，ES6 之后，到目前为止（2021），JavaScript 一共有 8 种数据类型。</p><p>其中，基本数据类型</p><ul><li><strong><code>String</code> 字符串</strong></li><li><strong><code>Number</code> 数值</strong></li><li><strong><code>Boolean</code> 布尔值</strong></li><li><strong><code>Null</code> 空值</strong></li><li><strong><code>Undefined</code> 未定义</strong></li><li><strong><code>Symbol</code> (ES6) 独一无二的值类型。</strong></li><li><strong><code>BigInt</code> (ES10) 大整数基本类型。</strong></li></ul><p>引用数据类型</p><ul><li><strong><code>Object</code> 对象</strong></li></ul><p>BigInt 数据类型提供了一种方法来表示大于 2^53-1 的整数。BigInt 可以<strong>表示任意大的整数</strong>。</p><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><p>Number 类型只能安全的支持-9007199254740991(-(2^53-1)) 和 9007199254740991(2^53-1)之间的整数，任何超过这个范围的数值都会失去精度；而 BigInt 可以解决这个问题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9007199254740999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9007199254741000</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9007199254740993</span> <span class="token operator">===</span> <span class="token number">9007199254740992</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token number">12</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上图，当数值超过 Number 数据类型支持的安全范围值时，将会被四舍五入，从而导致精度缺失的问题</p><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h2><ol><li><p>在整数的末尾追加 n</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9007199254740999n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9007199254740999</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>调用 BigInt()构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> bigInt <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">&quot;9007199254740999&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//传递给BigInt()的参数将自动转换为BigInt:</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bigInt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9007199254740999n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>注意事项</strong>:</p><ol><li><p>BigInt 除了不能使用一元加号运算符外，其他的运算符都可以使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught TypeError: Cannot convert a BigInt value to a number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>BigInt 和 Number 之间不能进行混合操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1n</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol>`,15),p=[o];function c(i,l){return s(),a("div",null,p)}const r=n(t,[["render",c],["__file","11_bigInt.html.vue"]]);export{r as default};
