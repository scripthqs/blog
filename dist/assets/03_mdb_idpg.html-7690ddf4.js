import{_ as n,o as s,c as a,f as t}from"./app-06f72143.js";const e={},p=t(`<h1 id="mongodb-增删改查" tabindex="-1"><a class="header-anchor" href="#mongodb-增删改查" aria-hidden="true">#</a> MongoDB 增删改查</h1><h2 id="添加" tabindex="-1"><a class="header-anchor" href="#添加" aria-hidden="true">#</a> 添加</h2><p>向集合中添加文档数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 添加单条文档数据</span>
db.表名/集合名.insertOne<span class="token punctuation">(</span><span class="token punctuation">{</span> key: value , key: value<span class="token punctuation">..</span>.<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 添加多条文档数据</span>
db.表名/集合名.insertMany<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 可以添加单条也可以多条数据</span>
db.表名/集合名.insert<span class="token punctuation">(</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">)</span>
db.表名/集合名.insert<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 使用\`insertOne\`添加单个数据到\`shop\`库的\`members\`集合</span>
db.members.insertOne<span class="token punctuation">(</span><span class="token punctuation">{</span>id:1,name: <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 使用\`insertMany\`添加2个数据到\`shop\`库的\`members\`集合</span>
db.members.insertMany<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>id:1,name: <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>id:2,name: <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 使用\`insert\`添加2个数据到\`shop\`库的\`members\`集合</span>
db.members.insert<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>id:1,name: <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>id:2,name: <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>实际使用的比较多的是：insertOne()、insert({})，插入多个的形式仅作了解。</p></blockquote><h2 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> 查询</h2><h3 id="查询所有的数据" tabindex="-1"><a class="header-anchor" href="#查询所有的数据" aria-hidden="true">#</a> 查询所有的数据</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment"># 获取全部</span>
db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment"># 获取全部</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>{ }</code>用于条件限制，当没条件的时候，上述两个用法效果一致 关于<code>_id</code></p><p><strong><em>{ &quot;_id&quot; : ObjectId(&quot;5c0fa4758878caa23d36c0fb&quot;), &quot;name&quot; : &quot;aaa&quot; }</em></strong></p><p>objectID 类型 ObjectId 对象对象数据组成：时间戳 |机器码|PID|计数器 <strong>系统自动生成</strong> &gt; _id 的键值我们可以自己输入，但是不能重复，因此为了避免工作的复杂建议不要人为的去干预_id 的是很工程</p></blockquote><h3 id="带条件查询" tabindex="-1"><a class="header-anchor" href="#带条件查询" aria-hidden="true">#</a> 带条件查询</h3><blockquote><p>此处允许使用多个条件，如果有就在&quot;{}&quot;中多写几个，<strong>默认是“且”条件关系</strong>。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">{</span>key:value<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="字段显示控制" tabindex="-1"><a class="header-anchor" href="#字段显示控制" aria-hidden="true">#</a> 字段显示控制</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.表名/集合名.find<span class="token punctuation">(</span>条件,<span class="token punctuation">{</span>字段名:0或1,<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># 0：不显示</span>
<span class="token comment"># 1：显示</span>
<span class="token comment"># _id字段，由于其是系统产生的，默认情况下是显示的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逻辑运算" tabindex="-1"><a class="header-anchor" href="#逻辑运算" aria-hidden="true">#</a> 逻辑运算</h3><ul><li><code>$gt</code> &gt;</li><li><code>$gte</code>&gt;=</li><li><code>$lt</code>&lt;</li><li><code>$lte</code>&lt;=</li><li><code>$ne</code>!=</li><li><code>$in:[1,2,3]</code> 集合，符合 1 或 2 或 3 的数据</li><li><code>默认,分割的各种条件就是且关系</code></li><li><code>$or:[{条件1},{条件2}]</code> 集合，符合 1 或 2 或 3 的数据</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">### 条件表达式</span>
<span class="token comment"># 年龄大于5的</span>
db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">{</span>age:<span class="token punctuation">{</span><span class="token variable">$gt</span>:5<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">#age &gt; 5（great than）</span>
<span class="token comment"># 年龄大于等于5的</span>
db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">{</span>age:<span class="token punctuation">{</span><span class="token variable">$gte</span>:5<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#age &gt;= 5 （great than &amp; equal）</span>
<span class="token comment"># 年龄小于5的</span>
db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">{</span>age:<span class="token punctuation">{</span><span class="token variable">$lt</span>:5<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#age &lt; 5  （less than）</span>
<span class="token comment"># 年龄小于等于5的</span>
db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">{</span>age:<span class="token punctuation">{</span><span class="token variable">$lte</span>:5<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#age &lt;= 5</span>
<span class="token comment"># 年龄不等于5的</span>
db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">{</span>age:<span class="token punctuation">{</span><span class="token variable">$ne</span>:5<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#age != 5   （not equal）</span>
<span class="token comment"># 在一个指定的数值中查询  $in    年龄在不在这几个指定数值当中</span>
db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">{</span>age:<span class="token punctuation">{</span><span class="token variable">$in</span>:<span class="token punctuation">[</span><span class="token number">1,2</span>,3<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">## where xxx in &#39;集合&#39;</span>

<span class="token comment">## 且关系  and</span>
db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">{</span>age:<span class="token punctuation">{</span><span class="token variable">$lt</span>:5<span class="token punctuation">}</span>,username:<span class="token string">&quot;user11&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">## where age &lt; 5 &amp; username = &#39;user11&#39;</span>

<span class="token comment">## 或关系 or（有点绕）</span>
db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token variable">$or</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span>条件1<span class="token punctuation">}</span>,<span class="token punctuation">{</span>条件2<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">## 例如</span>
db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token variable">$or</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span>age:<span class="token punctuation">{</span><span class="token variable">$ne</span>:5<span class="token punctuation">}</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span>username: <span class="token string">&quot;user11&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

需求：查询出年龄小于30或者id<span class="token operator">&gt;</span><span class="token number">3</span>的数据
db.members.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token variable">$or</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span>age:<span class="token punctuation">{</span><span class="token variable">$lt</span>:30<span class="token punctuation">}</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span>id:<span class="token punctuation">{</span><span class="token variable">$gt</span>:3<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模糊查询" tabindex="-1"><a class="header-anchor" href="#模糊查询" aria-hidden="true">#</a> 模糊查询</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#正则</span>
db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">{</span>字段名:/正则/i<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># i 不区分大小写</span>
<span class="token comment"># \`不能加引号\`，否则就成了字符串，成了字符串就成了精确匹配</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="统计" tabindex="-1"><a class="header-anchor" href="#统计" aria-hidden="true">#</a> 统计</h3><p>计数操作：数记录的数量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#统计总记录数</span>
db.表名/集合名.count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  // 统计所有的记录的总数
db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 统计符合条件的结果的记录总数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意点：find()顺序是否可以与 count()颠倒。</p><p>count 不能与 find 的顺序交换</p></blockquote><h3 id="排序" tabindex="-1"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 排序</span>
<span class="token comment"># 1 升序   -1 降序     字段</span>
<span class="token comment"># 以age字段来升序</span>
db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">)</span>.sort<span class="token punctuation">(</span><span class="token punctuation">{</span>age:1<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># 以age字段来降序</span>
db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">)</span>.sort<span class="token punctuation">(</span><span class="token punctuation">{</span>age:-1<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-8-分页-实用" tabindex="-1"><a class="header-anchor" href="#_2-8-分页-实用" aria-hidden="true">#</a> 2.8 分页（实用）</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 指定获取几条  skip/limit   分页</span>
db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">)</span>.limit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db.表名/集合名.find<span class="token punctuation">(</span><span class="token punctuation">)</span>.skip<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>.limit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">## skip表示起始位置，也就是从第几个开始</span>
<span class="token comment">## limit表示获取的记录的个数（长度）</span>
<span class="token comment">## skip与limit的顺序先后无所谓</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="更新" tabindex="-1"><a class="header-anchor" href="#更新" aria-hidden="true">#</a> 更新</h2><p>根据条件修改已存在集合中的文档数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 更新是要有条件的，没有条件在数据库层面来讲是可以更新的，但是实际是没有对应的业务需求</span>

<span class="token comment"># 只修改单条文档</span>
db.表名/集合名.updateOne<span class="token punctuation">(</span><span class="token punctuation">{</span>key:value<span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token variable">$set</span>:<span class="token punctuation">{</span>key:value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># 修改符合条件所有文档数据</span>
db.表名/集合名.updateMany<span class="token punctuation">(</span><span class="token punctuation">{</span>key:value<span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token variable">$set</span>:<span class="token punctuation">{</span>key:value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">## 如果上述两个方法的条件一致，并且有多个符合条件的，那么：</span>
<span class="token comment"># updateOne，不管有多少个符合条件的只修改第一个</span>
<span class="token comment"># updateMany，有多少改多少</span>

<span class="token comment"># 字段的值的\`自增和自减\`</span>
db.表名/集合名.updateOne<span class="token punctuation">(</span><span class="token punctuation">{</span>key:value<span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token variable">$inc</span>:<span class="token punctuation">{</span>key:1<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  // increments，自增
db.表名/集合名.updateMany<span class="token punctuation">(</span><span class="token punctuation">{</span>key:value<span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token variable">$inc</span>:<span class="token punctuation">{</span>key:1<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
db.表名/集合名.updateOne<span class="token punctuation">(</span><span class="token punctuation">{</span>key:value<span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token variable">$inc</span>:<span class="token punctuation">{</span>key:-1<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  // decrements
db.表名/集合名.updateMany<span class="token punctuation">(</span><span class="token punctuation">{</span>key:value<span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token variable">$inc</span>:<span class="token punctuation">{</span>key:-1<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># 自增是整数，自减是负数</span>
<span class="token comment"># 更新和删除操作允许不写条件，但是不能不写</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除-了解" tabindex="-1"><a class="header-anchor" href="#删除-了解" aria-hidden="true">#</a> 删除（了解）</h2><p>删除在实际开发的时候一般不用，<strong>正常做程序开发的时候所使用的删除实际上是修改</strong>。</p><p>删除分为：真删除（物理删除）、假删除（逻辑删除）。</p><p>删除集合中已存在的文档数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除单条文档</span>
db.表名/集合名.deleteOne<span class="token punctuation">(</span><span class="token punctuation">{</span> key: value <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># 删除符合条件多条文档</span>
db.表名/集合名.deleteMany<span class="token punctuation">(</span><span class="token punctuation">{</span>key: value<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># 删除全部数据（慎用）</span>
db.表名/集合名.deleteMany<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37),c=[p];function i(o,u){return s(),a("div",null,c)}const d=n(e,[["render",i],["__file","03_mdb_idpg.html.vue"]]);export{d as default};
