import{_ as n,o as s,c as a,f as p}from"./app-10c4e004.js";const t={},e=p(`<h1 id="修改-webpack-默认配置" tabindex="-1"><a class="header-anchor" href="#修改-webpack-默认配置" aria-hidden="true">#</a> 修改 webpack 默认配置</h1><h2 id="webpack-config-js" tabindex="-1"><a class="header-anchor" href="#webpack-config-js" aria-hidden="true">#</a> webpack.config.js</h2><p><code>webpack.config.js</code> 是 webpack 的配置文件。webpack 在真正开始打包构建之前，<strong>会先读取这个配置文件</strong>， 从而基于给定的配置，对项目进行打包。</p><p>注意：由于 webpack 是<strong>基于 node.js 开发出来的打包工具</strong>，因此在它的配置文件中，<strong>支持使用 node.js 相关 的语法和模块</strong>进行 webpack 的个性化配置</p><h2 id="webpack-的默认配置" tabindex="-1"><a class="header-anchor" href="#webpack-的默认配置" aria-hidden="true">#</a> webpack 的默认配置</h2><p>在 webpack 4.x 和 5.x 的版本中，有如下的默认约定：</p><ol><li><p>默认的打包入口文件为 src -&gt; index.js</p></li><li><p>默认的输出文件路径为 dist -&gt; main.js</p></li></ol><p>注意：<strong>可以在 webpack.config.js 中修改打包的默认约定</strong>，如果没有按照规定取名，打包也会出错</p><h2 id="自定义打包的入口与出口" tabindex="-1"><a class="header-anchor" href="#自定义打包的入口与出口" aria-hidden="true">#</a> 自定义打包的入口与出口</h2><p>在<code>webpack.config.js</code>中配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// node 内置核心模块，用来处理路径问题</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>_dirname<span class="token punctuation">,</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 输出配置</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;bundle.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件名</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件路径配置</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span> <span class="token comment">//开发环境</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内置模块-path" tabindex="-1"><a class="header-anchor" href="#内置模块-path" aria-hidden="true">#</a> 内置模块 path</h3><p>path 模块用于对路径和文件进行处理，提供了很多好用的方法</p><ul><li>dirname：获取文件的父文件夹</li><li>basename：获取文件名</li><li>extname：获取文件扩展名</li></ul><p>路径的拼接：path.join</p><ul><li>如果我们希望将多个路径进行拼接，但是不同的操作系统可能使用的是不同的分隔符</li><li>这个时候我们可以使用 path.join 函数；</li></ul><p>拼接绝对路径：path.resolve</p><ul><li>path.resolve() 方法会把一个路径或路径片段的序列解析为一个绝对路径</li><li>给定的路径的序列是从右往左被处理的，后面每个 path 被依次解析，直到构造完成一个绝对路径</li><li>如果在处理完所有给定 path 的段之后，还没有生成绝对路径，则使用当前工作目录</li><li>生成的路径被规范化并删除尾部斜杠，零长度 path 段被忽略</li><li>如果没有 path 传递段，path.resolve()将返回当前工作目录的绝对路径</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/main.js&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;bundle.js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./build&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),o=[e];function c(i,l){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","04_webpack_config.js.html.vue"]]);export{u as default};
